
VirtualKeyBoradMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080062ac  080062ac  000162ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006380  08006380  000202b8  2**0
                  CONTENTS
  4 .ARM          00000000  08006380  08006380  000202b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006380  08006380  000202b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006380  08006380  00016380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006384  08006384  00016384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b8  20000000  08006388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b4  200002b8  08006640  000202b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000a6c  08006640  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc3f  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a1f  00000000  00000000  0002ff1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a58  00000000  00000000  00032940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000900  00000000  00000000  00033398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180f2  00000000  00000000  00033c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c336  00000000  00000000  0004bd8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078689  00000000  00000000  000580c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0749  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002234  00000000  00000000  000d07c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002b8 	.word	0x200002b8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006294 	.word	0x08006294

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002bc 	.word	0x200002bc
 8000104:	08006294 	.word	0x08006294

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b089      	sub	sp, #36	; 0x24
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	{//复位时断�?USB连接,再重新连接USB
			{
			  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	2408      	movs	r4, #8
 8000228:	193b      	adds	r3, r7, r4
 800022a:	0018      	movs	r0, r3
 800022c:	2314      	movs	r3, #20
 800022e:	001a      	movs	r2, r3
 8000230:	2100      	movs	r1, #0
 8000232:	f006 f827 	bl	8006284 <memset>

			  /* GPIO Ports Clock Enable */
			  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000236:	4b24      	ldr	r3, [pc, #144]	; (80002c8 <main+0xa8>)
 8000238:	695a      	ldr	r2, [r3, #20]
 800023a:	4b23      	ldr	r3, [pc, #140]	; (80002c8 <main+0xa8>)
 800023c:	2180      	movs	r1, #128	; 0x80
 800023e:	0289      	lsls	r1, r1, #10
 8000240:	430a      	orrs	r2, r1
 8000242:	615a      	str	r2, [r3, #20]
 8000244:	4b20      	ldr	r3, [pc, #128]	; (80002c8 <main+0xa8>)
 8000246:	695a      	ldr	r2, [r3, #20]
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	029b      	lsls	r3, r3, #10
 800024c:	4013      	ands	r3, r2
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]

			  /*Configure GPIO pin Output Level */
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000252:	23c0      	movs	r3, #192	; 0xc0
 8000254:	0159      	lsls	r1, r3, #5
 8000256:	2390      	movs	r3, #144	; 0x90
 8000258:	05db      	lsls	r3, r3, #23
 800025a:	2200      	movs	r2, #0
 800025c:	0018      	movs	r0, r3
 800025e:	f000 fcda 	bl	8000c16 <HAL_GPIO_WritePin>

			  /*Configure GPIO pins : PA11 PA12 */
			  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000262:	193b      	adds	r3, r7, r4
 8000264:	22c0      	movs	r2, #192	; 0xc0
 8000266:	0152      	lsls	r2, r2, #5
 8000268:	601a      	str	r2, [r3, #0]
			  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800026a:	193b      	adds	r3, r7, r4
 800026c:	2201      	movs	r2, #1
 800026e:	605a      	str	r2, [r3, #4]
			  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000270:	193b      	adds	r3, r7, r4
 8000272:	2202      	movs	r2, #2
 8000274:	609a      	str	r2, [r3, #8]
			  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000276:	193b      	adds	r3, r7, r4
 8000278:	2200      	movs	r2, #0
 800027a:	60da      	str	r2, [r3, #12]
			  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800027c:	193a      	adds	r2, r7, r4
 800027e:	2390      	movs	r3, #144	; 0x90
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	0011      	movs	r1, r2
 8000284:	0018      	movs	r0, r3
 8000286:	f000 fb31 	bl	80008ec <HAL_GPIO_Init>

			  /*Configure GPIO pin Output Level */
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800028a:	23c0      	movs	r3, #192	; 0xc0
 800028c:	0159      	lsls	r1, r3, #5
 800028e:	2390      	movs	r3, #144	; 0x90
 8000290:	05db      	lsls	r3, r3, #23
 8000292:	2200      	movs	r2, #0
 8000294:	0018      	movs	r0, r3
 8000296:	f000 fcbe 	bl	8000c16 <HAL_GPIO_WritePin>

			}
			{//延时�?
				uint32_t count=48000000ul/100;
 800029a:	4b0c      	ldr	r3, [pc, #48]	; (80002cc <main+0xac>)
 800029c:	61fb      	str	r3, [r7, #28]
				while(count--);
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	69fb      	ldr	r3, [r7, #28]
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	61fa      	str	r2, [r7, #28]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d1fa      	bne.n	80002a0 <main+0x80>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002aa:	f000 f9bb 	bl	8000624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ae:	f000 f80f 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b2:	f000 f861 	bl	8000378 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80002b6:	f005 f99d 	bl	80055f4 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_Delay(20);
 80002ba:	2014      	movs	r0, #20
 80002bc:	f000 fa16 	bl	80006ec <HAL_Delay>
	keyscan();
 80002c0:	f005 fdd2 	bl	8005e68 <keyscan>
	HAL_Delay(20);
 80002c4:	e7f9      	b.n	80002ba <main+0x9a>
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	40021000 	.word	0x40021000
 80002cc:	00075300 	.word	0x00075300

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b590      	push	{r4, r7, lr}
 80002d2:	b099      	sub	sp, #100	; 0x64
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	242c      	movs	r4, #44	; 0x2c
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	0018      	movs	r0, r3
 80002dc:	2334      	movs	r3, #52	; 0x34
 80002de:	001a      	movs	r2, r3
 80002e0:	2100      	movs	r1, #0
 80002e2:	f005 ffcf 	bl	8006284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e6:	231c      	movs	r3, #28
 80002e8:	18fb      	adds	r3, r7, r3
 80002ea:	0018      	movs	r0, r3
 80002ec:	2310      	movs	r3, #16
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f005 ffc7 	bl	8006284 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f6:	003b      	movs	r3, r7
 80002f8:	0018      	movs	r0, r3
 80002fa:	231c      	movs	r3, #28
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f005 ffc0 	bl	8006284 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000304:	193b      	adds	r3, r7, r4
 8000306:	2220      	movs	r2, #32
 8000308:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800030a:	193b      	adds	r3, r7, r4
 800030c:	2201      	movs	r2, #1
 800030e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000310:	193b      	adds	r3, r7, r4
 8000312:	2200      	movs	r2, #0
 8000314:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	193b      	adds	r3, r7, r4
 8000318:	0018      	movs	r0, r3
 800031a:	f001 fcc5 	bl	8001ca8 <HAL_RCC_OscConfig>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000322:	f000 f8ff 	bl	8000524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	211c      	movs	r1, #28
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2207      	movs	r2, #7
 800032c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2203      	movs	r2, #3
 8000332:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2101      	movs	r1, #1
 8000344:	0018      	movs	r0, r3
 8000346:	f002 f835 	bl	80023b4 <HAL_RCC_ClockConfig>
 800034a:	1e03      	subs	r3, r0, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800034e:	f000 f8e9 	bl	8000524 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000352:	003b      	movs	r3, r7
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	0292      	lsls	r2, r2, #10
 8000358:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800035a:	003b      	movs	r3, r7
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000360:	003b      	movs	r3, r7
 8000362:	0018      	movs	r0, r3
 8000364:	f002 f97e 	bl	8002664 <HAL_RCCEx_PeriphCLKConfig>
 8000368:	1e03      	subs	r3, r0, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800036c:	f000 f8da 	bl	8000524 <Error_Handler>
  }
}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	b019      	add	sp, #100	; 0x64
 8000376:	bd90      	pop	{r4, r7, pc}

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b590      	push	{r4, r7, lr}
 800037a:	b08b      	sub	sp, #44	; 0x2c
 800037c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037e:	2414      	movs	r4, #20
 8000380:	193b      	adds	r3, r7, r4
 8000382:	0018      	movs	r0, r3
 8000384:	2314      	movs	r3, #20
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f005 ff7b 	bl	8006284 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800038e:	4b5e      	ldr	r3, [pc, #376]	; (8000508 <MX_GPIO_Init+0x190>)
 8000390:	695a      	ldr	r2, [r3, #20]
 8000392:	4b5d      	ldr	r3, [pc, #372]	; (8000508 <MX_GPIO_Init+0x190>)
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	0309      	lsls	r1, r1, #12
 8000398:	430a      	orrs	r2, r1
 800039a:	615a      	str	r2, [r3, #20]
 800039c:	4b5a      	ldr	r3, [pc, #360]	; (8000508 <MX_GPIO_Init+0x190>)
 800039e:	695a      	ldr	r2, [r3, #20]
 80003a0:	2380      	movs	r3, #128	; 0x80
 80003a2:	031b      	lsls	r3, r3, #12
 80003a4:	4013      	ands	r3, r2
 80003a6:	613b      	str	r3, [r7, #16]
 80003a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003aa:	4b57      	ldr	r3, [pc, #348]	; (8000508 <MX_GPIO_Init+0x190>)
 80003ac:	695a      	ldr	r2, [r3, #20]
 80003ae:	4b56      	ldr	r3, [pc, #344]	; (8000508 <MX_GPIO_Init+0x190>)
 80003b0:	2180      	movs	r1, #128	; 0x80
 80003b2:	03c9      	lsls	r1, r1, #15
 80003b4:	430a      	orrs	r2, r1
 80003b6:	615a      	str	r2, [r3, #20]
 80003b8:	4b53      	ldr	r3, [pc, #332]	; (8000508 <MX_GPIO_Init+0x190>)
 80003ba:	695a      	ldr	r2, [r3, #20]
 80003bc:	2380      	movs	r3, #128	; 0x80
 80003be:	03db      	lsls	r3, r3, #15
 80003c0:	4013      	ands	r3, r2
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b50      	ldr	r3, [pc, #320]	; (8000508 <MX_GPIO_Init+0x190>)
 80003c8:	695a      	ldr	r2, [r3, #20]
 80003ca:	4b4f      	ldr	r3, [pc, #316]	; (8000508 <MX_GPIO_Init+0x190>)
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	0289      	lsls	r1, r1, #10
 80003d0:	430a      	orrs	r2, r1
 80003d2:	615a      	str	r2, [r3, #20]
 80003d4:	4b4c      	ldr	r3, [pc, #304]	; (8000508 <MX_GPIO_Init+0x190>)
 80003d6:	695a      	ldr	r2, [r3, #20]
 80003d8:	2380      	movs	r3, #128	; 0x80
 80003da:	029b      	lsls	r3, r3, #10
 80003dc:	4013      	ands	r3, r2
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	4b49      	ldr	r3, [pc, #292]	; (8000508 <MX_GPIO_Init+0x190>)
 80003e4:	695a      	ldr	r2, [r3, #20]
 80003e6:	4b48      	ldr	r3, [pc, #288]	; (8000508 <MX_GPIO_Init+0x190>)
 80003e8:	2180      	movs	r1, #128	; 0x80
 80003ea:	02c9      	lsls	r1, r1, #11
 80003ec:	430a      	orrs	r2, r1
 80003ee:	615a      	str	r2, [r3, #20]
 80003f0:	4b45      	ldr	r3, [pc, #276]	; (8000508 <MX_GPIO_Init+0x190>)
 80003f2:	695a      	ldr	r2, [r3, #20]
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	02db      	lsls	r3, r3, #11
 80003f8:	4013      	ands	r3, r2
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80003fe:	23e0      	movs	r3, #224	; 0xe0
 8000400:	021b      	lsls	r3, r3, #8
 8000402:	4842      	ldr	r0, [pc, #264]	; (800050c <MX_GPIO_Init+0x194>)
 8000404:	2200      	movs	r2, #0
 8000406:	0019      	movs	r1, r3
 8000408:	f000 fc05 	bl	8000c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800040c:	4b40      	ldr	r3, [pc, #256]	; (8000510 <MX_GPIO_Init+0x198>)
 800040e:	2200      	movs	r2, #0
 8000410:	2103      	movs	r1, #3
 8000412:	0018      	movs	r0, r3
 8000414:	f000 fbff 	bl	8000c16 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000418:	493e      	ldr	r1, [pc, #248]	; (8000514 <MX_GPIO_Init+0x19c>)
 800041a:	2390      	movs	r3, #144	; 0x90
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	2201      	movs	r2, #1
 8000420:	0018      	movs	r0, r3
 8000422:	f000 fbf8 	bl	8000c16 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000426:	193b      	adds	r3, r7, r4
 8000428:	22e0      	movs	r2, #224	; 0xe0
 800042a:	0212      	lsls	r2, r2, #8
 800042c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	193b      	adds	r3, r7, r4
 8000430:	2201      	movs	r2, #1
 8000432:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	193b      	adds	r3, r7, r4
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	193b      	adds	r3, r7, r4
 800043c:	2200      	movs	r2, #0
 800043e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000440:	193b      	adds	r3, r7, r4
 8000442:	4a32      	ldr	r2, [pc, #200]	; (800050c <MX_GPIO_Init+0x194>)
 8000444:	0019      	movs	r1, r3
 8000446:	0010      	movs	r0, r2
 8000448:	f000 fa50 	bl	80008ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2203      	movs	r2, #3
 8000450:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	193b      	adds	r3, r7, r4
 8000454:	2201      	movs	r2, #1
 8000456:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2200      	movs	r2, #0
 800045c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045e:	193b      	adds	r3, r7, r4
 8000460:	2200      	movs	r2, #0
 8000462:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000464:	193b      	adds	r3, r7, r4
 8000466:	4a2a      	ldr	r2, [pc, #168]	; (8000510 <MX_GPIO_Init+0x198>)
 8000468:	0019      	movs	r1, r3
 800046a:	0010      	movs	r0, r2
 800046c:	f000 fa3e 	bl	80008ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 
                           PA4 PA5 PA6 PA7 
                           PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000470:	193b      	adds	r3, r7, r4
 8000472:	4a28      	ldr	r2, [pc, #160]	; (8000514 <MX_GPIO_Init+0x19c>)
 8000474:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2211      	movs	r2, #17
 800047a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000488:	193a      	adds	r2, r7, r4
 800048a:	2390      	movs	r3, #144	; 0x90
 800048c:	05db      	lsls	r3, r3, #23
 800048e:	0011      	movs	r1, r2
 8000490:	0018      	movs	r0, r3
 8000492:	f000 fa2b 	bl	80008ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14 
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14 
 8000496:	0021      	movs	r1, r4
 8000498:	187b      	adds	r3, r7, r1
 800049a:	4a1f      	ldr	r2, [pc, #124]	; (8000518 <MX_GPIO_Init+0x1a0>)
 800049c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2202      	movs	r2, #2
 80004a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004aa:	000c      	movs	r4, r1
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	4a1b      	ldr	r2, [pc, #108]	; (800051c <MX_GPIO_Init+0x1a4>)
 80004b0:	0019      	movs	r1, r3
 80004b2:	0010      	movs	r0, r2
 80004b4:	f000 fa1a 	bl	80008ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13 
                           PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
 80004b8:	0021      	movs	r1, r4
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	4a18      	ldr	r2, [pc, #96]	; (8000520 <MX_GPIO_Init+0x1a8>)
 80004be:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2200      	movs	r2, #0
 80004c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2201      	movs	r2, #1
 80004ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004cc:	000c      	movs	r4, r1
 80004ce:	187b      	adds	r3, r7, r1
 80004d0:	4a12      	ldr	r2, [pc, #72]	; (800051c <MX_GPIO_Init+0x1a4>)
 80004d2:	0019      	movs	r1, r3
 80004d4:	0010      	movs	r0, r2
 80004d6:	f000 fa09 	bl	80008ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80004da:	0021      	movs	r1, r4
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2284      	movs	r2, #132	; 0x84
 80004e0:	0212      	lsls	r2, r2, #8
 80004e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004ea:	187b      	adds	r3, r7, r1
 80004ec:	2202      	movs	r2, #2
 80004ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004f0:	187a      	adds	r2, r7, r1
 80004f2:	2390      	movs	r3, #144	; 0x90
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	0011      	movs	r1, r2
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 f9f7 	bl	80008ec <HAL_GPIO_Init>

}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b00b      	add	sp, #44	; 0x2c
 8000504:	bd90      	pop	{r4, r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	40021000 	.word	0x40021000
 800050c:	48000800 	.word	0x48000800
 8000510:	48001400 	.word	0x48001400
 8000514:	000003ff 	.word	0x000003ff
 8000518:	0000c007 	.word	0x0000c007
 800051c:	48000400 	.word	0x48000400
 8000520:	00003ff8 	.word	0x00003ff8

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000528:	46c0      	nop			; (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <HAL_MspInit+0x44>)
 8000538:	699a      	ldr	r2, [r3, #24]
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <HAL_MspInit+0x44>)
 800053c:	2101      	movs	r1, #1
 800053e:	430a      	orrs	r2, r1
 8000540:	619a      	str	r2, [r3, #24]
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <HAL_MspInit+0x44>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	2201      	movs	r2, #1
 8000548:	4013      	ands	r3, r2
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <HAL_MspInit+0x44>)
 8000550:	69da      	ldr	r2, [r3, #28]
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <HAL_MspInit+0x44>)
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	0549      	lsls	r1, r1, #21
 8000558:	430a      	orrs	r2, r1
 800055a:	61da      	str	r2, [r3, #28]
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <HAL_MspInit+0x44>)
 800055e:	69da      	ldr	r2, [r3, #28]
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	055b      	lsls	r3, r3, #21
 8000564:	4013      	ands	r3, r2
 8000566:	603b      	str	r3, [r7, #0]
 8000568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40021000 	.word	0x40021000

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <HardFault_Handler+0x4>

08000588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005a0:	f000 f888 	bl	80006b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <USB_IRQHandler+0x14>)
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 fc56 	bl	8000e64 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	20000334 	.word	0x20000334

080005c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005d0:	480d      	ldr	r0, [pc, #52]	; (8000608 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d4:	480d      	ldr	r0, [pc, #52]	; (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005d6:	490e      	ldr	r1, [pc, #56]	; (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005dc:	e002      	b.n	80005e4 <LoopCopyDataInit>

080005de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e2:	3304      	adds	r3, #4

080005e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e8:	d3f9      	bcc.n	80005de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ec:	4c0b      	ldr	r4, [pc, #44]	; (800061c <LoopForever+0x16>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f0:	e001      	b.n	80005f6 <LoopFillZerobss>

080005f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f4:	3204      	adds	r2, #4

080005f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f8:	d3fb      	bcc.n	80005f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005fa:	f7ff ffe3 	bl	80005c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80005fe:	f005 fe1d 	bl	800623c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000602:	f7ff fe0d 	bl	8000220 <main>

08000606 <LoopForever>:

LoopForever:
    b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   r0, =_estack
 8000608:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	200002b8 	.word	0x200002b8
  ldr r2, =_sidata
 8000614:	08006388 	.word	0x08006388
  ldr r2, =_sbss
 8000618:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 800061c:	20000a6c 	.word	0x20000a6c

08000620 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_COMP_IRQHandler>
	...

08000624 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <HAL_Init+0x24>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_Init+0x24>)
 800062e:	2110      	movs	r1, #16
 8000630:	430a      	orrs	r2, r1
 8000632:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000634:	2000      	movs	r0, #0
 8000636:	f000 f809 	bl	800064c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800063a:	f7ff ff79 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800063e:	2300      	movs	r3, #0
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	40022000 	.word	0x40022000

0800064c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_InitTick+0x5c>)
 8000656:	681c      	ldr	r4, [r3, #0]
 8000658:	4b14      	ldr	r3, [pc, #80]	; (80006ac <HAL_InitTick+0x60>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	0019      	movs	r1, r3
 800065e:	23fa      	movs	r3, #250	; 0xfa
 8000660:	0098      	lsls	r0, r3, #2
 8000662:	f7ff fd51 	bl	8000108 <__udivsi3>
 8000666:	0003      	movs	r3, r0
 8000668:	0019      	movs	r1, r3
 800066a:	0020      	movs	r0, r4
 800066c:	f7ff fd4c 	bl	8000108 <__udivsi3>
 8000670:	0003      	movs	r3, r0
 8000672:	0018      	movs	r0, r3
 8000674:	f000 f92d 	bl	80008d2 <HAL_SYSTICK_Config>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	e00f      	b.n	80006a0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2b03      	cmp	r3, #3
 8000684:	d80b      	bhi.n	800069e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	2301      	movs	r3, #1
 800068a:	425b      	negs	r3, r3
 800068c:	2200      	movs	r2, #0
 800068e:	0018      	movs	r0, r3
 8000690:	f000 f8fa 	bl	8000888 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_InitTick+0x64>)
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800069a:	2300      	movs	r3, #0
 800069c:	e000      	b.n	80006a0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
}
 80006a0:	0018      	movs	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b003      	add	sp, #12
 80006a6:	bd90      	pop	{r4, r7, pc}
 80006a8:	20000000 	.word	0x20000000
 80006ac:	20000008 	.word	0x20000008
 80006b0:	20000004 	.word	0x20000004

080006b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <HAL_IncTick+0x1c>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	001a      	movs	r2, r3
 80006be:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <HAL_IncTick+0x20>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	18d2      	adds	r2, r2, r3
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_IncTick+0x20>)
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000330 	.word	0x20000330

080006d8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;
 80006dc:	4b02      	ldr	r3, [pc, #8]	; (80006e8 <HAL_GetTick+0x10>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	20000330 	.word	0x20000330

080006ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f4:	f7ff fff0 	bl	80006d8 <HAL_GetTick>
 80006f8:	0003      	movs	r3, r0
 80006fa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3301      	adds	r3, #1
 8000704:	d005      	beq.n	8000712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_Delay+0x40>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	001a      	movs	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	189b      	adds	r3, r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	f7ff ffe0 	bl	80006d8 <HAL_GetTick>
 8000718:	0002      	movs	r2, r0
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	429a      	cmp	r2, r3
 8000722:	d8f7      	bhi.n	8000714 <HAL_Delay+0x28>
  {
  }
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b004      	add	sp, #16
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000008 	.word	0x20000008

08000730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	0002      	movs	r2, r0
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800073c:	1dfb      	adds	r3, r7, #7
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b7f      	cmp	r3, #127	; 0x7f
 8000742:	d809      	bhi.n	8000758 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000744:	1dfb      	adds	r3, r7, #7
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	001a      	movs	r2, r3
 800074a:	231f      	movs	r3, #31
 800074c:	401a      	ands	r2, r3
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <__NVIC_EnableIRQ+0x30>)
 8000750:	2101      	movs	r1, #1
 8000752:	4091      	lsls	r1, r2
 8000754:	000a      	movs	r2, r1
 8000756:	601a      	str	r2, [r3, #0]
  }
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}
 8000760:	e000e100 	.word	0xe000e100

08000764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	0002      	movs	r2, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b7f      	cmp	r3, #127	; 0x7f
 8000778:	d828      	bhi.n	80007cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800077a:	4a2f      	ldr	r2, [pc, #188]	; (8000838 <__NVIC_SetPriority+0xd4>)
 800077c:	1dfb      	adds	r3, r7, #7
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b25b      	sxtb	r3, r3
 8000782:	089b      	lsrs	r3, r3, #2
 8000784:	33c0      	adds	r3, #192	; 0xc0
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	589b      	ldr	r3, [r3, r2]
 800078a:	1dfa      	adds	r2, r7, #7
 800078c:	7812      	ldrb	r2, [r2, #0]
 800078e:	0011      	movs	r1, r2
 8000790:	2203      	movs	r2, #3
 8000792:	400a      	ands	r2, r1
 8000794:	00d2      	lsls	r2, r2, #3
 8000796:	21ff      	movs	r1, #255	; 0xff
 8000798:	4091      	lsls	r1, r2
 800079a:	000a      	movs	r2, r1
 800079c:	43d2      	mvns	r2, r2
 800079e:	401a      	ands	r2, r3
 80007a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	019b      	lsls	r3, r3, #6
 80007a6:	22ff      	movs	r2, #255	; 0xff
 80007a8:	401a      	ands	r2, r3
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	0018      	movs	r0, r3
 80007b0:	2303      	movs	r3, #3
 80007b2:	4003      	ands	r3, r0
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b8:	481f      	ldr	r0, [pc, #124]	; (8000838 <__NVIC_SetPriority+0xd4>)
 80007ba:	1dfb      	adds	r3, r7, #7
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	b25b      	sxtb	r3, r3
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	430a      	orrs	r2, r1
 80007c4:	33c0      	adds	r3, #192	; 0xc0
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007ca:	e031      	b.n	8000830 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007cc:	4a1b      	ldr	r2, [pc, #108]	; (800083c <__NVIC_SetPriority+0xd8>)
 80007ce:	1dfb      	adds	r3, r7, #7
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	0019      	movs	r1, r3
 80007d4:	230f      	movs	r3, #15
 80007d6:	400b      	ands	r3, r1
 80007d8:	3b08      	subs	r3, #8
 80007da:	089b      	lsrs	r3, r3, #2
 80007dc:	3306      	adds	r3, #6
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	18d3      	adds	r3, r2, r3
 80007e2:	3304      	adds	r3, #4
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	1dfa      	adds	r2, r7, #7
 80007e8:	7812      	ldrb	r2, [r2, #0]
 80007ea:	0011      	movs	r1, r2
 80007ec:	2203      	movs	r2, #3
 80007ee:	400a      	ands	r2, r1
 80007f0:	00d2      	lsls	r2, r2, #3
 80007f2:	21ff      	movs	r1, #255	; 0xff
 80007f4:	4091      	lsls	r1, r2
 80007f6:	000a      	movs	r2, r1
 80007f8:	43d2      	mvns	r2, r2
 80007fa:	401a      	ands	r2, r3
 80007fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	019b      	lsls	r3, r3, #6
 8000802:	22ff      	movs	r2, #255	; 0xff
 8000804:	401a      	ands	r2, r3
 8000806:	1dfb      	adds	r3, r7, #7
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	0018      	movs	r0, r3
 800080c:	2303      	movs	r3, #3
 800080e:	4003      	ands	r3, r0
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <__NVIC_SetPriority+0xd8>)
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	001c      	movs	r4, r3
 800081c:	230f      	movs	r3, #15
 800081e:	4023      	ands	r3, r4
 8000820:	3b08      	subs	r3, #8
 8000822:	089b      	lsrs	r3, r3, #2
 8000824:	430a      	orrs	r2, r1
 8000826:	3306      	adds	r3, #6
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	18c3      	adds	r3, r0, r3
 800082c:	3304      	adds	r3, #4
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b003      	add	sp, #12
 8000836:	bd90      	pop	{r4, r7, pc}
 8000838:	e000e100 	.word	0xe000e100
 800083c:	e000ed00 	.word	0xe000ed00

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <SysTick_Config+0x40>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d901      	bls.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e010      	b.n	8000878 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <SysTick_Config+0x44>)
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	3a01      	subs	r2, #1
 800085c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	2301      	movs	r3, #1
 8000860:	425b      	negs	r3, r3
 8000862:	2103      	movs	r1, #3
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff ff7d 	bl	8000764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <SysTick_Config+0x44>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <SysTick_Config+0x44>)
 8000872:	2207      	movs	r2, #7
 8000874:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000876:	2300      	movs	r3, #0
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}
 8000880:	00ffffff 	.word	0x00ffffff
 8000884:	e000e010 	.word	0xe000e010

08000888 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
 8000892:	210f      	movs	r1, #15
 8000894:	187b      	adds	r3, r7, r1
 8000896:	1c02      	adds	r2, r0, #0
 8000898:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	187b      	adds	r3, r7, r1
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff ff5d 	bl	8000764 <__NVIC_SetPriority>
}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b004      	add	sp, #16
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	0002      	movs	r2, r0
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	0018      	movs	r0, r3
 80008c6:	f7ff ff33 	bl	8000730 <__NVIC_EnableIRQ>
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	0018      	movs	r0, r3
 80008de:	f7ff ffaf 	bl	8000840 <SysTick_Config>
 80008e2:	0003      	movs	r3, r0
}
 80008e4:	0018      	movs	r0, r3
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}

080008ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008fa:	e155      	b.n	8000ba8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4091      	lsls	r1, r2
 8000906:	000a      	movs	r2, r1
 8000908:	4013      	ands	r3, r2
 800090a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d100      	bne.n	8000914 <HAL_GPIO_Init+0x28>
 8000912:	e146      	b.n	8000ba2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b02      	cmp	r3, #2
 800091a:	d003      	beq.n	8000924 <HAL_GPIO_Init+0x38>
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	2b12      	cmp	r3, #18
 8000922:	d123      	bne.n	800096c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	08da      	lsrs	r2, r3, #3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3208      	adds	r2, #8
 800092c:	0092      	lsls	r2, r2, #2
 800092e:	58d3      	ldr	r3, [r2, r3]
 8000930:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	2207      	movs	r2, #7
 8000936:	4013      	ands	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	220f      	movs	r2, #15
 800093c:	409a      	lsls	r2, r3
 800093e:	0013      	movs	r3, r2
 8000940:	43da      	mvns	r2, r3
 8000942:	693b      	ldr	r3, [r7, #16]
 8000944:	4013      	ands	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	691a      	ldr	r2, [r3, #16]
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	2107      	movs	r1, #7
 8000950:	400b      	ands	r3, r1
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	409a      	lsls	r2, r3
 8000956:	0013      	movs	r3, r2
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	08da      	lsrs	r2, r3, #3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3208      	adds	r2, #8
 8000966:	0092      	lsls	r2, r2, #2
 8000968:	6939      	ldr	r1, [r7, #16]
 800096a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	2203      	movs	r2, #3
 8000978:	409a      	lsls	r2, r3
 800097a:	0013      	movs	r3, r2
 800097c:	43da      	mvns	r2, r3
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	4013      	ands	r3, r2
 8000982:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	2203      	movs	r2, #3
 800098a:	401a      	ands	r2, r3
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	409a      	lsls	r2, r3
 8000992:	0013      	movs	r3, r2
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4313      	orrs	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d00b      	beq.n	80009c0 <HAL_GPIO_Init+0xd4>
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d007      	beq.n	80009c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009b4:	2b11      	cmp	r3, #17
 80009b6:	d003      	beq.n	80009c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2b12      	cmp	r3, #18
 80009be:	d130      	bne.n	8000a22 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	409a      	lsls	r2, r3
 80009ce:	0013      	movs	r3, r2
 80009d0:	43da      	mvns	r2, r3
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	409a      	lsls	r2, r3
 80009e2:	0013      	movs	r3, r2
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009f6:	2201      	movs	r2, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	409a      	lsls	r2, r3
 80009fc:	0013      	movs	r3, r2
 80009fe:	43da      	mvns	r2, r3
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	091b      	lsrs	r3, r3, #4
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
 8000a14:	0013      	movs	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	68db      	ldr	r3, [r3, #12]
 8000a26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	2203      	movs	r2, #3
 8000a2e:	409a      	lsls	r2, r3
 8000a30:	0013      	movs	r3, r2
 8000a32:	43da      	mvns	r2, r3
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4013      	ands	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	409a      	lsls	r2, r3
 8000a44:	0013      	movs	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685a      	ldr	r2, [r3, #4]
 8000a56:	2380      	movs	r3, #128	; 0x80
 8000a58:	055b      	lsls	r3, r3, #21
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	d100      	bne.n	8000a60 <HAL_GPIO_Init+0x174>
 8000a5e:	e0a0      	b.n	8000ba2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a60:	4b57      	ldr	r3, [pc, #348]	; (8000bc0 <HAL_GPIO_Init+0x2d4>)
 8000a62:	699a      	ldr	r2, [r3, #24]
 8000a64:	4b56      	ldr	r3, [pc, #344]	; (8000bc0 <HAL_GPIO_Init+0x2d4>)
 8000a66:	2101      	movs	r1, #1
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	619a      	str	r2, [r3, #24]
 8000a6c:	4b54      	ldr	r3, [pc, #336]	; (8000bc0 <HAL_GPIO_Init+0x2d4>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	2201      	movs	r2, #1
 8000a72:	4013      	ands	r3, r2
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a78:	4a52      	ldr	r2, [pc, #328]	; (8000bc4 <HAL_GPIO_Init+0x2d8>)
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	089b      	lsrs	r3, r3, #2
 8000a7e:	3302      	adds	r3, #2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	589b      	ldr	r3, [r3, r2]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2203      	movs	r2, #3
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	220f      	movs	r2, #15
 8000a90:	409a      	lsls	r2, r3
 8000a92:	0013      	movs	r3, r2
 8000a94:	43da      	mvns	r2, r3
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	2390      	movs	r3, #144	; 0x90
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d019      	beq.n	8000ada <HAL_GPIO_Init+0x1ee>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a47      	ldr	r2, [pc, #284]	; (8000bc8 <HAL_GPIO_Init+0x2dc>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d013      	beq.n	8000ad6 <HAL_GPIO_Init+0x1ea>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a46      	ldr	r2, [pc, #280]	; (8000bcc <HAL_GPIO_Init+0x2e0>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d00d      	beq.n	8000ad2 <HAL_GPIO_Init+0x1e6>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a45      	ldr	r2, [pc, #276]	; (8000bd0 <HAL_GPIO_Init+0x2e4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d007      	beq.n	8000ace <HAL_GPIO_Init+0x1e2>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a44      	ldr	r2, [pc, #272]	; (8000bd4 <HAL_GPIO_Init+0x2e8>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d101      	bne.n	8000aca <HAL_GPIO_Init+0x1de>
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	e008      	b.n	8000adc <HAL_GPIO_Init+0x1f0>
 8000aca:	2305      	movs	r3, #5
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x1f0>
 8000ace:	2303      	movs	r3, #3
 8000ad0:	e004      	b.n	8000adc <HAL_GPIO_Init+0x1f0>
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	e002      	b.n	8000adc <HAL_GPIO_Init+0x1f0>
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e000      	b.n	8000adc <HAL_GPIO_Init+0x1f0>
 8000ada:	2300      	movs	r3, #0
 8000adc:	697a      	ldr	r2, [r7, #20]
 8000ade:	2103      	movs	r1, #3
 8000ae0:	400a      	ands	r2, r1
 8000ae2:	0092      	lsls	r2, r2, #2
 8000ae4:	4093      	lsls	r3, r2
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000aec:	4935      	ldr	r1, [pc, #212]	; (8000bc4 <HAL_GPIO_Init+0x2d8>)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	089b      	lsrs	r3, r3, #2
 8000af2:	3302      	adds	r3, #2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000afa:	4b37      	ldr	r3, [pc, #220]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	43da      	mvns	r2, r3
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	025b      	lsls	r3, r3, #9
 8000b12:	4013      	ands	r3, r2
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b1e:	4b2e      	ldr	r3, [pc, #184]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000b24:	4b2c      	ldr	r3, [pc, #176]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	2380      	movs	r3, #128	; 0x80
 8000b3a:	029b      	lsls	r3, r3, #10
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b4e:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43da      	mvns	r2, r3
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	2380      	movs	r3, #128	; 0x80
 8000b64:	035b      	lsls	r3, r3, #13
 8000b66:	4013      	ands	r3, r2
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	43da      	mvns	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685a      	ldr	r2, [r3, #4]
 8000b8c:	2380      	movs	r3, #128	; 0x80
 8000b8e:	039b      	lsls	r3, r3, #14
 8000b90:	4013      	ands	r3, r2
 8000b92:	d003      	beq.n	8000b9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <HAL_GPIO_Init+0x2ec>)
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	40da      	lsrs	r2, r3
 8000bb0:	1e13      	subs	r3, r2, #0
 8000bb2:	d000      	beq.n	8000bb6 <HAL_GPIO_Init+0x2ca>
 8000bb4:	e6a2      	b.n	80008fc <HAL_GPIO_Init+0x10>
  } 
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b006      	add	sp, #24
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	48000400 	.word	0x48000400
 8000bcc:	48000800 	.word	0x48000800
 8000bd0:	48000c00 	.word	0x48000c00
 8000bd4:	48001000 	.word	0x48001000
 8000bd8:	40010400 	.word	0x40010400

08000bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	000a      	movs	r2, r1
 8000be6:	1cbb      	adds	r3, r7, #2
 8000be8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	1cba      	adds	r2, r7, #2
 8000bf0:	8812      	ldrh	r2, [r2, #0]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	d004      	beq.n	8000c00 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	e003      	b.n	8000c08 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c00:	230f      	movs	r3, #15
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000c08:	230f      	movs	r3, #15
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	781b      	ldrb	r3, [r3, #0]
  }
 8000c0e:	0018      	movs	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b004      	add	sp, #16
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
 8000c1e:	0008      	movs	r0, r1
 8000c20:	0011      	movs	r1, r2
 8000c22:	1cbb      	adds	r3, r7, #2
 8000c24:	1c02      	adds	r2, r0, #0
 8000c26:	801a      	strh	r2, [r3, #0]
 8000c28:	1c7b      	adds	r3, r7, #1
 8000c2a:	1c0a      	adds	r2, r1, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c2e:	1c7b      	adds	r3, r7, #1
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d004      	beq.n	8000c40 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c36:	1cbb      	adds	r3, r7, #2
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c3e:	e003      	b.n	8000c48 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c40:	1cbb      	adds	r3, r7, #2
 8000c42:	881a      	ldrh	r2, [r3, #0]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c52:	b08b      	sub	sp, #44	; 0x2c
 8000c54:	af06      	add	r7, sp, #24
 8000c56:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e0d4      	b.n	8000e0c <HAL_PCD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a6b      	ldr	r2, [pc, #428]	; (8000e14 <HAL_PCD_Init+0x1c4>)
 8000c66:	5c9b      	ldrb	r3, [r3, r2]
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d108      	bne.n	8000c80 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	238a      	movs	r3, #138	; 0x8a
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	2100      	movs	r1, #0
 8000c76:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f004 f94c 	bl	8004f18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a64      	ldr	r2, [pc, #400]	; (8000e14 <HAL_PCD_Init+0x1c4>)
 8000c84:	2103      	movs	r1, #3
 8000c86:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f001 fe03 	bl	8002898 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c92:	230f      	movs	r3, #15
 8000c94:	18fb      	adds	r3, r7, r3
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e043      	b.n	8000d24 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c9c:	200f      	movs	r0, #15
 8000c9e:	183b      	adds	r3, r7, r0
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	2129      	movs	r1, #41	; 0x29
 8000ca6:	015b      	lsls	r3, r3, #5
 8000ca8:	18d3      	adds	r3, r2, r3
 8000caa:	185b      	adds	r3, r3, r1
 8000cac:	2201      	movs	r2, #1
 8000cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cb0:	183b      	adds	r3, r7, r0
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	2128      	movs	r1, #40	; 0x28
 8000cb8:	015b      	lsls	r3, r3, #5
 8000cba:	18d3      	adds	r3, r2, r3
 8000cbc:	185b      	adds	r3, r3, r1
 8000cbe:	183a      	adds	r2, r7, r0
 8000cc0:	7812      	ldrb	r2, [r2, #0]
 8000cc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cc4:	183b      	adds	r3, r7, r0
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	183a      	adds	r2, r7, r0
 8000cca:	7812      	ldrb	r2, [r2, #0]
 8000ccc:	b291      	uxth	r1, r2
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	015b      	lsls	r3, r3, #5
 8000cd2:	18d3      	adds	r3, r2, r3
 8000cd4:	3336      	adds	r3, #54	; 0x36
 8000cd6:	1c0a      	adds	r2, r1, #0
 8000cd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000cda:	183b      	adds	r3, r7, r0
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	212b      	movs	r1, #43	; 0x2b
 8000ce2:	015b      	lsls	r3, r3, #5
 8000ce4:	18d3      	adds	r3, r2, r3
 8000ce6:	185b      	adds	r3, r3, r1
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cec:	183b      	adds	r3, r7, r0
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	015b      	lsls	r3, r3, #5
 8000cf4:	18d3      	adds	r3, r2, r3
 8000cf6:	3338      	adds	r3, #56	; 0x38
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cfc:	183b      	adds	r3, r7, r0
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	015b      	lsls	r3, r3, #5
 8000d04:	18d3      	adds	r3, r2, r3
 8000d06:	333c      	adds	r3, #60	; 0x3c
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d0c:	183b      	adds	r3, r7, r0
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3202      	adds	r2, #2
 8000d14:	0152      	lsls	r2, r2, #5
 8000d16:	2100      	movs	r1, #0
 8000d18:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d1a:	183b      	adds	r3, r7, r0
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	183b      	adds	r3, r7, r0
 8000d20:	3201      	adds	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	230f      	movs	r3, #15
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d3b4      	bcc.n	8000c9c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d32:	230f      	movs	r3, #15
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e03f      	b.n	8000dbc <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d3c:	200f      	movs	r0, #15
 8000d3e:	183b      	adds	r3, r7, r0
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	232a      	movs	r3, #42	; 0x2a
 8000d46:	33ff      	adds	r3, #255	; 0xff
 8000d48:	0152      	lsls	r2, r2, #5
 8000d4a:	188a      	adds	r2, r1, r2
 8000d4c:	18d3      	adds	r3, r2, r3
 8000d4e:	2200      	movs	r2, #0
 8000d50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d52:	183b      	adds	r3, r7, r0
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	2394      	movs	r3, #148	; 0x94
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	0152      	lsls	r2, r2, #5
 8000d5e:	188a      	adds	r2, r1, r2
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	183a      	adds	r2, r7, r0
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d68:	183b      	adds	r3, r7, r0
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	232c      	movs	r3, #44	; 0x2c
 8000d70:	33ff      	adds	r3, #255	; 0xff
 8000d72:	0152      	lsls	r2, r2, #5
 8000d74:	188a      	adds	r2, r1, r2
 8000d76:	18d3      	adds	r3, r2, r3
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d7c:	183b      	adds	r3, r7, r0
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	239c      	movs	r3, #156	; 0x9c
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	0152      	lsls	r2, r2, #5
 8000d88:	188a      	adds	r2, r1, r2
 8000d8a:	18d3      	adds	r3, r2, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d90:	183b      	adds	r3, r7, r0
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	6879      	ldr	r1, [r7, #4]
 8000d96:	239e      	movs	r3, #158	; 0x9e
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	0152      	lsls	r2, r2, #5
 8000d9c:	188a      	adds	r2, r1, r2
 8000d9e:	18d3      	adds	r3, r2, r3
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000da4:	183b      	adds	r3, r7, r0
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	320a      	adds	r2, #10
 8000dac:	0152      	lsls	r2, r2, #5
 8000dae:	2100      	movs	r1, #0
 8000db0:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000db2:	183b      	adds	r3, r7, r0
 8000db4:	781a      	ldrb	r2, [r3, #0]
 8000db6:	183b      	adds	r3, r7, r0
 8000db8:	3201      	adds	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d3b8      	bcc.n	8000d3c <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6818      	ldr	r0, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	466a      	mov	r2, sp
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	3210      	adds	r2, #16
 8000dd8:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000dda:	c170      	stmia	r1!, {r4, r5, r6}
 8000ddc:	ca30      	ldmia	r2!, {r4, r5}
 8000dde:	c130      	stmia	r1!, {r4, r5}
 8000de0:	6859      	ldr	r1, [r3, #4]
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	f001 fd77 	bl	80028d8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2224      	movs	r2, #36	; 0x24
 8000dee:	2100      	movs	r1, #0
 8000df0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <HAL_PCD_Init+0x1c4>)
 8000df6:	2101      	movs	r1, #1
 8000df8:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d103      	bne.n	8000e0a <HAL_PCD_Init+0x1ba>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f000 ff19 	bl	8001c3c <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b005      	add	sp, #20
 8000e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e14:	00000229 	.word	0x00000229

08000e18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	238a      	movs	r3, #138	; 0x8a
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	5cd3      	ldrb	r3, [r2, r3]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d101      	bne.n	8000e30 <HAL_PCD_Start+0x18>
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	e014      	b.n	8000e5a <HAL_PCD_Start+0x42>
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	238a      	movs	r3, #138	; 0x8a
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	2101      	movs	r1, #1
 8000e38:	54d1      	strb	r1, [r2, r3]
  (void)USB_DevConnect(hpcd->Instance);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f002 fda2 	bl	8003988 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f001 fd0b 	bl	8002864 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	238a      	movs	r3, #138	; 0x8a
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	2100      	movs	r1, #0
 8000e56:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	0018      	movs	r0, r3
 8000e72:	f002 fd9f 	bl	80039b4 <USB_ReadInterrupts>
 8000e76:	0002      	movs	r2, r0
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	021b      	lsls	r3, r3, #8
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d103      	bne.n	8000e8e <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f000 fbbb 	bl	8001604 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	0018      	movs	r0, r3
 8000e94:	f002 fd8e 	bl	80039b4 <USB_ReadInterrupts>
 8000e98:	0002      	movs	r2, r0
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d114      	bne.n	8000ed2 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2244      	movs	r2, #68	; 0x44
 8000eae:	5a9b      	ldrh	r3, [r3, r2]
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	49a8      	ldr	r1, [pc, #672]	; (8001158 <HAL_PCD_IRQHandler+0x2f4>)
 8000eb8:	400a      	ands	r2, r1
 8000eba:	b291      	uxth	r1, r2
 8000ebc:	2244      	movs	r2, #68	; 0x44
 8000ebe:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f004 f8ac 	bl	8005020 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2100      	movs	r1, #0
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f000 f951 	bl	8001174 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f002 fd6c 	bl	80039b4 <USB_ReadInterrupts>
 8000edc:	0002      	movs	r2, r0
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	01db      	lsls	r3, r3, #7
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	01db      	lsls	r3, r3, #7
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d10b      	bne.n	8000f04 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2244      	movs	r2, #68	; 0x44
 8000ef2:	5a9b      	ldrh	r3, [r3, r2]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4998      	ldr	r1, [pc, #608]	; (800115c <HAL_PCD_IRQHandler+0x2f8>)
 8000efc:	400a      	ands	r2, r1
 8000efe:	b291      	uxth	r1, r2
 8000f00:	2244      	movs	r2, #68	; 0x44
 8000f02:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f002 fd53 	bl	80039b4 <USB_ReadInterrupts>
 8000f0e:	0002      	movs	r2, r0
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	019b      	lsls	r3, r3, #6
 8000f14:	401a      	ands	r2, r3
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	019b      	lsls	r3, r3, #6
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	d10b      	bne.n	8000f36 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2244      	movs	r2, #68	; 0x44
 8000f24:	5a9b      	ldrh	r3, [r3, r2]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	498c      	ldr	r1, [pc, #560]	; (8001160 <HAL_PCD_IRQHandler+0x2fc>)
 8000f2e:	400a      	ands	r2, r1
 8000f30:	b291      	uxth	r1, r2
 8000f32:	2244      	movs	r2, #68	; 0x44
 8000f34:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f002 fd3a 	bl	80039b4 <USB_ReadInterrupts>
 8000f40:	0002      	movs	r2, r0
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	015b      	lsls	r3, r3, #5
 8000f46:	401a      	ands	r2, r3
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	015b      	lsls	r3, r3, #5
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d137      	bne.n	8000fc0 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2240      	movs	r2, #64	; 0x40
 8000f56:	5a9b      	ldrh	r3, [r3, r2]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2104      	movs	r1, #4
 8000f60:	438a      	bics	r2, r1
 8000f62:	b291      	uxth	r1, r2
 8000f64:	2240      	movs	r2, #64	; 0x40
 8000f66:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2240      	movs	r2, #64	; 0x40
 8000f6e:	5a9b      	ldrh	r3, [r3, r2]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2108      	movs	r1, #8
 8000f78:	438a      	bics	r2, r1
 8000f7a:	b291      	uxth	r1, r2
 8000f7c:	2240      	movs	r2, #64	; 0x40
 8000f7e:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	2398      	movs	r3, #152	; 0x98
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d109      	bne.n	8000fa0 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	2398      	movs	r3, #152	; 0x98
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	2100      	movs	r1, #0
 8000f94:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2100      	movs	r1, #0
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 fe78 	bl	8001c90 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f004 f87c 	bl	80050a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2244      	movs	r2, #68	; 0x44
 8000fae:	5a9b      	ldrh	r3, [r3, r2]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	496b      	ldr	r1, [pc, #428]	; (8001164 <HAL_PCD_IRQHandler+0x300>)
 8000fb8:	400a      	ands	r2, r1
 8000fba:	b291      	uxth	r1, r2
 8000fbc:	2244      	movs	r2, #68	; 0x44
 8000fbe:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f002 fcf5 	bl	80039b4 <USB_ReadInterrupts>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	011b      	lsls	r3, r3, #4
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d134      	bne.n	8001044 <HAL_PCD_IRQHandler+0x1e0>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2240      	movs	r2, #64	; 0x40
 8000fe0:	5a9b      	ldrh	r3, [r3, r2]
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2108      	movs	r1, #8
 8000fea:	430a      	orrs	r2, r1
 8000fec:	b291      	uxth	r1, r2
 8000fee:	2240      	movs	r2, #64	; 0x40
 8000ff0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2244      	movs	r2, #68	; 0x44
 8000ff8:	5a9b      	ldrh	r3, [r3, r2]
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4959      	ldr	r1, [pc, #356]	; (8001168 <HAL_PCD_IRQHandler+0x304>)
 8001002:	400a      	ands	r2, r1
 8001004:	b291      	uxth	r1, r2
 8001006:	2244      	movs	r2, #68	; 0x44
 8001008:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2240      	movs	r2, #64	; 0x40
 8001010:	5a9b      	ldrh	r3, [r3, r2]
 8001012:	b29a      	uxth	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2104      	movs	r1, #4
 800101a:	430a      	orrs	r2, r1
 800101c:	b291      	uxth	r1, r2
 800101e:	2240      	movs	r2, #64	; 0x40
 8001020:	5299      	strh	r1, [r3, r2]

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	0018      	movs	r0, r3
 8001028:	f002 fcc4 	bl	80039b4 <USB_ReadInterrupts>
 800102c:	0002      	movs	r2, r0
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	015b      	lsls	r3, r3, #5
 8001032:	401a      	ands	r2, r3
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	015b      	lsls	r3, r3, #5
 8001038:	429a      	cmp	r2, r3
 800103a:	d003      	beq.n	8001044 <HAL_PCD_IRQHandler+0x1e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	0018      	movs	r0, r3
 8001040:	f004 f812 	bl	8005068 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	0018      	movs	r0, r3
 800104a:	f002 fcb3 	bl	80039b4 <USB_ReadInterrupts>
 800104e:	0002      	movs	r2, r0
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	4013      	ands	r3, r2
 8001054:	2b80      	cmp	r3, #128	; 0x80
 8001056:	d145      	bne.n	80010e4 <HAL_PCD_IRQHandler+0x280>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2244      	movs	r2, #68	; 0x44
 800105e:	5a9b      	ldrh	r3, [r3, r2]
 8001060:	b29a      	uxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2180      	movs	r1, #128	; 0x80
 8001068:	438a      	bics	r2, r1
 800106a:	b291      	uxth	r1, r2
 800106c:	2244      	movs	r2, #68	; 0x44
 800106e:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	2398      	movs	r3, #152	; 0x98
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	5cd3      	ldrb	r3, [r2, r3]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d12f      	bne.n	80010dc <HAL_PCD_IRQHandler+0x278>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2240      	movs	r2, #64	; 0x40
 8001082:	5a9b      	ldrh	r3, [r3, r2]
 8001084:	b29a      	uxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2104      	movs	r1, #4
 800108c:	430a      	orrs	r2, r1
 800108e:	b291      	uxth	r1, r2
 8001090:	2240      	movs	r2, #64	; 0x40
 8001092:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2240      	movs	r2, #64	; 0x40
 800109a:	5a9b      	ldrh	r3, [r3, r2]
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2108      	movs	r1, #8
 80010a4:	430a      	orrs	r2, r1
 80010a6:	b291      	uxth	r1, r2
 80010a8:	2240      	movs	r2, #64	; 0x40
 80010aa:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	2398      	movs	r3, #152	; 0x98
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	2101      	movs	r1, #1
 80010b4:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2254      	movs	r2, #84	; 0x54
 80010bc:	5a9b      	ldrh	r3, [r3, r2]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	223c      	movs	r2, #60	; 0x3c
 80010c4:	4013      	ands	r3, r2
 80010c6:	0019      	movs	r1, r3
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	2399      	movs	r3, #153	; 0x99
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2101      	movs	r1, #1
 80010d4:	0018      	movs	r0, r3
 80010d6:	f000 fddb 	bl	8001c90 <HAL_PCDEx_LPM_Callback>
 80010da:	e003      	b.n	80010e4 <HAL_PCD_IRQHandler+0x280>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	0018      	movs	r0, r3
 80010e0:	f003 ffc2 	bl	8005068 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	0018      	movs	r0, r3
 80010ea:	f002 fc63 	bl	80039b4 <USB_ReadInterrupts>
 80010ee:	0002      	movs	r2, r0
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	401a      	ands	r2, r3
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d10f      	bne.n	800111e <HAL_PCD_IRQHandler+0x2ba>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2244      	movs	r2, #68	; 0x44
 8001104:	5a9b      	ldrh	r3, [r3, r2]
 8001106:	b29a      	uxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4917      	ldr	r1, [pc, #92]	; (800116c <HAL_PCD_IRQHandler+0x308>)
 800110e:	400a      	ands	r2, r1
 8001110:	b291      	uxth	r1, r2
 8001112:	2244      	movs	r2, #68	; 0x44
 8001114:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	0018      	movs	r0, r3
 800111a:	f003 ff72 	bl	8005002 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fc46 	bl	80039b4 <USB_ReadInterrupts>
 8001128:	0002      	movs	r2, r0
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	401a      	ands	r2, r3
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	429a      	cmp	r2, r3
 8001136:	d10b      	bne.n	8001150 <HAL_PCD_IRQHandler+0x2ec>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2244      	movs	r2, #68	; 0x44
 800113e:	5a9b      	ldrh	r3, [r3, r2]
 8001140:	b29a      	uxth	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	490a      	ldr	r1, [pc, #40]	; (8001170 <HAL_PCD_IRQHandler+0x30c>)
 8001148:	400a      	ands	r2, r1
 800114a:	b291      	uxth	r1, r2
 800114c:	2244      	movs	r2, #68	; 0x44
 800114e:	5299      	strh	r1, [r3, r2]
  }
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b002      	add	sp, #8
 8001156:	bd80      	pop	{r7, pc}
 8001158:	fffffbff 	.word	0xfffffbff
 800115c:	ffffbfff 	.word	0xffffbfff
 8001160:	ffffdfff 	.word	0xffffdfff
 8001164:	ffffefff 	.word	0xffffefff
 8001168:	fffff7ff 	.word	0xfffff7ff
 800116c:	fffffdff 	.word	0xfffffdff
 8001170:	fffffeff 	.word	0xfffffeff

08001174 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	000a      	movs	r2, r1
 800117e:	1cfb      	adds	r3, r7, #3
 8001180:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	238a      	movs	r3, #138	; 0x8a
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	5cd3      	ldrb	r3, [r2, r3]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d101      	bne.n	8001192 <HAL_PCD_SetAddress+0x1e>
 800118e:	2302      	movs	r3, #2
 8001190:	e017      	b.n	80011c2 <HAL_PCD_SetAddress+0x4e>
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	238a      	movs	r3, #138	; 0x8a
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	2101      	movs	r1, #1
 800119a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	1cfa      	adds	r2, r7, #3
 80011a0:	2124      	movs	r1, #36	; 0x24
 80011a2:	7812      	ldrb	r2, [r2, #0]
 80011a4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	1cfb      	adds	r3, r7, #3
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	0019      	movs	r1, r3
 80011b0:	0010      	movs	r0, r2
 80011b2:	f002 fbd5 	bl	8003960 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	238a      	movs	r3, #138	; 0x8a
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	2100      	movs	r1, #0
 80011be:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b085      	sub	sp, #20
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	000c      	movs	r4, r1
 80011d4:	0010      	movs	r0, r2
 80011d6:	0019      	movs	r1, r3
 80011d8:	1cfb      	adds	r3, r7, #3
 80011da:	1c22      	adds	r2, r4, #0
 80011dc:	701a      	strb	r2, [r3, #0]
 80011de:	003b      	movs	r3, r7
 80011e0:	1c02      	adds	r2, r0, #0
 80011e2:	801a      	strh	r2, [r3, #0]
 80011e4:	1cbb      	adds	r3, r7, #2
 80011e6:	1c0a      	adds	r2, r1, #0
 80011e8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80011ea:	230b      	movs	r3, #11
 80011ec:	18fb      	adds	r3, r7, r3
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011f2:	1cfb      	adds	r3, r7, #3
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b25b      	sxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da0c      	bge.n	8001216 <HAL_PCD_EP_Open+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011fc:	1cfb      	adds	r3, r7, #3
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2207      	movs	r2, #7
 8001202:	4013      	ands	r3, r2
 8001204:	015b      	lsls	r3, r3, #5
 8001206:	3328      	adds	r3, #40	; 0x28
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2201      	movs	r2, #1
 8001212:	705a      	strb	r2, [r3, #1]
 8001214:	e00c      	b.n	8001230 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001216:	1cfb      	adds	r3, r7, #3
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2207      	movs	r2, #7
 800121c:	4013      	ands	r3, r2
 800121e:	015b      	lsls	r3, r3, #5
 8001220:	3329      	adds	r3, #41	; 0x29
 8001222:	33ff      	adds	r3, #255	; 0xff
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	18d3      	adds	r3, r2, r3
 8001228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2200      	movs	r2, #0
 800122e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001230:	1cfb      	adds	r3, r7, #3
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2207      	movs	r2, #7
 8001236:	4013      	ands	r3, r2
 8001238:	b2da      	uxtb	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800123e:	003b      	movs	r3, r7
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1cba      	adds	r2, r7, #2
 800124a:	7812      	ldrb	r2, [r2, #0]
 800124c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <HAL_PCD_EP_Open+0x96>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b29a      	uxth	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001260:	1cbb      	adds	r3, r7, #2
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d102      	bne.n	800126e <HAL_PCD_EP_Open+0xa4>
  {
    ep->data_pid_start = 0U;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	238a      	movs	r3, #138	; 0x8a
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d101      	bne.n	800127e <HAL_PCD_EP_Open+0xb4>
 800127a:	2302      	movs	r3, #2
 800127c:	e013      	b.n	80012a6 <HAL_PCD_EP_Open+0xdc>
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	238a      	movs	r3, #138	; 0x8a
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	2101      	movs	r1, #1
 8001286:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	0011      	movs	r1, r2
 8001290:	0018      	movs	r0, r3
 8001292:	f001 fb51 	bl	8002938 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	238a      	movs	r3, #138	; 0x8a
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	2100      	movs	r1, #0
 800129e:	54d1      	strb	r1, [r2, r3]

  return ret;
 80012a0:	230b      	movs	r3, #11
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	781b      	ldrb	r3, [r3, #0]
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b005      	add	sp, #20
 80012ac:	bd90      	pop	{r4, r7, pc}

080012ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b084      	sub	sp, #16
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
 80012b6:	000a      	movs	r2, r1
 80012b8:	1cfb      	adds	r3, r7, #3
 80012ba:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012bc:	1cfb      	adds	r3, r7, #3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da0c      	bge.n	80012e0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012c6:	1cfb      	adds	r3, r7, #3
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2207      	movs	r2, #7
 80012cc:	4013      	ands	r3, r2
 80012ce:	015b      	lsls	r3, r3, #5
 80012d0:	3328      	adds	r3, #40	; 0x28
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	18d3      	adds	r3, r2, r3
 80012d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	2201      	movs	r2, #1
 80012dc:	705a      	strb	r2, [r3, #1]
 80012de:	e00c      	b.n	80012fa <HAL_PCD_EP_Close+0x4c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012e0:	1cfb      	adds	r3, r7, #3
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2207      	movs	r2, #7
 80012e6:	4013      	ands	r3, r2
 80012e8:	015b      	lsls	r3, r3, #5
 80012ea:	3329      	adds	r3, #41	; 0x29
 80012ec:	33ff      	adds	r3, #255	; 0xff
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	18d3      	adds	r3, r2, r3
 80012f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80012fa:	1cfb      	adds	r3, r7, #3
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2207      	movs	r2, #7
 8001300:	4013      	ands	r3, r2
 8001302:	b2da      	uxtb	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	238a      	movs	r3, #138	; 0x8a
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d101      	bne.n	8001318 <HAL_PCD_EP_Close+0x6a>
 8001314:	2302      	movs	r3, #2
 8001316:	e011      	b.n	800133c <HAL_PCD_EP_Close+0x8e>
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	238a      	movs	r3, #138	; 0x8a
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	2101      	movs	r1, #1
 8001320:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	0011      	movs	r1, r2
 800132a:	0018      	movs	r0, r3
 800132c:	f001 fdfc 	bl	8002f28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	238a      	movs	r3, #138	; 0x8a
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	2100      	movs	r1, #0
 8001338:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
}
 800133c:	0018      	movs	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	b004      	add	sp, #16
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	200b      	movs	r0, #11
 8001352:	183b      	adds	r3, r7, r0
 8001354:	1c0a      	adds	r2, r1, #0
 8001356:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001358:	0001      	movs	r1, r0
 800135a:	187b      	adds	r3, r7, r1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2207      	movs	r2, #7
 8001360:	4013      	ands	r3, r2
 8001362:	015b      	lsls	r3, r3, #5
 8001364:	3329      	adds	r3, #41	; 0x29
 8001366:	33ff      	adds	r3, #255	; 0xff
 8001368:	68fa      	ldr	r2, [r7, #12]
 800136a:	18d3      	adds	r3, r2, r3
 800136c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	2200      	movs	r2, #0
 8001384:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2207      	movs	r2, #7
 800138c:	4013      	ands	r3, r2
 800138e:	b2da      	uxtb	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001394:	187b      	adds	r3, r7, r1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2207      	movs	r2, #7
 800139a:	4013      	ands	r3, r2
 800139c:	d107      	bne.n	80013ae <HAL_PCD_EP_Receive+0x6a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	0011      	movs	r1, r2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f001 ff34 	bl	8003214 <USB_EPStartXfer>
 80013ac:	e006      	b.n	80013bc <HAL_PCD_EP_Receive+0x78>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	0011      	movs	r1, r2
 80013b6:	0018      	movs	r0, r3
 80013b8:	f001 ff2c 	bl	8003214 <USB_EPStartXfer>
  }

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	0018      	movs	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b006      	add	sp, #24
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	000a      	movs	r2, r1
 80013d0:	1cfb      	adds	r3, r7, #3
 80013d2:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80013d4:	1cfb      	adds	r3, r7, #3
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2207      	movs	r2, #7
 80013da:	4013      	ands	r3, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	330a      	adds	r3, #10
 80013e0:	015b      	lsls	r3, r3, #5
 80013e2:	18d3      	adds	r3, r2, r3
 80013e4:	3304      	adds	r3, #4
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b002      	add	sp, #8
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	607a      	str	r2, [r7, #4]
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	200b      	movs	r0, #11
 80013fe:	183b      	adds	r3, r7, r0
 8001400:	1c0a      	adds	r2, r1, #0
 8001402:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001404:	0001      	movs	r1, r0
 8001406:	187b      	adds	r3, r7, r1
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2207      	movs	r2, #7
 800140c:	4013      	ands	r3, r2
 800140e:	015b      	lsls	r3, r3, #5
 8001410:	3328      	adds	r3, #40	; 0x28
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	18d3      	adds	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2201      	movs	r2, #1
 800142e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2207      	movs	r2, #7
 8001436:	4013      	ands	r3, r2
 8001438:	b2da      	uxtb	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800143e:	187b      	adds	r3, r7, r1
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2207      	movs	r2, #7
 8001444:	4013      	ands	r3, r2
 8001446:	d107      	bne.n	8001458 <HAL_PCD_EP_Transmit+0x68>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	0011      	movs	r1, r2
 8001450:	0018      	movs	r0, r3
 8001452:	f001 fedf 	bl	8003214 <USB_EPStartXfer>
 8001456:	e006      	b.n	8001466 <HAL_PCD_EP_Transmit+0x76>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	0011      	movs	r1, r2
 8001460:	0018      	movs	r0, r3
 8001462:	f001 fed7 	bl	8003214 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b006      	add	sp, #24
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	000a      	movs	r2, r1
 800147a:	1cfb      	adds	r3, r7, #3
 800147c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800147e:	1cfb      	adds	r3, r7, #3
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2207      	movs	r2, #7
 8001484:	401a      	ands	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d901      	bls.n	8001492 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e050      	b.n	8001534 <HAL_PCD_EP_SetStall+0xc4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001492:	1cfb      	adds	r3, r7, #3
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	b25b      	sxtb	r3, r3
 8001498:	2b00      	cmp	r3, #0
 800149a:	da0c      	bge.n	80014b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800149c:	1cfb      	adds	r3, r7, #3
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2207      	movs	r2, #7
 80014a2:	4013      	ands	r3, r2
 80014a4:	015b      	lsls	r3, r3, #5
 80014a6:	3328      	adds	r3, #40	; 0x28
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	18d3      	adds	r3, r2, r3
 80014ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2201      	movs	r2, #1
 80014b2:	705a      	strb	r2, [r3, #1]
 80014b4:	e00a      	b.n	80014cc <HAL_PCD_EP_SetStall+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80014b6:	1cfb      	adds	r3, r7, #3
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	015b      	lsls	r3, r3, #5
 80014bc:	3329      	adds	r3, #41	; 0x29
 80014be:	33ff      	adds	r3, #255	; 0xff
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	18d3      	adds	r3, r2, r3
 80014c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2201      	movs	r2, #1
 80014d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d2:	1cfb      	adds	r3, r7, #3
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2207      	movs	r2, #7
 80014d8:	4013      	ands	r3, r2
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	238a      	movs	r3, #138	; 0x8a
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	5cd3      	ldrb	r3, [r2, r3]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_PCD_EP_SetStall+0x80>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e021      	b.n	8001534 <HAL_PCD_EP_SetStall+0xc4>
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	238a      	movs	r3, #138	; 0x8a
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	2101      	movs	r1, #1
 80014f8:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f002 f958 	bl	80037b8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001508:	1cfb      	adds	r3, r7, #3
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2207      	movs	r2, #7
 800150e:	4013      	ands	r3, r2
 8001510:	d10a      	bne.n	8001528 <HAL_PCD_EP_SetStall+0xb8>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	218c      	movs	r1, #140	; 0x8c
 800151a:	0089      	lsls	r1, r1, #2
 800151c:	468c      	mov	ip, r1
 800151e:	4463      	add	r3, ip
 8001520:	0019      	movs	r1, r3
 8001522:	0010      	movs	r0, r2
 8001524:	f002 fa54 	bl	80039d0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	238a      	movs	r3, #138	; 0x8a
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	2100      	movs	r1, #0
 8001530:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	0018      	movs	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	b004      	add	sp, #16
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	000a      	movs	r2, r1
 8001546:	1cfb      	adds	r3, r7, #3
 8001548:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800154a:	1cfb      	adds	r3, r7, #3
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	220f      	movs	r2, #15
 8001550:	401a      	ands	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	429a      	cmp	r2, r3
 8001558:	d901      	bls.n	800155e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e042      	b.n	80015e4 <HAL_PCD_EP_ClrStall+0xa8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800155e:	1cfb      	adds	r3, r7, #3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b25b      	sxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	da0c      	bge.n	8001582 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001568:	1cfb      	adds	r3, r7, #3
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2207      	movs	r2, #7
 800156e:	4013      	ands	r3, r2
 8001570:	015b      	lsls	r3, r3, #5
 8001572:	3328      	adds	r3, #40	; 0x28
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	18d3      	adds	r3, r2, r3
 8001578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	705a      	strb	r2, [r3, #1]
 8001580:	e00c      	b.n	800159c <HAL_PCD_EP_ClrStall+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001582:	1cfb      	adds	r3, r7, #3
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2207      	movs	r2, #7
 8001588:	4013      	ands	r3, r2
 800158a:	015b      	lsls	r3, r3, #5
 800158c:	3329      	adds	r3, #41	; 0x29
 800158e:	33ff      	adds	r3, #255	; 0xff
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	18d3      	adds	r3, r2, r3
 8001594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015a2:	1cfb      	adds	r3, r7, #3
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2207      	movs	r2, #7
 80015a8:	4013      	ands	r3, r2
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	238a      	movs	r3, #138	; 0x8a
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_PCD_EP_ClrStall+0x84>
 80015bc:	2302      	movs	r3, #2
 80015be:	e011      	b.n	80015e4 <HAL_PCD_EP_ClrStall+0xa8>
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	238a      	movs	r3, #138	; 0x8a
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	2101      	movs	r1, #1
 80015c8:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	0011      	movs	r1, r2
 80015d2:	0018      	movs	r0, r3
 80015d4:	f002 f932 	bl	800383c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	238a      	movs	r3, #138	; 0x8a
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	2100      	movs	r1, #0
 80015e0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b004      	add	sp, #16
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	000a      	movs	r2, r1
 80015f6:	1cfb      	adds	r3, r7, #3
 80015f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hpcd);
  UNUSED(ep_addr);

  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b002      	add	sp, #8
 8001602:	bd80      	pop	{r7, pc}

08001604 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800160c:	e2b3      	b.n	8001b76 <PCD_EP_ISR_Handler+0x572>
  {
    wIstr = hpcd->Instance->ISTR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	2016      	movs	r0, #22
 8001614:	183b      	adds	r3, r7, r0
 8001616:	2144      	movs	r1, #68	; 0x44
 8001618:	5a52      	ldrh	r2, [r2, r1]
 800161a:	801a      	strh	r2, [r3, #0]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800161c:	183b      	adds	r3, r7, r0
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	2015      	movs	r0, #21
 8001624:	183b      	adds	r3, r7, r0
 8001626:	210f      	movs	r1, #15
 8001628:	400a      	ands	r2, r1
 800162a:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800162c:	183b      	adds	r3, r7, r0
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d000      	beq.n	8001636 <PCD_EP_ISR_Handler+0x32>
 8001634:	e141      	b.n	80018ba <PCD_EP_ISR_Handler+0x2b6>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001636:	2316      	movs	r3, #22
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	2210      	movs	r2, #16
 800163e:	4013      	ands	r3, r2
 8001640:	d14e      	bne.n	80016e0 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4aca      	ldr	r2, [pc, #808]	; (8001974 <PCD_EP_ISR_Handler+0x370>)
 800164c:	4013      	ands	r3, r2
 800164e:	b29c      	uxth	r4, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4ac8      	ldr	r2, [pc, #800]	; (8001978 <PCD_EP_ISR_Handler+0x374>)
 8001656:	4322      	orrs	r2, r4
 8001658:	b292      	uxth	r2, r2
 800165a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3328      	adds	r3, #40	; 0x28
 8001660:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2250      	movs	r2, #80	; 0x50
 8001668:	5a9b      	ldrh	r3, [r3, r2]
 800166a:	b29b      	uxth	r3, r3
 800166c:	001a      	movs	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	18d2      	adds	r2, r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	18d3      	adds	r3, r2, r3
 800167c:	4abf      	ldr	r2, [pc, #764]	; (800197c <PCD_EP_ISR_Handler+0x378>)
 800167e:	4694      	mov	ip, r2
 8001680:	4463      	add	r3, ip
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	059b      	lsls	r3, r3, #22
 8001686:	0d9a      	lsrs	r2, r3, #22
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	695a      	ldr	r2, [r3, #20]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	18d2      	adds	r2, r2, r3
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2100      	movs	r1, #0
 800169e:	0018      	movs	r0, r3
 80016a0:	f003 fc94 	bl	8004fcc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2224      	movs	r2, #36	; 0x24
 80016a8:	5c9b      	ldrb	r3, [r3, r2]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d100      	bne.n	80016b2 <PCD_EP_ISR_Handler+0xae>
 80016b0:	e261      	b.n	8001b76 <PCD_EP_ISR_Handler+0x572>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d000      	beq.n	80016bc <PCD_EP_ISR_Handler+0xb8>
 80016ba:	e25c      	b.n	8001b76 <PCD_EP_ISR_Handler+0x572>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2224      	movs	r2, #36	; 0x24
 80016c0:	5c9b      	ldrb	r3, [r3, r2]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2280      	movs	r2, #128	; 0x80
 80016c6:	4252      	negs	r2, r2
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	b291      	uxth	r1, r2
 80016d2:	224c      	movs	r2, #76	; 0x4c
 80016d4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2224      	movs	r2, #36	; 0x24
 80016da:	2100      	movs	r1, #0
 80016dc:	5499      	strb	r1, [r3, r2]
 80016de:	e24a      	b.n	8001b76 <PCD_EP_ISR_Handler+0x572>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3329      	adds	r3, #41	; 0x29
 80016e4:	33ff      	adds	r3, #255	; 0xff
 80016e6:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2112      	movs	r1, #18
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	8812      	ldrh	r2, [r2, #0]
 80016f2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	881a      	ldrh	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	4013      	ands	r3, r2
 80016fe:	d033      	beq.n	8001768 <PCD_EP_ISR_Handler+0x164>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2250      	movs	r2, #80	; 0x50
 8001706:	5a9b      	ldrh	r3, [r3, r2]
 8001708:	b29b      	uxth	r3, r3
 800170a:	001a      	movs	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	18d2      	adds	r2, r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	18d3      	adds	r3, r2, r3
 800171a:	4a99      	ldr	r2, [pc, #612]	; (8001980 <PCD_EP_ISR_Handler+0x37c>)
 800171c:	4694      	mov	ip, r2
 800171e:	4463      	add	r3, ip
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	059b      	lsls	r3, r3, #22
 8001724:	0d9a      	lsrs	r2, r3, #22
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	228c      	movs	r2, #140	; 0x8c
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	1899      	adds	r1, r3, r2
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800173e:	b29b      	uxth	r3, r3
 8001740:	f002 f993 	bl	8003a6a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	4a8d      	ldr	r2, [pc, #564]	; (8001984 <PCD_EP_ISR_Handler+0x380>)
 800174e:	4013      	ands	r3, r2
 8001750:	b29c      	uxth	r4, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2280      	movs	r2, #128	; 0x80
 8001758:	4322      	orrs	r2, r4
 800175a:	b292      	uxth	r2, r2
 800175c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f003 fc01 	bl	8004f68 <HAL_PCD_SetupStageCallback>
 8001766:	e206      	b.n	8001b76 <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001768:	2312      	movs	r3, #18
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	2200      	movs	r2, #0
 800176e:	5e9b      	ldrsh	r3, [r3, r2]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db00      	blt.n	8001776 <PCD_EP_ISR_Handler+0x172>
 8001774:	e1ff      	b.n	8001b76 <PCD_EP_ISR_Handler+0x572>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	881b      	ldrh	r3, [r3, #0]
 800177c:	b29b      	uxth	r3, r3
 800177e:	4a81      	ldr	r2, [pc, #516]	; (8001984 <PCD_EP_ISR_Handler+0x380>)
 8001780:	4013      	ands	r3, r2
 8001782:	b29c      	uxth	r4, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2280      	movs	r2, #128	; 0x80
 800178a:	4322      	orrs	r2, r4
 800178c:	b292      	uxth	r2, r2
 800178e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2250      	movs	r2, #80	; 0x50
 8001796:	5a9b      	ldrh	r3, [r3, r2]
 8001798:	b29b      	uxth	r3, r3
 800179a:	001a      	movs	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	18d2      	adds	r2, r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	18d3      	adds	r3, r2, r3
 80017aa:	4a75      	ldr	r2, [pc, #468]	; (8001980 <PCD_EP_ISR_Handler+0x37c>)
 80017ac:	4694      	mov	ip, r2
 80017ae:	4463      	add	r3, ip
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	059b      	lsls	r3, r3, #22
 80017b4:	0d9a      	lsrs	r2, r3, #22
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d01a      	beq.n	80017f8 <PCD_EP_ISR_Handler+0x1f4>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d016      	beq.n	80017f8 <PCD_EP_ISR_Handler+0x1f4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6818      	ldr	r0, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6959      	ldr	r1, [r3, #20]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f002 f945 	bl	8003a6a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	695a      	ldr	r2, [r3, #20]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	18d2      	adds	r2, r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2100      	movs	r1, #0
 80017f2:	0018      	movs	r0, r3
 80017f4:	f003 fbcd 	bl	8004f92 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	001c      	movs	r4, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2250      	movs	r2, #80	; 0x50
 8001804:	5a9b      	ldrh	r3, [r3, r2]
 8001806:	b29b      	uxth	r3, r3
 8001808:	18e4      	adds	r4, r4, r3
 800180a:	4b5d      	ldr	r3, [pc, #372]	; (8001980 <PCD_EP_ISR_Handler+0x37c>)
 800180c:	18e3      	adds	r3, r4, r3
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10e      	bne.n	8001836 <PCD_EP_ISR_Handler+0x232>
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	4a5a      	ldr	r2, [pc, #360]	; (8001988 <PCD_EP_ISR_Handler+0x384>)
 800181e:	4013      	ands	r3, r2
 8001820:	b29a      	uxth	r2, r3
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	801a      	strh	r2, [r3, #0]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	4a53      	ldr	r2, [pc, #332]	; (8001978 <PCD_EP_ISR_Handler+0x374>)
 800182c:	4313      	orrs	r3, r2
 800182e:	b29a      	uxth	r2, r3
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	801a      	strh	r2, [r3, #0]
 8001834:	e02b      	b.n	800188e <PCD_EP_ISR_Handler+0x28a>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b3e      	cmp	r3, #62	; 0x3e
 800183c:	d812      	bhi.n	8001864 <PCD_EP_ISR_Handler+0x260>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	085b      	lsrs	r3, r3, #1
 8001844:	61bb      	str	r3, [r7, #24]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2201      	movs	r2, #1
 800184c:	4013      	ands	r3, r2
 800184e:	d002      	beq.n	8001856 <PCD_EP_ISR_Handler+0x252>
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	3301      	adds	r3, #1
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	b29b      	uxth	r3, r3
 800185a:	029b      	lsls	r3, r3, #10
 800185c:	b29a      	uxth	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	801a      	strh	r2, [r3, #0]
 8001862:	e014      	b.n	800188e <PCD_EP_ISR_Handler+0x28a>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	095b      	lsrs	r3, r3, #5
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	221f      	movs	r2, #31
 8001872:	4013      	ands	r3, r2
 8001874:	d102      	bne.n	800187c <PCD_EP_ISR_Handler+0x278>
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	3b01      	subs	r3, #1
 800187a:	61bb      	str	r3, [r7, #24]
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	b29b      	uxth	r3, r3
 8001880:	029b      	lsls	r3, r3, #10
 8001882:	b29b      	uxth	r3, r3
 8001884:	4a3c      	ldr	r2, [pc, #240]	; (8001978 <PCD_EP_ISR_Handler+0x374>)
 8001886:	4313      	orrs	r3, r2
 8001888:	b29a      	uxth	r2, r3
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4a3d      	ldr	r2, [pc, #244]	; (800198c <PCD_EP_ISR_Handler+0x388>)
 8001898:	4013      	ands	r3, r2
 800189a:	b29c      	uxth	r4, r3
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	015b      	lsls	r3, r3, #5
 80018a0:	4063      	eors	r3, r4
 80018a2:	b29c      	uxth	r4, r3
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	019b      	lsls	r3, r3, #6
 80018a8:	4063      	eors	r3, r4
 80018aa:	b29c      	uxth	r4, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a37      	ldr	r2, [pc, #220]	; (8001990 <PCD_EP_ISR_Handler+0x38c>)
 80018b2:	4322      	orrs	r2, r4
 80018b4:	b292      	uxth	r2, r2
 80018b6:	801a      	strh	r2, [r3, #0]
 80018b8:	e15d      	b.n	8001b76 <PCD_EP_ISR_Handler+0x572>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	001a      	movs	r2, r3
 80018c0:	2315      	movs	r3, #21
 80018c2:	18fb      	adds	r3, r7, r3
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	18d2      	adds	r2, r2, r3
 80018ca:	2112      	movs	r1, #18
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	8812      	ldrh	r2, [r2, #0]
 80018d0:	801a      	strh	r2, [r3, #0]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	2200      	movs	r2, #0
 80018d6:	5e9b      	ldrsh	r3, [r3, r2]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	db00      	blt.n	80018de <PCD_EP_ISR_Handler+0x2da>
 80018dc:	e0f5      	b.n	8001aca <PCD_EP_ISR_Handler+0x4c6>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	001a      	movs	r2, r3
 80018e4:	2115      	movs	r1, #21
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	18d3      	adds	r3, r2, r3
 80018ee:	881b      	ldrh	r3, [r3, #0]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	4a24      	ldr	r2, [pc, #144]	; (8001984 <PCD_EP_ISR_Handler+0x380>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	b29c      	uxth	r4, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	001a      	movs	r2, r3
 80018fe:	187b      	adds	r3, r7, r1
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	18d3      	adds	r3, r2, r3
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	4322      	orrs	r2, r4
 800190a:	b292      	uxth	r2, r2
 800190c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800190e:	187b      	adds	r3, r7, r1
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	015b      	lsls	r3, r3, #5
 8001914:	3329      	adds	r3, #41	; 0x29
 8001916:	33ff      	adds	r3, #255	; 0xff
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	18d3      	adds	r3, r2, r3
 800191c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	7b1b      	ldrb	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d136      	bne.n	8001994 <PCD_EP_ISR_Handler+0x390>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2250      	movs	r2, #80	; 0x50
 800192c:	5a9b      	ldrh	r3, [r3, r2]
 800192e:	b29b      	uxth	r3, r3
 8001930:	001a      	movs	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	18d2      	adds	r2, r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	18d3      	adds	r3, r2, r3
 8001940:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <PCD_EP_ISR_Handler+0x37c>)
 8001942:	4694      	mov	ip, r2
 8001944:	4463      	add	r3, ip
 8001946:	881a      	ldrh	r2, [r3, #0]
 8001948:	211e      	movs	r1, #30
 800194a:	187b      	adds	r3, r7, r1
 800194c:	0592      	lsls	r2, r2, #22
 800194e:	0d92      	lsrs	r2, r2, #22
 8001950:	801a      	strh	r2, [r3, #0]
          if (count != 0U)
 8001952:	187b      	adds	r3, r7, r1
 8001954:	881b      	ldrh	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d100      	bne.n	800195c <PCD_EP_ISR_Handler+0x358>
 800195a:	e08b      	b.n	8001a74 <PCD_EP_ISR_Handler+0x470>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6959      	ldr	r1, [r3, #20]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	88da      	ldrh	r2, [r3, #6]
 8001968:	231e      	movs	r3, #30
 800196a:	18fb      	adds	r3, r7, r3
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	f002 f87c 	bl	8003a6a <USB_ReadPMA>
 8001972:	e07f      	b.n	8001a74 <PCD_EP_ISR_Handler+0x470>
 8001974:	ffff8f0f 	.word	0xffff8f0f
 8001978:	ffff8000 	.word	0xffff8000
 800197c:	00000402 	.word	0x00000402
 8001980:	00000406 	.word	0x00000406
 8001984:	00000f8f 	.word	0x00000f8f
 8001988:	ffff83ff 	.word	0xffff83ff
 800198c:	ffffbf8f 	.word	0xffffbf8f
 8001990:	ffff8080 	.word	0xffff8080
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	001a      	movs	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	18d3      	adds	r3, r2, r3
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	001a      	movs	r2, r3
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	01db      	lsls	r3, r3, #7
 80019ac:	4013      	ands	r3, r2
 80019ae:	d025      	beq.n	80019fc <PCD_EP_ISR_Handler+0x3f8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2250      	movs	r2, #80	; 0x50
 80019b6:	5a9b      	ldrh	r3, [r3, r2]
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	001a      	movs	r2, r3
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	18d2      	adds	r2, r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	18d3      	adds	r3, r2, r3
 80019ca:	4a72      	ldr	r2, [pc, #456]	; (8001b94 <PCD_EP_ISR_Handler+0x590>)
 80019cc:	4694      	mov	ip, r2
 80019ce:	4463      	add	r3, ip
 80019d0:	881a      	ldrh	r2, [r3, #0]
 80019d2:	211e      	movs	r1, #30
 80019d4:	187b      	adds	r3, r7, r1
 80019d6:	0592      	lsls	r2, r2, #22
 80019d8:	0d92      	lsrs	r2, r2, #22
 80019da:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 80019dc:	187b      	adds	r3, r7, r1
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d030      	beq.n	8001a46 <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6959      	ldr	r1, [r3, #20]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	891a      	ldrh	r2, [r3, #8]
 80019f0:	231e      	movs	r3, #30
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	f002 f838 	bl	8003a6a <USB_ReadPMA>
 80019fa:	e024      	b.n	8001a46 <PCD_EP_ISR_Handler+0x442>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2250      	movs	r2, #80	; 0x50
 8001a02:	5a9b      	ldrh	r3, [r3, r2]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	001a      	movs	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	18d2      	adds	r2, r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	18d3      	adds	r3, r2, r3
 8001a16:	4a60      	ldr	r2, [pc, #384]	; (8001b98 <PCD_EP_ISR_Handler+0x594>)
 8001a18:	4694      	mov	ip, r2
 8001a1a:	4463      	add	r3, ip
 8001a1c:	881a      	ldrh	r2, [r3, #0]
 8001a1e:	211e      	movs	r1, #30
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	0592      	lsls	r2, r2, #22
 8001a24:	0d92      	lsrs	r2, r2, #22
 8001a26:	801a      	strh	r2, [r3, #0]
            if (count != 0U)
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00a      	beq.n	8001a46 <PCD_EP_ISR_Handler+0x442>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6818      	ldr	r0, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6959      	ldr	r1, [r3, #20]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	895a      	ldrh	r2, [r3, #10]
 8001a3c:	231e      	movs	r3, #30
 8001a3e:	18fb      	adds	r3, r7, r3
 8001a40:	881b      	ldrh	r3, [r3, #0]
 8001a42:	f002 f812 	bl	8003a6a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	18d3      	adds	r3, r2, r3
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	4a50      	ldr	r2, [pc, #320]	; (8001b9c <PCD_EP_ISR_Handler+0x598>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	b29c      	uxth	r4, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	001a      	movs	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	18d3      	adds	r3, r2, r3
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <PCD_EP_ISR_Handler+0x59c>)
 8001a6e:	4322      	orrs	r2, r4
 8001a70:	b292      	uxth	r2, r2
 8001a72:	801a      	strh	r2, [r3, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	69da      	ldr	r2, [r3, #28]
 8001a78:	211e      	movs	r1, #30
 8001a7a:	187b      	adds	r3, r7, r1
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	18d2      	adds	r2, r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	695a      	ldr	r2, [r3, #20]
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	18d2      	adds	r2, r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d006      	beq.n	8001aa8 <PCD_EP_ISR_Handler+0x4a4>
 8001a9a:	231e      	movs	r3, #30
 8001a9c:	18fb      	adds	r3, r7, r3
 8001a9e:	881a      	ldrh	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <PCD_EP_ISR_Handler+0x4b4>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	0011      	movs	r1, r2
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f003 fa6e 	bl	8004f92 <HAL_PCD_DataOutStageCallback>
 8001ab6:	e008      	b.n	8001aca <PCD_EP_ISR_Handler+0x4c6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	7819      	ldrb	r1, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	695a      	ldr	r2, [r3, #20]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fc3d 	bl	8001344 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001aca:	2312      	movs	r3, #18
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d04f      	beq.n	8001b76 <PCD_EP_ISR_Handler+0x572>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ad6:	2115      	movs	r1, #21
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	015b      	lsls	r3, r3, #5
 8001ade:	3328      	adds	r3, #40	; 0x28
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	18d3      	adds	r3, r2, r3
 8001ae4:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	001a      	movs	r2, r3
 8001aec:	187b      	adds	r3, r7, r1
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	18d3      	adds	r3, r2, r3
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <PCD_EP_ISR_Handler+0x5a0>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	b29c      	uxth	r4, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	001a      	movs	r2, r3
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	18d3      	adds	r3, r2, r3
 8001b0c:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <PCD_EP_ISR_Handler+0x5a4>)
 8001b0e:	4322      	orrs	r2, r4
 8001b10:	b292      	uxth	r2, r2
 8001b12:	801a      	strh	r2, [r3, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2250      	movs	r2, #80	; 0x50
 8001b1a:	5a9b      	ldrh	r3, [r3, r2]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	001a      	movs	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	18d2      	adds	r2, r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	18d3      	adds	r3, r2, r3
 8001b2e:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <PCD_EP_ISR_Handler+0x590>)
 8001b30:	4694      	mov	ip, r2
 8001b32:	4463      	add	r3, ip
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	059b      	lsls	r3, r3, #22
 8001b38:	0d9a      	lsrs	r2, r3, #22
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	18d2      	adds	r2, r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <PCD_EP_ISR_Handler+0x560>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	781a      	ldrb	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	0011      	movs	r1, r2
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f003 fa35 	bl	8004fcc <HAL_PCD_DataInStageCallback>
 8001b62:	e008      	b.n	8001b76 <PCD_EP_ISR_Handler+0x572>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	7819      	ldrb	r1, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff fc3d 	bl	80013f0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2244      	movs	r2, #68	; 0x44
 8001b7c:	5a9b      	ldrh	r3, [r3, r2]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	da00      	bge.n	8001b88 <PCD_EP_ISR_Handler+0x584>
 8001b86:	e542      	b.n	800160e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b009      	add	sp, #36	; 0x24
 8001b90:	bd90      	pop	{r4, r7, pc}
 8001b92:	46c0      	nop			; (mov r8, r8)
 8001b94:	00000402 	.word	0x00000402
 8001b98:	00000406 	.word	0x00000406
 8001b9c:	ffff8f8f 	.word	0xffff8f8f
 8001ba0:	ffff80c0 	.word	0xffff80c0
 8001ba4:	ffff8f0f 	.word	0xffff8f0f
 8001ba8:	ffff8000 	.word	0xffff8000

08001bac <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	0008      	movs	r0, r1
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	240a      	movs	r4, #10
 8001bbc:	193b      	adds	r3, r7, r4
 8001bbe:	1c02      	adds	r2, r0, #0
 8001bc0:	801a      	strh	r2, [r3, #0]
 8001bc2:	2308      	movs	r3, #8
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	1c0a      	adds	r2, r1, #0
 8001bc8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001bca:	193b      	adds	r3, r7, r4
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00a      	beq.n	8001bee <HAL_PCDEx_PMAConfig+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bd8:	230a      	movs	r3, #10
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	2207      	movs	r2, #7
 8001be0:	4013      	ands	r3, r2
 8001be2:	015b      	lsls	r3, r3, #5
 8001be4:	3328      	adds	r3, #40	; 0x28
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	18d3      	adds	r3, r2, r3
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e008      	b.n	8001c00 <HAL_PCDEx_PMAConfig+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bee:	230a      	movs	r3, #10
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	015b      	lsls	r3, r3, #5
 8001bf6:	3329      	adds	r3, #41	; 0x29
 8001bf8:	33ff      	adds	r3, #255	; 0xff
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	18d3      	adds	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001c00:	2308      	movs	r3, #8
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d107      	bne.n	8001c1a <HAL_PCDEx_PMAConfig+0x6e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	80da      	strh	r2, [r3, #6]
 8001c18:	e00b      	b.n	8001c32 <HAL_PCDEx_PMAConfig+0x86>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	0c1b      	lsrs	r3, r3, #16
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b007      	add	sp, #28
 8001c3a:	bd90      	pop	{r4, r7, pc}

08001c3c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	239a      	movs	r3, #154	; 0x9a
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	2101      	movs	r1, #1
 8001c52:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	2398      	movs	r3, #152	; 0x98
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2254      	movs	r2, #84	; 0x54
 8001c62:	5a9b      	ldrh	r3, [r3, r2]
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	2201      	movs	r2, #1
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b299      	uxth	r1, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2254      	movs	r2, #84	; 0x54
 8001c70:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2254      	movs	r2, #84	; 0x54
 8001c76:	5a9b      	ldrh	r3, [r3, r2]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	b299      	uxth	r1, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2254      	movs	r2, #84	; 0x54
 8001c84:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	0018      	movs	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b004      	add	sp, #16
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	000a      	movs	r2, r1
 8001c9a:	1cfb      	adds	r3, r7, #3
 8001c9c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f000 fb76 	bl	80023a8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d100      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x20>
 8001cc6:	e08e      	b.n	8001de6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cc8:	4bc5      	ldr	r3, [pc, #788]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	220c      	movs	r2, #12
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d00e      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cd4:	4bc2      	ldr	r3, [pc, #776]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	220c      	movs	r2, #12
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d117      	bne.n	8001d10 <HAL_RCC_OscConfig+0x68>
 8001ce0:	4bbf      	ldr	r3, [pc, #764]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	23c0      	movs	r3, #192	; 0xc0
 8001ce6:	025b      	lsls	r3, r3, #9
 8001ce8:	401a      	ands	r2, r3
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	025b      	lsls	r3, r3, #9
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d10e      	bne.n	8001d10 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf2:	4bbb      	ldr	r3, [pc, #748]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	029b      	lsls	r3, r3, #10
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d100      	bne.n	8001d00 <HAL_RCC_OscConfig+0x58>
 8001cfe:	e071      	b.n	8001de4 <HAL_RCC_OscConfig+0x13c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d000      	beq.n	8001d0a <HAL_RCC_OscConfig+0x62>
 8001d08:	e06c      	b.n	8001de4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	f000 fb4c 	bl	80023a8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x80>
 8001d18:	4bb1      	ldr	r3, [pc, #708]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	4bb0      	ldr	r3, [pc, #704]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	2180      	movs	r1, #128	; 0x80
 8001d20:	0249      	lsls	r1, r1, #9
 8001d22:	430a      	orrs	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e02f      	b.n	8001d88 <HAL_RCC_OscConfig+0xe0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10c      	bne.n	8001d4a <HAL_RCC_OscConfig+0xa2>
 8001d30:	4bab      	ldr	r3, [pc, #684]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4baa      	ldr	r3, [pc, #680]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d36:	49ab      	ldr	r1, [pc, #684]	; (8001fe4 <HAL_RCC_OscConfig+0x33c>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4ba8      	ldr	r3, [pc, #672]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4ba7      	ldr	r3, [pc, #668]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d42:	49a9      	ldr	r1, [pc, #676]	; (8001fe8 <HAL_RCC_OscConfig+0x340>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e01e      	b.n	8001d88 <HAL_RCC_OscConfig+0xe0>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d10e      	bne.n	8001d70 <HAL_RCC_OscConfig+0xc8>
 8001d52:	4ba3      	ldr	r3, [pc, #652]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4ba2      	ldr	r3, [pc, #648]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	02c9      	lsls	r1, r1, #11
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	4b9f      	ldr	r3, [pc, #636]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b9e      	ldr	r3, [pc, #632]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0249      	lsls	r1, r1, #9
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0xe0>
 8001d70:	4b9b      	ldr	r3, [pc, #620]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b9a      	ldr	r3, [pc, #616]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d76:	499b      	ldr	r1, [pc, #620]	; (8001fe4 <HAL_RCC_OscConfig+0x33c>)
 8001d78:	400a      	ands	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	4b98      	ldr	r3, [pc, #608]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b97      	ldr	r3, [pc, #604]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001d82:	4999      	ldr	r1, [pc, #612]	; (8001fe8 <HAL_RCC_OscConfig+0x340>)
 8001d84:	400a      	ands	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d014      	beq.n	8001dba <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7fe fca2 	bl	80006d8 <HAL_GetTick>
 8001d94:	0003      	movs	r3, r0
 8001d96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d9a:	f7fe fc9d 	bl	80006d8 <HAL_GetTick>
 8001d9e:	0002      	movs	r2, r0
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b64      	cmp	r3, #100	; 0x64
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e2fd      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dac:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	029b      	lsls	r3, r3, #10
 8001db4:	4013      	ands	r3, r2
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0xf2>
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7fe fc8d 	bl	80006d8 <HAL_GetTick>
 8001dbe:	0003      	movs	r3, r0
 8001dc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7fe fc88 	bl	80006d8 <HAL_GetTick>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e2e8      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	4b82      	ldr	r3, [pc, #520]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	029b      	lsls	r3, r3, #10
 8001dde:	4013      	ands	r3, r2
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x11c>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2202      	movs	r2, #2
 8001dec:	4013      	ands	r3, r2
 8001dee:	d100      	bne.n	8001df2 <HAL_RCC_OscConfig+0x14a>
 8001df0:	e06c      	b.n	8001ecc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001df2:	4b7b      	ldr	r3, [pc, #492]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	220c      	movs	r2, #12
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d00e      	beq.n	8001e1a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dfc:	4b78      	ldr	r3, [pc, #480]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	220c      	movs	r2, #12
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d11f      	bne.n	8001e48 <HAL_RCC_OscConfig+0x1a0>
 8001e08:	4b75      	ldr	r3, [pc, #468]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	23c0      	movs	r3, #192	; 0xc0
 8001e0e:	025b      	lsls	r3, r3, #9
 8001e10:	401a      	ands	r2, r3
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d116      	bne.n	8001e48 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1a:	4b71      	ldr	r3, [pc, #452]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	4013      	ands	r3, r2
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_OscConfig+0x188>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e2bb      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e30:	4b6b      	ldr	r3, [pc, #428]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	22f8      	movs	r2, #248	; 0xf8
 8001e36:	4393      	bics	r3, r2
 8001e38:	0019      	movs	r1, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	00da      	lsls	r2, r3, #3
 8001e40:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e42:	430a      	orrs	r2, r1
 8001e44:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e46:	e041      	b.n	8001ecc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d024      	beq.n	8001e9a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e50:	4b63      	ldr	r3, [pc, #396]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fc3c 	bl	80006d8 <HAL_GetTick>
 8001e60:	0003      	movs	r3, r0
 8001e62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e66:	f7fe fc37 	bl	80006d8 <HAL_GetTick>
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e297      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d0f1      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e82:	4b57      	ldr	r3, [pc, #348]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	22f8      	movs	r2, #248	; 0xf8
 8001e88:	4393      	bics	r3, r2
 8001e8a:	0019      	movs	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	00da      	lsls	r2, r3, #3
 8001e92:	4b53      	ldr	r3, [pc, #332]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e018      	b.n	8001ecc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e9a:	4b51      	ldr	r3, [pc, #324]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	438a      	bics	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fc17 	bl	80006d8 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7fe fc12 	bl	80006d8 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e272      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d1f1      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2208      	movs	r2, #8
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d036      	beq.n	8001f44 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d019      	beq.n	8001f12 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ee2:	4b3f      	ldr	r3, [pc, #252]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eea:	f7fe fbf5 	bl	80006d8 <HAL_GetTick>
 8001eee:	0003      	movs	r3, r0
 8001ef0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef4:	f7fe fbf0 	bl	80006d8 <HAL_GetTick>
 8001ef8:	0002      	movs	r2, r0
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e250      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d0f1      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x24c>
 8001f10:	e018      	b.n	8001f44 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f12:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	438a      	bics	r2, r1
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe fbdb 	bl	80006d8 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f28:	f7fe fbd6 	bl	80006d8 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e236      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	2202      	movs	r2, #2
 8001f40:	4013      	ands	r3, r2
 8001f42:	d1f1      	bne.n	8001f28 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d100      	bne.n	8001f50 <HAL_RCC_OscConfig+0x2a8>
 8001f4e:	e0b5      	b.n	80020bc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f50:	231f      	movs	r3, #31
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f58:	4b21      	ldr	r3, [pc, #132]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	4013      	ands	r3, r2
 8001f62:	d111      	bne.n	8001f88 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f6a:	2180      	movs	r1, #128	; 0x80
 8001f6c:	0549      	lsls	r1, r1, #21
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	61da      	str	r2, [r3, #28]
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001f74:	69da      	ldr	r2, [r3, #28]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	055b      	lsls	r3, r3, #21
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f80:	231f      	movs	r3, #31
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_RCC_OscConfig+0x344>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4013      	ands	r3, r2
 8001f92:	d11a      	bne.n	8001fca <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_RCC_OscConfig+0x344>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_RCC_OscConfig+0x344>)
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	0049      	lsls	r1, r1, #1
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa2:	f7fe fb99 	bl	80006d8 <HAL_GetTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fac:	f7fe fb94 	bl	80006d8 <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b64      	cmp	r3, #100	; 0x64
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1f4      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <HAL_RCC_OscConfig+0x344>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x348>
 8001fd2:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001fd4:	6a1a      	ldr	r2, [r3, #32]
 8001fd6:	4b02      	ldr	r3, [pc, #8]	; (8001fe0 <HAL_RCC_OscConfig+0x338>)
 8001fd8:	2101      	movs	r1, #1
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	621a      	str	r2, [r3, #32]
 8001fde:	e035      	b.n	800204c <HAL_RCC_OscConfig+0x3a4>
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	fffeffff 	.word	0xfffeffff
 8001fe8:	fffbffff 	.word	0xfffbffff
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10c      	bne.n	8002012 <HAL_RCC_OscConfig+0x36a>
 8001ff8:	4bca      	ldr	r3, [pc, #808]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	4bc9      	ldr	r3, [pc, #804]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	438a      	bics	r2, r1
 8002002:	621a      	str	r2, [r3, #32]
 8002004:	4bc7      	ldr	r3, [pc, #796]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	4bc6      	ldr	r3, [pc, #792]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800200a:	2104      	movs	r1, #4
 800200c:	438a      	bics	r2, r1
 800200e:	621a      	str	r2, [r3, #32]
 8002010:	e01c      	b.n	800204c <HAL_RCC_OscConfig+0x3a4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b05      	cmp	r3, #5
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x38c>
 800201a:	4bc2      	ldr	r3, [pc, #776]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800201c:	6a1a      	ldr	r2, [r3, #32]
 800201e:	4bc1      	ldr	r3, [pc, #772]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002020:	2104      	movs	r1, #4
 8002022:	430a      	orrs	r2, r1
 8002024:	621a      	str	r2, [r3, #32]
 8002026:	4bbf      	ldr	r3, [pc, #764]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002028:	6a1a      	ldr	r2, [r3, #32]
 800202a:	4bbe      	ldr	r3, [pc, #760]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800202c:	2101      	movs	r1, #1
 800202e:	430a      	orrs	r2, r1
 8002030:	621a      	str	r2, [r3, #32]
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0x3a4>
 8002034:	4bbb      	ldr	r3, [pc, #748]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002036:	6a1a      	ldr	r2, [r3, #32]
 8002038:	4bba      	ldr	r3, [pc, #744]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800203a:	2101      	movs	r1, #1
 800203c:	438a      	bics	r2, r1
 800203e:	621a      	str	r2, [r3, #32]
 8002040:	4bb8      	ldr	r3, [pc, #736]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002042:	6a1a      	ldr	r2, [r3, #32]
 8002044:	4bb7      	ldr	r3, [pc, #732]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002046:	2104      	movs	r1, #4
 8002048:	438a      	bics	r2, r1
 800204a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d014      	beq.n	800207e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7fe fb40 	bl	80006d8 <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205c:	e009      	b.n	8002072 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7fe fb3b 	bl	80006d8 <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	4aaf      	ldr	r2, [pc, #700]	; (8002328 <HAL_RCC_OscConfig+0x680>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e19a      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002072:	4bac      	ldr	r3, [pc, #688]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	2202      	movs	r2, #2
 8002078:	4013      	ands	r3, r2
 800207a:	d0f0      	beq.n	800205e <HAL_RCC_OscConfig+0x3b6>
 800207c:	e013      	b.n	80020a6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207e:	f7fe fb2b 	bl	80006d8 <HAL_GetTick>
 8002082:	0003      	movs	r3, r0
 8002084:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002086:	e009      	b.n	800209c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002088:	f7fe fb26 	bl	80006d8 <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	4aa5      	ldr	r2, [pc, #660]	; (8002328 <HAL_RCC_OscConfig+0x680>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e185      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800209c:	4ba1      	ldr	r3, [pc, #644]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020a6:	231f      	movs	r3, #31
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b0:	4b9c      	ldr	r3, [pc, #624]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80020b2:	69da      	ldr	r2, [r3, #28]
 80020b4:	4b9b      	ldr	r3, [pc, #620]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80020b6:	499d      	ldr	r1, [pc, #628]	; (800232c <HAL_RCC_OscConfig+0x684>)
 80020b8:	400a      	ands	r2, r1
 80020ba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2210      	movs	r2, #16
 80020c2:	4013      	ands	r3, r2
 80020c4:	d063      	beq.n	800218e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d12a      	bne.n	8002124 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020ce:	4b95      	ldr	r3, [pc, #596]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80020d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d2:	4b94      	ldr	r3, [pc, #592]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80020d4:	2104      	movs	r1, #4
 80020d6:	430a      	orrs	r2, r1
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020da:	4b92      	ldr	r3, [pc, #584]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80020dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020de:	4b91      	ldr	r3, [pc, #580]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80020e0:	2101      	movs	r1, #1
 80020e2:	430a      	orrs	r2, r1
 80020e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7fe faf7 	bl	80006d8 <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020f0:	f7fe faf2 	bl	80006d8 <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e152      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002102:	4b88      	ldr	r3, [pc, #544]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002106:	2202      	movs	r2, #2
 8002108:	4013      	ands	r3, r2
 800210a:	d0f1      	beq.n	80020f0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800210c:	4b85      	ldr	r3, [pc, #532]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800210e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002110:	22f8      	movs	r2, #248	; 0xf8
 8002112:	4393      	bics	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	00da      	lsls	r2, r3, #3
 800211c:	4b81      	ldr	r3, [pc, #516]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800211e:	430a      	orrs	r2, r1
 8002120:	635a      	str	r2, [r3, #52]	; 0x34
 8002122:	e034      	b.n	800218e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	3305      	adds	r3, #5
 800212a:	d111      	bne.n	8002150 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800212c:	4b7d      	ldr	r3, [pc, #500]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800212e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002130:	4b7c      	ldr	r3, [pc, #496]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002132:	2104      	movs	r1, #4
 8002134:	438a      	bics	r2, r1
 8002136:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002138:	4b7a      	ldr	r3, [pc, #488]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213c:	22f8      	movs	r2, #248	; 0xf8
 800213e:	4393      	bics	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	00da      	lsls	r2, r3, #3
 8002148:	4b76      	ldr	r3, [pc, #472]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800214a:	430a      	orrs	r2, r1
 800214c:	635a      	str	r2, [r3, #52]	; 0x34
 800214e:	e01e      	b.n	800218e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002150:	4b74      	ldr	r3, [pc, #464]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002154:	4b73      	ldr	r3, [pc, #460]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002156:	2104      	movs	r1, #4
 8002158:	430a      	orrs	r2, r1
 800215a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800215c:	4b71      	ldr	r3, [pc, #452]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800215e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002160:	4b70      	ldr	r3, [pc, #448]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002162:	2101      	movs	r1, #1
 8002164:	438a      	bics	r2, r1
 8002166:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7fe fab6 	bl	80006d8 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002172:	f7fe fab1 	bl	80006d8 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e111      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002184:	4b67      	ldr	r3, [pc, #412]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002188:	2202      	movs	r2, #2
 800218a:	4013      	ands	r3, r2
 800218c:	d1f1      	bne.n	8002172 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2220      	movs	r2, #32
 8002194:	4013      	ands	r3, r2
 8002196:	d05c      	beq.n	8002252 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002198:	4b62      	ldr	r3, [pc, #392]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	220c      	movs	r2, #12
 800219e:	4013      	ands	r3, r2
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	d00e      	beq.n	80021c2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80021a4:	4b5f      	ldr	r3, [pc, #380]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	220c      	movs	r2, #12
 80021aa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d114      	bne.n	80021da <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80021b0:	4b5c      	ldr	r3, [pc, #368]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	23c0      	movs	r3, #192	; 0xc0
 80021b6:	025b      	lsls	r3, r3, #9
 80021b8:	401a      	ands	r2, r3
 80021ba:	23c0      	movs	r3, #192	; 0xc0
 80021bc:	025b      	lsls	r3, r3, #9
 80021be:	429a      	cmp	r2, r3
 80021c0:	d10b      	bne.n	80021da <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021c2:	4b58      	ldr	r3, [pc, #352]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80021c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	025b      	lsls	r3, r3, #9
 80021ca:	4013      	ands	r3, r2
 80021cc:	d040      	beq.n	8002250 <HAL_RCC_OscConfig+0x5a8>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d03c      	beq.n	8002250 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e0e6      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01b      	beq.n	800221a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021e2:	4b50      	ldr	r3, [pc, #320]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80021e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e6:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80021e8:	2180      	movs	r1, #128	; 0x80
 80021ea:	0249      	lsls	r1, r1, #9
 80021ec:	430a      	orrs	r2, r1
 80021ee:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe fa72 	bl	80006d8 <HAL_GetTick>
 80021f4:	0003      	movs	r3, r0
 80021f6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021fa:	f7fe fa6d 	bl	80006d8 <HAL_GetTick>
 80021fe:	0002      	movs	r2, r0
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e0cd      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800220c:	4b45      	ldr	r3, [pc, #276]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800220e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	025b      	lsls	r3, r3, #9
 8002214:	4013      	ands	r3, r2
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x552>
 8002218:	e01b      	b.n	8002252 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800221a:	4b42      	ldr	r3, [pc, #264]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800221c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800221e:	4b41      	ldr	r3, [pc, #260]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002220:	4943      	ldr	r1, [pc, #268]	; (8002330 <HAL_RCC_OscConfig+0x688>)
 8002222:	400a      	ands	r2, r1
 8002224:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002226:	f7fe fa57 	bl	80006d8 <HAL_GetTick>
 800222a:	0003      	movs	r3, r0
 800222c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002230:	f7fe fa52 	bl	80006d8 <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e0b2      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002242:	4b38      	ldr	r3, [pc, #224]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	025b      	lsls	r3, r3, #9
 800224a:	4013      	ands	r3, r2
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x588>
 800224e:	e000      	b.n	8002252 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002250:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	2b00      	cmp	r3, #0
 8002258:	d100      	bne.n	800225c <HAL_RCC_OscConfig+0x5b4>
 800225a:	e0a4      	b.n	80023a6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	220c      	movs	r2, #12
 8002262:	4013      	ands	r3, r2
 8002264:	2b08      	cmp	r3, #8
 8002266:	d100      	bne.n	800226a <HAL_RCC_OscConfig+0x5c2>
 8002268:	e078      	b.n	800235c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	2b02      	cmp	r3, #2
 8002270:	d14c      	bne.n	800230c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002272:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002278:	492e      	ldr	r1, [pc, #184]	; (8002334 <HAL_RCC_OscConfig+0x68c>)
 800227a:	400a      	ands	r2, r1
 800227c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7fe fa2b 	bl	80006d8 <HAL_GetTick>
 8002282:	0003      	movs	r3, r0
 8002284:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002288:	f7fe fa26 	bl	80006d8 <HAL_GetTick>
 800228c:	0002      	movs	r2, r0
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e086      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	049b      	lsls	r3, r3, #18
 80022a2:	4013      	ands	r3, r2
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	220f      	movs	r2, #15
 80022ac:	4393      	bics	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80022b6:	430a      	orrs	r2, r1
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80022ba:	4b1a      	ldr	r3, [pc, #104]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4a1e      	ldr	r2, [pc, #120]	; (8002338 <HAL_RCC_OscConfig+0x690>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	431a      	orrs	r2, r3
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 80022da:	2180      	movs	r1, #128	; 0x80
 80022dc:	0449      	lsls	r1, r1, #17
 80022de:	430a      	orrs	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7fe f9f9 	bl	80006d8 <HAL_GetTick>
 80022e6:	0003      	movs	r3, r0
 80022e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7fe f9f4 	bl	80006d8 <HAL_GetTick>
 80022f0:	0002      	movs	r2, r0
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e054      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	049b      	lsls	r3, r3, #18
 8002306:	4013      	ands	r3, r2
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x644>
 800230a:	e04c      	b.n	80023a6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b04      	ldr	r3, [pc, #16]	; (8002324 <HAL_RCC_OscConfig+0x67c>)
 8002312:	4908      	ldr	r1, [pc, #32]	; (8002334 <HAL_RCC_OscConfig+0x68c>)
 8002314:	400a      	ands	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002318:	f7fe f9de 	bl	80006d8 <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002320:	e015      	b.n	800234e <HAL_RCC_OscConfig+0x6a6>
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	40021000 	.word	0x40021000
 8002328:	00001388 	.word	0x00001388
 800232c:	efffffff 	.word	0xefffffff
 8002330:	fffeffff 	.word	0xfffeffff
 8002334:	feffffff 	.word	0xfeffffff
 8002338:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe f9cc 	bl	80006d8 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e02c      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800234e:	4b18      	ldr	r3, [pc, #96]	; (80023b0 <HAL_RCC_OscConfig+0x708>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	2380      	movs	r3, #128	; 0x80
 8002354:	049b      	lsls	r3, r3, #18
 8002356:	4013      	ands	r3, r2
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x694>
 800235a:	e024      	b.n	80023a6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e01f      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_RCC_OscConfig+0x708>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_RCC_OscConfig+0x708>)
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	23c0      	movs	r3, #192	; 0xc0
 8002378:	025b      	lsls	r3, r3, #9
 800237a:	401a      	ands	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002380:	429a      	cmp	r2, r3
 8002382:	d10e      	bne.n	80023a2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	220f      	movs	r2, #15
 8002388:	401a      	ands	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800238e:	429a      	cmp	r2, r3
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	23f0      	movs	r3, #240	; 0xf0
 8002396:	039b      	lsls	r3, r3, #14
 8002398:	401a      	ands	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	b008      	add	sp, #32
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0bf      	b.n	8002548 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b61      	ldr	r3, [pc, #388]	; (8002550 <HAL_RCC_ClockConfig+0x19c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	4013      	ands	r3, r2
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d911      	bls.n	80023fa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b5e      	ldr	r3, [pc, #376]	; (8002550 <HAL_RCC_ClockConfig+0x19c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2201      	movs	r2, #1
 80023dc:	4393      	bics	r3, r2
 80023de:	0019      	movs	r1, r3
 80023e0:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <HAL_RCC_ClockConfig+0x19c>)
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <HAL_RCC_ClockConfig+0x19c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2201      	movs	r2, #1
 80023ee:	4013      	ands	r3, r2
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d001      	beq.n	80023fa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0a6      	b.n	8002548 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2202      	movs	r2, #2
 8002400:	4013      	ands	r3, r2
 8002402:	d015      	beq.n	8002430 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2204      	movs	r2, #4
 800240a:	4013      	ands	r3, r2
 800240c:	d006      	beq.n	800241c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800240e:	4b51      	ldr	r3, [pc, #324]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	4b50      	ldr	r3, [pc, #320]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 8002414:	21e0      	movs	r1, #224	; 0xe0
 8002416:	00c9      	lsls	r1, r1, #3
 8002418:	430a      	orrs	r2, r1
 800241a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	22f0      	movs	r2, #240	; 0xf0
 8002422:	4393      	bics	r3, r2
 8002424:	0019      	movs	r1, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 800242c:	430a      	orrs	r2, r1
 800242e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	d04c      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b44      	ldr	r3, [pc, #272]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	029b      	lsls	r3, r3, #10
 800244a:	4013      	ands	r3, r2
 800244c:	d120      	bne.n	8002490 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e07a      	b.n	8002548 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b3e      	ldr	r3, [pc, #248]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	049b      	lsls	r3, r3, #18
 8002462:	4013      	ands	r3, r2
 8002464:	d114      	bne.n	8002490 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e06e      	b.n	8002548 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b03      	cmp	r3, #3
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 8002474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002476:	2380      	movs	r3, #128	; 0x80
 8002478:	025b      	lsls	r3, r3, #9
 800247a:	4013      	ands	r3, r2
 800247c:	d108      	bne.n	8002490 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e062      	b.n	8002548 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b34      	ldr	r3, [pc, #208]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2202      	movs	r2, #2
 8002488:	4013      	ands	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e05b      	b.n	8002548 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2203      	movs	r2, #3
 8002496:	4393      	bics	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7fe f918 	bl	80006d8 <HAL_GetTick>
 80024a8:	0003      	movs	r3, r0
 80024aa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ac:	e009      	b.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ae:	f7fe f913 	bl	80006d8 <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	4a27      	ldr	r2, [pc, #156]	; (8002558 <HAL_RCC_ClockConfig+0x1a4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e042      	b.n	8002548 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b24      	ldr	r3, [pc, #144]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	220c      	movs	r2, #12
 80024c8:	401a      	ands	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ec      	bne.n	80024ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_RCC_ClockConfig+0x19c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d211      	bcs.n	8002506 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_RCC_ClockConfig+0x19c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2201      	movs	r2, #1
 80024e8:	4393      	bics	r3, r2
 80024ea:	0019      	movs	r1, r3
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_RCC_ClockConfig+0x19c>)
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f4:	4b16      	ldr	r3, [pc, #88]	; (8002550 <HAL_RCC_ClockConfig+0x19c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2201      	movs	r2, #1
 80024fa:	4013      	ands	r3, r2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d001      	beq.n	8002506 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e020      	b.n	8002548 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2204      	movs	r2, #4
 800250c:	4013      	ands	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	4a11      	ldr	r2, [pc, #68]	; (800255c <HAL_RCC_ClockConfig+0x1a8>)
 8002516:	4013      	ands	r3, r2
 8002518:	0019      	movs	r1, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002524:	f000 f820 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8002528:	0001      	movs	r1, r0
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <HAL_RCC_ClockConfig+0x1a0>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	220f      	movs	r2, #15
 8002532:	4013      	ands	r3, r2
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x1ac>)
 8002536:	5cd3      	ldrb	r3, [r2, r3]
 8002538:	000a      	movs	r2, r1
 800253a:	40da      	lsrs	r2, r3
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_RCC_ClockConfig+0x1b0>)
 800253e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002540:	2000      	movs	r0, #0
 8002542:	f7fe f883 	bl	800064c <HAL_InitTick>
  
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b004      	add	sp, #16
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40022000 	.word	0x40022000
 8002554:	40021000 	.word	0x40021000
 8002558:	00001388 	.word	0x00001388
 800255c:	fffff8ff 	.word	0xfffff8ff
 8002560:	08006310 	.word	0x08006310
 8002564:	20000000 	.word	0x20000000

08002568 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b08f      	sub	sp, #60	; 0x3c
 800256c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800256e:	2314      	movs	r3, #20
 8002570:	18fb      	adds	r3, r7, r3
 8002572:	4a37      	ldr	r2, [pc, #220]	; (8002650 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002574:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002576:	c313      	stmia	r3!, {r0, r1, r4}
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	4a35      	ldr	r2, [pc, #212]	; (8002654 <HAL_RCC_GetSysClockFreq+0xec>)
 8002580:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002582:	c313      	stmia	r3!, {r0, r1, r4}
 8002584:	6812      	ldr	r2, [r2, #0]
 8002586:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002588:	2300      	movs	r3, #0
 800258a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258c:	2300      	movs	r3, #0
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002590:	2300      	movs	r3, #0
 8002592:	637b      	str	r3, [r7, #52]	; 0x34
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800259c:	4b2e      	ldr	r3, [pc, #184]	; (8002658 <HAL_RCC_GetSysClockFreq+0xf0>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	220c      	movs	r2, #12
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d006      	beq.n	80025ba <HAL_RCC_GetSysClockFreq+0x52>
 80025ac:	2b0c      	cmp	r3, #12
 80025ae:	d043      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0xd0>
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d144      	bne.n	800263e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <HAL_RCC_GetSysClockFreq+0xf4>)
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025b8:	e044      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	0c9b      	lsrs	r3, r3, #18
 80025be:	220f      	movs	r2, #15
 80025c0:	4013      	ands	r3, r2
 80025c2:	2214      	movs	r2, #20
 80025c4:	18ba      	adds	r2, r7, r2
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025ca:	4b23      	ldr	r3, [pc, #140]	; (8002658 <HAL_RCC_GetSysClockFreq+0xf0>)
 80025cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ce:	220f      	movs	r2, #15
 80025d0:	4013      	ands	r3, r2
 80025d2:	1d3a      	adds	r2, r7, #4
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025da:	23c0      	movs	r3, #192	; 0xc0
 80025dc:	025b      	lsls	r3, r3, #9
 80025de:	401a      	ands	r2, r3
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	025b      	lsls	r3, r3, #9
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d109      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ea:	481c      	ldr	r0, [pc, #112]	; (800265c <HAL_RCC_GetSysClockFreq+0xf4>)
 80025ec:	f7fd fd8c 	bl	8000108 <__udivsi3>
 80025f0:	0003      	movs	r3, r0
 80025f2:	001a      	movs	r2, r3
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	4353      	muls	r3, r2
 80025f8:	637b      	str	r3, [r7, #52]	; 0x34
 80025fa:	e01a      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80025fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025fe:	23c0      	movs	r3, #192	; 0xc0
 8002600:	025b      	lsls	r3, r3, #9
 8002602:	401a      	ands	r2, r3
 8002604:	23c0      	movs	r3, #192	; 0xc0
 8002606:	025b      	lsls	r3, r3, #9
 8002608:	429a      	cmp	r2, r3
 800260a:	d109      	bne.n	8002620 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800260c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800260e:	4814      	ldr	r0, [pc, #80]	; (8002660 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002610:	f7fd fd7a 	bl	8000108 <__udivsi3>
 8002614:	0003      	movs	r3, r0
 8002616:	001a      	movs	r2, r3
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	4353      	muls	r3, r2
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
 800261e:	e008      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002620:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002622:	480e      	ldr	r0, [pc, #56]	; (800265c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002624:	f7fd fd70 	bl	8000108 <__udivsi3>
 8002628:	0003      	movs	r3, r0
 800262a:	001a      	movs	r2, r3
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	4353      	muls	r3, r2
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002634:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002636:	e005      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_GetSysClockFreq+0xf8>)
 800263a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800263c:	e002      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002642:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b00f      	add	sp, #60	; 0x3c
 800264c:	bd90      	pop	{r4, r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	080062ac 	.word	0x080062ac
 8002654:	080062bc 	.word	0x080062bc
 8002658:	40021000 	.word	0x40021000
 800265c:	007a1200 	.word	0x007a1200
 8002660:	02dc6c00 	.word	0x02dc6c00

08002664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	025b      	lsls	r3, r3, #9
 800267c:	4013      	ands	r3, r2
 800267e:	d100      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002680:	e08f      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2317      	movs	r3, #23
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b6f      	ldr	r3, [pc, #444]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	055b      	lsls	r3, r3, #21
 8002692:	4013      	ands	r3, r2
 8002694:	d111      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	4b6c      	ldr	r3, [pc, #432]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002698:	69da      	ldr	r2, [r3, #28]
 800269a:	4b6b      	ldr	r3, [pc, #428]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0549      	lsls	r1, r1, #21
 80026a0:	430a      	orrs	r2, r1
 80026a2:	61da      	str	r2, [r3, #28]
 80026a4:	4b68      	ldr	r3, [pc, #416]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026a6:	69da      	ldr	r2, [r3, #28]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	055b      	lsls	r3, r3, #21
 80026ac:	4013      	ands	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b2:	2317      	movs	r3, #23
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	2201      	movs	r2, #1
 80026b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b64      	ldr	r3, [pc, #400]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	d11a      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c6:	4b61      	ldr	r3, [pc, #388]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4b60      	ldr	r3, [pc, #384]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	0049      	lsls	r1, r1, #1
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d4:	f7fe f800 	bl	80006d8 <HAL_GetTick>
 80026d8:	0003      	movs	r3, r0
 80026da:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026dc:	e008      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026de:	f7fd fffb 	bl	80006d8 <HAL_GetTick>
 80026e2:	0002      	movs	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	2b64      	cmp	r3, #100	; 0x64
 80026ea:	d901      	bls.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0a6      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b56      	ldr	r3, [pc, #344]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	d0f0      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026fc:	4b52      	ldr	r3, [pc, #328]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	23c0      	movs	r3, #192	; 0xc0
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4013      	ands	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d034      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	23c0      	movs	r3, #192	; 0xc0
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4013      	ands	r3, r2
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	429a      	cmp	r2, r3
 800271c:	d02c      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800271e:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4a4b      	ldr	r2, [pc, #300]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002724:	4013      	ands	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002728:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800272a:	6a1a      	ldr	r2, [r3, #32]
 800272c:	4b46      	ldr	r3, [pc, #280]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	0249      	lsls	r1, r1, #9
 8002732:	430a      	orrs	r2, r1
 8002734:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002736:	4b44      	ldr	r3, [pc, #272]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002738:	6a1a      	ldr	r2, [r3, #32]
 800273a:	4b43      	ldr	r3, [pc, #268]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800273c:	4945      	ldr	r1, [pc, #276]	; (8002854 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800273e:	400a      	ands	r2, r1
 8002740:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	4013      	ands	r3, r2
 800274e:	d013      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7fd ffc2 	bl	80006d8 <HAL_GetTick>
 8002754:	0003      	movs	r3, r0
 8002756:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002758:	e009      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275a:	f7fd ffbd 	bl	80006d8 <HAL_GetTick>
 800275e:	0002      	movs	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	4a3c      	ldr	r2, [pc, #240]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e067      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	4b36      	ldr	r3, [pc, #216]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	2202      	movs	r2, #2
 8002774:	4013      	ands	r3, r2
 8002776:	d0f0      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002778:	4b33      	ldr	r3, [pc, #204]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	4a34      	ldr	r2, [pc, #208]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800277e:	4013      	ands	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002788:	430a      	orrs	r2, r1
 800278a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800278c:	2317      	movs	r3, #23
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4b2c      	ldr	r3, [pc, #176]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800279c:	492f      	ldr	r1, [pc, #188]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800279e:	400a      	ands	r2, r1
 80027a0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2201      	movs	r2, #1
 80027a8:	4013      	ands	r3, r2
 80027aa:	d009      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ac:	4b26      	ldr	r3, [pc, #152]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	2203      	movs	r2, #3
 80027b2:	4393      	bics	r3, r2
 80027b4:	0019      	movs	r1, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	4b23      	ldr	r3, [pc, #140]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027bc:	430a      	orrs	r2, r1
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2202      	movs	r2, #2
 80027c6:	4013      	ands	r3, r2
 80027c8:	d009      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ca:	4b1f      	ldr	r3, [pc, #124]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a24      	ldr	r2, [pc, #144]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027da:	430a      	orrs	r2, r1
 80027dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2220      	movs	r2, #32
 80027e4:	4013      	ands	r3, r2
 80027e6:	d009      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027e8:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	2210      	movs	r2, #16
 80027ee:	4393      	bics	r3, r2
 80027f0:	0019      	movs	r1, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027f8:	430a      	orrs	r2, r1
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	; 0x80
 8002802:	029b      	lsls	r3, r3, #10
 8002804:	4013      	ands	r3, r2
 8002806:	d009      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002808:	4b0f      	ldr	r3, [pc, #60]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	2280      	movs	r2, #128	; 0x80
 800280e:	4393      	bics	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699a      	ldr	r2, [r3, #24]
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002818:	430a      	orrs	r2, r1
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2380      	movs	r3, #128	; 0x80
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4013      	ands	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	2240      	movs	r2, #64	; 0x40
 800282e:	4393      	bics	r3, r2
 8002830:	0019      	movs	r1, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	695a      	ldr	r2, [r3, #20]
 8002836:	4b04      	ldr	r3, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002838:	430a      	orrs	r2, r1
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b006      	add	sp, #24
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	40021000 	.word	0x40021000
 800284c:	40007000 	.word	0x40007000
 8002850:	fffffcff 	.word	0xfffffcff
 8002854:	fffeffff 	.word	0xfffeffff
 8002858:	00001388 	.word	0x00001388
 800285c:	efffffff 	.word	0xefffffff
 8002860:	fffcffff 	.word	0xfffcffff

08002864 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800286c:	210e      	movs	r1, #14
 800286e:	187b      	adds	r3, r7, r1
 8002870:	4a08      	ldr	r2, [pc, #32]	; (8002894 <USB_EnableGlobalInt+0x30>)
 8002872:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2240      	movs	r2, #64	; 0x40
 8002878:	5a9b      	ldrh	r3, [r3, r2]
 800287a:	b29a      	uxth	r2, r3
 800287c:	187b      	adds	r3, r7, r1
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	4313      	orrs	r3, r2
 8002882:	b299      	uxth	r1, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2240      	movs	r2, #64	; 0x40
 8002888:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	0018      	movs	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	b004      	add	sp, #16
 8002892:	bd80      	pop	{r7, pc}
 8002894:	ffffbf80 	.word	0xffffbf80

08002898 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80028a0:	210e      	movs	r1, #14
 80028a2:	187b      	adds	r3, r7, r1
 80028a4:	4a0b      	ldr	r2, [pc, #44]	; (80028d4 <USB_DisableGlobalInt+0x3c>)
 80028a6:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2240      	movs	r2, #64	; 0x40
 80028ac:	5a9b      	ldrh	r3, [r3, r2]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	b21b      	sxth	r3, r3
 80028b2:	187a      	adds	r2, r7, r1
 80028b4:	2100      	movs	r1, #0
 80028b6:	5e52      	ldrsh	r2, [r2, r1]
 80028b8:	43d2      	mvns	r2, r2
 80028ba:	b212      	sxth	r2, r2
 80028bc:	4013      	ands	r3, r2
 80028be:	b21b      	sxth	r3, r3
 80028c0:	b299      	uxth	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2240      	movs	r2, #64	; 0x40
 80028c6:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b004      	add	sp, #16
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	ffffbf80 	.word	0xffffbf80

080028d8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80028d8:	b084      	sub	sp, #16
 80028da:	b590      	push	{r4, r7, lr}
 80028dc:	46c6      	mov	lr, r8
 80028de:	b500      	push	{lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	2004      	movs	r0, #4
 80028e8:	2410      	movs	r4, #16
 80028ea:	46a4      	mov	ip, r4
 80028ec:	2408      	movs	r4, #8
 80028ee:	46a0      	mov	r8, r4
 80028f0:	44b8      	add	r8, r7
 80028f2:	44c4      	add	ip, r8
 80028f4:	4460      	add	r0, ip
 80028f6:	6001      	str	r1, [r0, #0]
 80028f8:	6042      	str	r2, [r0, #4]
 80028fa:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2240      	movs	r2, #64	; 0x40
 8002900:	2101      	movs	r1, #1
 8002902:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2240      	movs	r2, #64	; 0x40
 8002908:	2100      	movs	r1, #0
 800290a:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2244      	movs	r2, #68	; 0x44
 8002910:	2100      	movs	r1, #0
 8002912:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2250      	movs	r2, #80	; 0x50
 8002918:	2100      	movs	r1, #0
 800291a:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	0018      	movs	r0, r3
 8002920:	f7ff ffa0 	bl	8002864 <USB_EnableGlobalInt>

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b002      	add	sp, #8
 800292c:	bc04      	pop	{r2}
 800292e:	4690      	mov	r8, r2
 8002930:	bc90      	pop	{r4, r7}
 8002932:	bc08      	pop	{r3}
 8002934:	b004      	add	sp, #16
 8002936:	4718      	bx	r3

08002938 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002942:	2317      	movs	r3, #23
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	2200      	movs	r2, #0
 8002948:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	18d3      	adds	r3, r2, r3
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	b29a      	uxth	r2, r3
 8002958:	2314      	movs	r3, #20
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	49b2      	ldr	r1, [pc, #712]	; (8002c28 <USB_ActivateEndpoint+0x2f0>)
 800295e:	400a      	ands	r2, r1
 8002960:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	78db      	ldrb	r3, [r3, #3]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d020      	beq.n	80029ac <USB_ActivateEndpoint+0x74>
 800296a:	dc02      	bgt.n	8002972 <USB_ActivateEndpoint+0x3a>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <USB_ActivateEndpoint+0x44>
 8002970:	e025      	b.n	80029be <USB_ActivateEndpoint+0x86>
 8002972:	2b02      	cmp	r3, #2
 8002974:	d00b      	beq.n	800298e <USB_ActivateEndpoint+0x56>
 8002976:	2b03      	cmp	r3, #3
 8002978:	d00f      	beq.n	800299a <USB_ActivateEndpoint+0x62>
 800297a:	e020      	b.n	80029be <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800297c:	2214      	movs	r2, #20
 800297e:	18bb      	adds	r3, r7, r2
 8002980:	18ba      	adds	r2, r7, r2
 8002982:	8812      	ldrh	r2, [r2, #0]
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	0089      	lsls	r1, r1, #2
 8002988:	430a      	orrs	r2, r1
 800298a:	801a      	strh	r2, [r3, #0]
      break;
 800298c:	e01c      	b.n	80029c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800298e:	2214      	movs	r2, #20
 8002990:	18bb      	adds	r3, r7, r2
 8002992:	18ba      	adds	r2, r7, r2
 8002994:	8812      	ldrh	r2, [r2, #0]
 8002996:	801a      	strh	r2, [r3, #0]
      break;
 8002998:	e016      	b.n	80029c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800299a:	2214      	movs	r2, #20
 800299c:	18bb      	adds	r3, r7, r2
 800299e:	18ba      	adds	r2, r7, r2
 80029a0:	8812      	ldrh	r2, [r2, #0]
 80029a2:	21c0      	movs	r1, #192	; 0xc0
 80029a4:	00c9      	lsls	r1, r1, #3
 80029a6:	430a      	orrs	r2, r1
 80029a8:	801a      	strh	r2, [r3, #0]
      break;
 80029aa:	e00d      	b.n	80029c8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80029ac:	2214      	movs	r2, #20
 80029ae:	18bb      	adds	r3, r7, r2
 80029b0:	18ba      	adds	r2, r7, r2
 80029b2:	8812      	ldrh	r2, [r2, #0]
 80029b4:	2180      	movs	r1, #128	; 0x80
 80029b6:	00c9      	lsls	r1, r1, #3
 80029b8:	430a      	orrs	r2, r1
 80029ba:	801a      	strh	r2, [r3, #0]
      break;
 80029bc:	e004      	b.n	80029c8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80029be:	2317      	movs	r3, #23
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
      break;
 80029c6:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	18d3      	adds	r3, r2, r3
 80029d2:	2214      	movs	r2, #20
 80029d4:	18ba      	adds	r2, r7, r2
 80029d6:	8812      	ldrh	r2, [r2, #0]
 80029d8:	4994      	ldr	r1, [pc, #592]	; (8002c2c <USB_ActivateEndpoint+0x2f4>)
 80029da:	430a      	orrs	r2, r1
 80029dc:	b292      	uxth	r2, r2
 80029de:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	18d3      	adds	r3, r2, r3
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	b21b      	sxth	r3, r3
 80029f0:	4a8f      	ldr	r2, [pc, #572]	; (8002c30 <USB_ActivateEndpoint+0x2f8>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	b21a      	sxth	r2, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b21b      	sxth	r3, r3
 80029fc:	4313      	orrs	r3, r2
 80029fe:	b21b      	sxth	r3, r3
 8002a00:	b29c      	uxth	r4, r3
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	18d3      	adds	r3, r2, r3
 8002a0c:	4a87      	ldr	r2, [pc, #540]	; (8002c2c <USB_ActivateEndpoint+0x2f4>)
 8002a0e:	4322      	orrs	r2, r4
 8002a10:	b292      	uxth	r2, r2
 8002a12:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	7b1b      	ldrb	r3, [r3, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d000      	beq.n	8002a1e <USB_ActivateEndpoint+0xe6>
 8002a1c:	e11a      	b.n	8002c54 <USB_ActivateEndpoint+0x31c>
  {
    if (ep->is_in != 0U)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	785b      	ldrb	r3, [r3, #1]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d062      	beq.n	8002aec <USB_ActivateEndpoint+0x1b4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002a26:	687c      	ldr	r4, [r7, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2250      	movs	r2, #80	; 0x50
 8002a2c:	5a9b      	ldrh	r3, [r3, r2]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	18e4      	adds	r4, r4, r3
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	18e3      	adds	r3, r4, r3
 8002a3a:	2280      	movs	r2, #128	; 0x80
 8002a3c:	00d2      	lsls	r2, r2, #3
 8002a3e:	4694      	mov	ip, r2
 8002a40:	4463      	add	r3, ip
 8002a42:	001c      	movs	r4, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	88db      	ldrh	r3, [r3, #6]
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	18db      	adds	r3, r3, r3
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	18d3      	adds	r3, r2, r3
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	b29c      	uxth	r4, r3
 8002a60:	0022      	movs	r2, r4
 8002a62:	2340      	movs	r3, #64	; 0x40
 8002a64:	4013      	ands	r3, r2
 8002a66:	d012      	beq.n	8002a8e <USB_ActivateEndpoint+0x156>
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	18d3      	adds	r3, r2, r3
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4a6e      	ldr	r2, [pc, #440]	; (8002c30 <USB_ActivateEndpoint+0x2f8>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	b29c      	uxth	r4, r3
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	18d3      	adds	r3, r2, r3
 8002a86:	4a6b      	ldr	r2, [pc, #428]	; (8002c34 <USB_ActivateEndpoint+0x2fc>)
 8002a88:	4322      	orrs	r2, r4
 8002a8a:	b292      	uxth	r2, r2
 8002a8c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	78db      	ldrb	r3, [r3, #3]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d016      	beq.n	8002ac4 <USB_ActivateEndpoint+0x18c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	18d3      	adds	r3, r2, r3
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4a64      	ldr	r2, [pc, #400]	; (8002c38 <USB_ActivateEndpoint+0x300>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	b29c      	uxth	r4, r3
 8002aaa:	2320      	movs	r3, #32
 8002aac:	4063      	eors	r3, r4
 8002aae:	b29c      	uxth	r4, r3
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	18d3      	adds	r3, r2, r3
 8002aba:	4a5c      	ldr	r2, [pc, #368]	; (8002c2c <USB_ActivateEndpoint+0x2f4>)
 8002abc:	4322      	orrs	r2, r4
 8002abe:	b292      	uxth	r2, r2
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	e21a      	b.n	8002efa <USB_ActivateEndpoint+0x5c2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	18d3      	adds	r3, r2, r3
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	4a59      	ldr	r2, [pc, #356]	; (8002c38 <USB_ActivateEndpoint+0x300>)
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	b29c      	uxth	r4, r3
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	18d3      	adds	r3, r2, r3
 8002ae2:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <USB_ActivateEndpoint+0x2f4>)
 8002ae4:	4322      	orrs	r2, r4
 8002ae6:	b292      	uxth	r2, r2
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	e206      	b.n	8002efa <USB_ActivateEndpoint+0x5c2>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002aec:	687c      	ldr	r4, [r7, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2250      	movs	r2, #80	; 0x50
 8002af2:	5a9b      	ldrh	r3, [r3, r2]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	18e4      	adds	r4, r4, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	18e3      	adds	r3, r4, r3
 8002b00:	4a4e      	ldr	r2, [pc, #312]	; (8002c3c <USB_ActivateEndpoint+0x304>)
 8002b02:	4694      	mov	ip, r2
 8002b04:	4463      	add	r3, ip
 8002b06:	001c      	movs	r4, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	88db      	ldrh	r3, [r3, #6]
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	18db      	adds	r3, r3, r3
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002b16:	687c      	ldr	r4, [r7, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2250      	movs	r2, #80	; 0x50
 8002b1c:	5a9b      	ldrh	r3, [r3, r2]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	18e4      	adds	r4, r4, r3
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	18e3      	adds	r3, r4, r3
 8002b2a:	4a45      	ldr	r2, [pc, #276]	; (8002c40 <USB_ActivateEndpoint+0x308>)
 8002b2c:	4694      	mov	ip, r2
 8002b2e:	4463      	add	r3, ip
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10e      	bne.n	8002b58 <USB_ActivateEndpoint+0x220>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	4a41      	ldr	r2, [pc, #260]	; (8002c44 <USB_ActivateEndpoint+0x30c>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	801a      	strh	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	4a3e      	ldr	r2, [pc, #248]	; (8002c48 <USB_ActivateEndpoint+0x310>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	801a      	strh	r2, [r3, #0]
 8002b56:	e02b      	b.n	8002bb0 <USB_ActivateEndpoint+0x278>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b3e      	cmp	r3, #62	; 0x3e
 8002b5e:	d812      	bhi.n	8002b86 <USB_ActivateEndpoint+0x24e>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d002      	beq.n	8002b78 <USB_ActivateEndpoint+0x240>
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	3301      	adds	r3, #1
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	029b      	lsls	r3, r3, #10
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	e014      	b.n	8002bb0 <USB_ActivateEndpoint+0x278>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	095b      	lsrs	r3, r3, #5
 8002b8c:	613b      	str	r3, [r7, #16]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	221f      	movs	r2, #31
 8002b94:	4013      	ands	r3, r2
 8002b96:	d102      	bne.n	8002b9e <USB_ActivateEndpoint+0x266>
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	029b      	lsls	r3, r3, #10
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <USB_ActivateEndpoint+0x310>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	18d3      	adds	r3, r2, r3
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b29c      	uxth	r4, r3
 8002bbe:	0022      	movs	r2, r4
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	01db      	lsls	r3, r3, #7
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d012      	beq.n	8002bee <USB_ActivateEndpoint+0x2b6>
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	18d3      	adds	r3, r2, r3
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <USB_ActivateEndpoint+0x2f8>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	b29c      	uxth	r4, r3
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	18d3      	adds	r3, r2, r3
 8002be6:	4a19      	ldr	r2, [pc, #100]	; (8002c4c <USB_ActivateEndpoint+0x314>)
 8002be8:	4322      	orrs	r2, r4
 8002bea:	b292      	uxth	r2, r2
 8002bec:	801a      	strh	r2, [r3, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	18d3      	adds	r3, r2, r3
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <USB_ActivateEndpoint+0x318>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	b29c      	uxth	r4, r3
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	015b      	lsls	r3, r3, #5
 8002c06:	4063      	eors	r3, r4
 8002c08:	b29c      	uxth	r4, r3
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	019b      	lsls	r3, r3, #6
 8002c0e:	4063      	eors	r3, r4
 8002c10:	b29c      	uxth	r4, r3
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	18d3      	adds	r3, r2, r3
 8002c1c:	4a03      	ldr	r2, [pc, #12]	; (8002c2c <USB_ActivateEndpoint+0x2f4>)
 8002c1e:	4322      	orrs	r2, r4
 8002c20:	b292      	uxth	r2, r2
 8002c22:	801a      	strh	r2, [r3, #0]
 8002c24:	e169      	b.n	8002efa <USB_ActivateEndpoint+0x5c2>
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	ffff898f 	.word	0xffff898f
 8002c2c:	ffff8080 	.word	0xffff8080
 8002c30:	ffff8f8f 	.word	0xffff8f8f
 8002c34:	ffff80c0 	.word	0xffff80c0
 8002c38:	ffff8fbf 	.word	0xffff8fbf
 8002c3c:	00000404 	.word	0x00000404
 8002c40:	00000406 	.word	0x00000406
 8002c44:	ffff83ff 	.word	0xffff83ff
 8002c48:	ffff8000 	.word	0xffff8000
 8002c4c:	ffffc080 	.word	0xffffc080
 8002c50:	ffffbf8f 	.word	0xffffbf8f
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	18d3      	adds	r3, r2, r3
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	4aa9      	ldr	r2, [pc, #676]	; (8002f08 <USB_ActivateEndpoint+0x5d0>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	b29c      	uxth	r4, r3
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	18d3      	adds	r3, r2, r3
 8002c72:	4aa6      	ldr	r2, [pc, #664]	; (8002f0c <USB_ActivateEndpoint+0x5d4>)
 8002c74:	4322      	orrs	r2, r4
 8002c76:	b292      	uxth	r2, r2
 8002c78:	801a      	strh	r2, [r3, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002c7a:	687c      	ldr	r4, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2250      	movs	r2, #80	; 0x50
 8002c80:	5a9b      	ldrh	r3, [r3, r2]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	18e4      	adds	r4, r4, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	18e3      	adds	r3, r4, r3
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	00d2      	lsls	r2, r2, #3
 8002c92:	4694      	mov	ip, r2
 8002c94:	4463      	add	r3, ip
 8002c96:	001c      	movs	r4, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	891b      	ldrh	r3, [r3, #8]
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	18db      	adds	r3, r3, r3
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	8023      	strh	r3, [r4, #0]
 8002ca6:	687c      	ldr	r4, [r7, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2250      	movs	r2, #80	; 0x50
 8002cac:	5a9b      	ldrh	r3, [r3, r2]
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	18e4      	adds	r4, r4, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	18e3      	adds	r3, r4, r3
 8002cba:	4a95      	ldr	r2, [pc, #596]	; (8002f10 <USB_ActivateEndpoint+0x5d8>)
 8002cbc:	4694      	mov	ip, r2
 8002cbe:	4463      	add	r3, ip
 8002cc0:	001c      	movs	r4, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	895b      	ldrh	r3, [r3, #10]
 8002cc6:	085b      	lsrs	r3, r3, #1
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	18db      	adds	r3, r3, r3
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	785b      	ldrb	r3, [r3, #1]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d000      	beq.n	8002cda <USB_ActivateEndpoint+0x3a2>
 8002cd8:	e07e      	b.n	8002dd8 <USB_ActivateEndpoint+0x4a0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	18d3      	adds	r3, r2, r3
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	b29c      	uxth	r4, r3
 8002ce8:	0022      	movs	r2, r4
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	01db      	lsls	r3, r3, #7
 8002cee:	4013      	ands	r3, r2
 8002cf0:	d012      	beq.n	8002d18 <USB_ActivateEndpoint+0x3e0>
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	18d3      	adds	r3, r2, r3
 8002cfc:	881b      	ldrh	r3, [r3, #0]
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4a81      	ldr	r2, [pc, #516]	; (8002f08 <USB_ActivateEndpoint+0x5d0>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29c      	uxth	r4, r3
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	18d3      	adds	r3, r2, r3
 8002d10:	4a80      	ldr	r2, [pc, #512]	; (8002f14 <USB_ActivateEndpoint+0x5dc>)
 8002d12:	4322      	orrs	r2, r4
 8002d14:	b292      	uxth	r2, r2
 8002d16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	18d3      	adds	r3, r2, r3
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	b29c      	uxth	r4, r3
 8002d26:	0022      	movs	r2, r4
 8002d28:	2340      	movs	r3, #64	; 0x40
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d012      	beq.n	8002d54 <USB_ActivateEndpoint+0x41c>
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	18d3      	adds	r3, r2, r3
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4a72      	ldr	r2, [pc, #456]	; (8002f08 <USB_ActivateEndpoint+0x5d0>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	b29c      	uxth	r4, r3
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	18d3      	adds	r3, r2, r3
 8002d4c:	4a72      	ldr	r2, [pc, #456]	; (8002f18 <USB_ActivateEndpoint+0x5e0>)
 8002d4e:	4322      	orrs	r2, r4
 8002d50:	b292      	uxth	r2, r2
 8002d52:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	18d3      	adds	r3, r2, r3
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4a69      	ldr	r2, [pc, #420]	; (8002f08 <USB_ActivateEndpoint+0x5d0>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	b29c      	uxth	r4, r3
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	18d3      	adds	r3, r2, r3
 8002d72:	4a69      	ldr	r2, [pc, #420]	; (8002f18 <USB_ActivateEndpoint+0x5e0>)
 8002d74:	4322      	orrs	r2, r4
 8002d76:	b292      	uxth	r2, r2
 8002d78:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	18d3      	adds	r3, r2, r3
 8002d84:	881b      	ldrh	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4a64      	ldr	r2, [pc, #400]	; (8002f1c <USB_ActivateEndpoint+0x5e4>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	b29c      	uxth	r4, r3
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	015b      	lsls	r3, r3, #5
 8002d92:	4063      	eors	r3, r4
 8002d94:	b29c      	uxth	r4, r3
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	4063      	eors	r3, r4
 8002d9c:	b29c      	uxth	r4, r3
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	18d3      	adds	r3, r2, r3
 8002da8:	4a5d      	ldr	r2, [pc, #372]	; (8002f20 <USB_ActivateEndpoint+0x5e8>)
 8002daa:	4322      	orrs	r2, r4
 8002dac:	b292      	uxth	r2, r2
 8002dae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	18d3      	adds	r3, r2, r3
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4a59      	ldr	r2, [pc, #356]	; (8002f24 <USB_ActivateEndpoint+0x5ec>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	b29c      	uxth	r4, r3
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	18d3      	adds	r3, r2, r3
 8002dce:	4a54      	ldr	r2, [pc, #336]	; (8002f20 <USB_ActivateEndpoint+0x5e8>)
 8002dd0:	4322      	orrs	r2, r4
 8002dd2:	b292      	uxth	r2, r2
 8002dd4:	801a      	strh	r2, [r3, #0]
 8002dd6:	e090      	b.n	8002efa <USB_ActivateEndpoint+0x5c2>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	18d3      	adds	r3, r2, r3
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b29c      	uxth	r4, r3
 8002de6:	0022      	movs	r2, r4
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	01db      	lsls	r3, r3, #7
 8002dec:	4013      	ands	r3, r2
 8002dee:	d012      	beq.n	8002e16 <USB_ActivateEndpoint+0x4de>
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	18d3      	adds	r3, r2, r3
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	4a42      	ldr	r2, [pc, #264]	; (8002f08 <USB_ActivateEndpoint+0x5d0>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	b29c      	uxth	r4, r3
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	18d3      	adds	r3, r2, r3
 8002e0e:	4a41      	ldr	r2, [pc, #260]	; (8002f14 <USB_ActivateEndpoint+0x5dc>)
 8002e10:	4322      	orrs	r2, r4
 8002e12:	b292      	uxth	r2, r2
 8002e14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	18d3      	adds	r3, r2, r3
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	b29c      	uxth	r4, r3
 8002e24:	0022      	movs	r2, r4
 8002e26:	2340      	movs	r3, #64	; 0x40
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d012      	beq.n	8002e52 <USB_ActivateEndpoint+0x51a>
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	18d3      	adds	r3, r2, r3
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	4a33      	ldr	r2, [pc, #204]	; (8002f08 <USB_ActivateEndpoint+0x5d0>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29c      	uxth	r4, r3
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	18d3      	adds	r3, r2, r3
 8002e4a:	4a33      	ldr	r2, [pc, #204]	; (8002f18 <USB_ActivateEndpoint+0x5e0>)
 8002e4c:	4322      	orrs	r2, r4
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	18d3      	adds	r3, r2, r3
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <USB_ActivateEndpoint+0x5d0>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	b29c      	uxth	r4, r3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	18d3      	adds	r3, r2, r3
 8002e70:	4a28      	ldr	r2, [pc, #160]	; (8002f14 <USB_ActivateEndpoint+0x5dc>)
 8002e72:	4322      	orrs	r2, r4
 8002e74:	b292      	uxth	r2, r2
 8002e76:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d016      	beq.n	8002eae <USB_ActivateEndpoint+0x576>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	18d3      	adds	r3, r2, r3
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	4a25      	ldr	r2, [pc, #148]	; (8002f24 <USB_ActivateEndpoint+0x5ec>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	b29c      	uxth	r4, r3
 8002e94:	2320      	movs	r3, #32
 8002e96:	4063      	eors	r3, r4
 8002e98:	b29c      	uxth	r4, r3
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	18d3      	adds	r3, r2, r3
 8002ea4:	4a1e      	ldr	r2, [pc, #120]	; (8002f20 <USB_ActivateEndpoint+0x5e8>)
 8002ea6:	4322      	orrs	r2, r4
 8002ea8:	b292      	uxth	r2, r2
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	e012      	b.n	8002ed4 <USB_ActivateEndpoint+0x59c>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	18d3      	adds	r3, r2, r3
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	4a19      	ldr	r2, [pc, #100]	; (8002f24 <USB_ActivateEndpoint+0x5ec>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b29c      	uxth	r4, r3
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	18d3      	adds	r3, r2, r3
 8002ecc:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <USB_ActivateEndpoint+0x5e8>)
 8002ece:	4322      	orrs	r2, r4
 8002ed0:	b292      	uxth	r2, r2
 8002ed2:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	18d3      	adds	r3, r2, r3
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <USB_ActivateEndpoint+0x5e4>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b29c      	uxth	r4, r3
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	18d3      	adds	r3, r2, r3
 8002ef2:	4a0b      	ldr	r2, [pc, #44]	; (8002f20 <USB_ActivateEndpoint+0x5e8>)
 8002ef4:	4322      	orrs	r2, r4
 8002ef6:	b292      	uxth	r2, r2
 8002ef8:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8002efa:	2317      	movs	r3, #23
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	781b      	ldrb	r3, [r3, #0]
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b007      	add	sp, #28
 8002f06:	bd90      	pop	{r4, r7, pc}
 8002f08:	ffff8f8f 	.word	0xffff8f8f
 8002f0c:	ffff8180 	.word	0xffff8180
 8002f10:	00000404 	.word	0x00000404
 8002f14:	ffffc080 	.word	0xffffc080
 8002f18:	ffff80c0 	.word	0xffff80c0
 8002f1c:	ffffbf8f 	.word	0xffffbf8f
 8002f20:	ffff8080 	.word	0xffff8080
 8002f24:	ffff8fbf 	.word	0xffff8fbf

08002f28 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	7b1b      	ldrb	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d168      	bne.n	800300c <USB_DeactivateEndpoint+0xe4>
  {
    if (ep->is_in != 0U)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	785b      	ldrb	r3, [r3, #1]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d031      	beq.n	8002fa6 <USB_DeactivateEndpoint+0x7e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	18d3      	adds	r3, r2, r3
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	b29c      	uxth	r4, r3
 8002f50:	0022      	movs	r2, r4
 8002f52:	2340      	movs	r3, #64	; 0x40
 8002f54:	4013      	ands	r3, r2
 8002f56:	d012      	beq.n	8002f7e <USB_DeactivateEndpoint+0x56>
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	18d3      	adds	r3, r2, r3
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	4aa5      	ldr	r2, [pc, #660]	; (80031fc <USB_DeactivateEndpoint+0x2d4>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	b29c      	uxth	r4, r3
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	18d3      	adds	r3, r2, r3
 8002f76:	4aa2      	ldr	r2, [pc, #648]	; (8003200 <USB_DeactivateEndpoint+0x2d8>)
 8002f78:	4322      	orrs	r2, r4
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	18d3      	adds	r3, r2, r3
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	4a9d      	ldr	r2, [pc, #628]	; (8003204 <USB_DeactivateEndpoint+0x2dc>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	b29c      	uxth	r4, r3
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	18d3      	adds	r3, r2, r3
 8002f9c:	4a9a      	ldr	r2, [pc, #616]	; (8003208 <USB_DeactivateEndpoint+0x2e0>)
 8002f9e:	4322      	orrs	r2, r4
 8002fa0:	b292      	uxth	r2, r2
 8002fa2:	801a      	strh	r2, [r3, #0]
 8002fa4:	e124      	b.n	80031f0 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	18d3      	adds	r3, r2, r3
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b29c      	uxth	r4, r3
 8002fb4:	0022      	movs	r2, r4
 8002fb6:	2380      	movs	r3, #128	; 0x80
 8002fb8:	01db      	lsls	r3, r3, #7
 8002fba:	4013      	ands	r3, r2
 8002fbc:	d012      	beq.n	8002fe4 <USB_DeactivateEndpoint+0xbc>
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	18d3      	adds	r3, r2, r3
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4a8b      	ldr	r2, [pc, #556]	; (80031fc <USB_DeactivateEndpoint+0x2d4>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	b29c      	uxth	r4, r3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	18d3      	adds	r3, r2, r3
 8002fdc:	4a8b      	ldr	r2, [pc, #556]	; (800320c <USB_DeactivateEndpoint+0x2e4>)
 8002fde:	4322      	orrs	r2, r4
 8002fe0:	b292      	uxth	r2, r2
 8002fe2:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	18d3      	adds	r3, r2, r3
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	4a87      	ldr	r2, [pc, #540]	; (8003210 <USB_DeactivateEndpoint+0x2e8>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	b29c      	uxth	r4, r3
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	18d3      	adds	r3, r2, r3
 8003002:	4a81      	ldr	r2, [pc, #516]	; (8003208 <USB_DeactivateEndpoint+0x2e0>)
 8003004:	4322      	orrs	r2, r4
 8003006:	b292      	uxth	r2, r2
 8003008:	801a      	strh	r2, [r3, #0]
 800300a:	e0f1      	b.n	80031f0 <USB_DeactivateEndpoint+0x2c8>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	785b      	ldrb	r3, [r3, #1]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d000      	beq.n	8003016 <USB_DeactivateEndpoint+0xee>
 8003014:	e076      	b.n	8003104 <USB_DeactivateEndpoint+0x1dc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	18d3      	adds	r3, r2, r3
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	b29c      	uxth	r4, r3
 8003024:	0022      	movs	r2, r4
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	01db      	lsls	r3, r3, #7
 800302a:	4013      	ands	r3, r2
 800302c:	d012      	beq.n	8003054 <USB_DeactivateEndpoint+0x12c>
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	18d3      	adds	r3, r2, r3
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	4a6f      	ldr	r2, [pc, #444]	; (80031fc <USB_DeactivateEndpoint+0x2d4>)
 800303e:	4013      	ands	r3, r2
 8003040:	b29c      	uxth	r4, r3
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	18d3      	adds	r3, r2, r3
 800304c:	4a6f      	ldr	r2, [pc, #444]	; (800320c <USB_DeactivateEndpoint+0x2e4>)
 800304e:	4322      	orrs	r2, r4
 8003050:	b292      	uxth	r2, r2
 8003052:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	18d3      	adds	r3, r2, r3
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	b29c      	uxth	r4, r3
 8003062:	0022      	movs	r2, r4
 8003064:	2340      	movs	r3, #64	; 0x40
 8003066:	4013      	ands	r3, r2
 8003068:	d012      	beq.n	8003090 <USB_DeactivateEndpoint+0x168>
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	18d3      	adds	r3, r2, r3
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	4a60      	ldr	r2, [pc, #384]	; (80031fc <USB_DeactivateEndpoint+0x2d4>)
 800307a:	4013      	ands	r3, r2
 800307c:	b29c      	uxth	r4, r3
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	18d3      	adds	r3, r2, r3
 8003088:	4a5d      	ldr	r2, [pc, #372]	; (8003200 <USB_DeactivateEndpoint+0x2d8>)
 800308a:	4322      	orrs	r2, r4
 800308c:	b292      	uxth	r2, r2
 800308e:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	18d3      	adds	r3, r2, r3
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	b29b      	uxth	r3, r3
 800309e:	4a57      	ldr	r2, [pc, #348]	; (80031fc <USB_DeactivateEndpoint+0x2d4>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29c      	uxth	r4, r3
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	18d3      	adds	r3, r2, r3
 80030ae:	4a54      	ldr	r2, [pc, #336]	; (8003200 <USB_DeactivateEndpoint+0x2d8>)
 80030b0:	4322      	orrs	r2, r4
 80030b2:	b292      	uxth	r2, r2
 80030b4:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	18d3      	adds	r3, r2, r3
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	4a52      	ldr	r2, [pc, #328]	; (8003210 <USB_DeactivateEndpoint+0x2e8>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	b29c      	uxth	r4, r3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	18d3      	adds	r3, r2, r3
 80030d4:	4a4c      	ldr	r2, [pc, #304]	; (8003208 <USB_DeactivateEndpoint+0x2e0>)
 80030d6:	4322      	orrs	r2, r4
 80030d8:	b292      	uxth	r2, r2
 80030da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	18d3      	adds	r3, r2, r3
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	4a46      	ldr	r2, [pc, #280]	; (8003204 <USB_DeactivateEndpoint+0x2dc>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	b29c      	uxth	r4, r3
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	18d3      	adds	r3, r2, r3
 80030fa:	4a43      	ldr	r2, [pc, #268]	; (8003208 <USB_DeactivateEndpoint+0x2e0>)
 80030fc:	4322      	orrs	r2, r4
 80030fe:	b292      	uxth	r2, r2
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	e075      	b.n	80031f0 <USB_DeactivateEndpoint+0x2c8>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	18d3      	adds	r3, r2, r3
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29c      	uxth	r4, r3
 8003112:	0022      	movs	r2, r4
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	01db      	lsls	r3, r3, #7
 8003118:	4013      	ands	r3, r2
 800311a:	d012      	beq.n	8003142 <USB_DeactivateEndpoint+0x21a>
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	18d3      	adds	r3, r2, r3
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	4a34      	ldr	r2, [pc, #208]	; (80031fc <USB_DeactivateEndpoint+0x2d4>)
 800312c:	4013      	ands	r3, r2
 800312e:	b29c      	uxth	r4, r3
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	18d3      	adds	r3, r2, r3
 800313a:	4a34      	ldr	r2, [pc, #208]	; (800320c <USB_DeactivateEndpoint+0x2e4>)
 800313c:	4322      	orrs	r2, r4
 800313e:	b292      	uxth	r2, r2
 8003140:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	18d3      	adds	r3, r2, r3
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29c      	uxth	r4, r3
 8003150:	0022      	movs	r2, r4
 8003152:	2340      	movs	r3, #64	; 0x40
 8003154:	4013      	ands	r3, r2
 8003156:	d012      	beq.n	800317e <USB_DeactivateEndpoint+0x256>
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	18d3      	adds	r3, r2, r3
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
 8003166:	4a25      	ldr	r2, [pc, #148]	; (80031fc <USB_DeactivateEndpoint+0x2d4>)
 8003168:	4013      	ands	r3, r2
 800316a:	b29c      	uxth	r4, r3
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	18d3      	adds	r3, r2, r3
 8003176:	4a22      	ldr	r2, [pc, #136]	; (8003200 <USB_DeactivateEndpoint+0x2d8>)
 8003178:	4322      	orrs	r2, r4
 800317a:	b292      	uxth	r2, r2
 800317c:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	18d3      	adds	r3, r2, r3
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <USB_DeactivateEndpoint+0x2d4>)
 800318e:	4013      	ands	r3, r2
 8003190:	b29c      	uxth	r4, r3
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	18d3      	adds	r3, r2, r3
 800319c:	4a1b      	ldr	r2, [pc, #108]	; (800320c <USB_DeactivateEndpoint+0x2e4>)
 800319e:	4322      	orrs	r2, r4
 80031a0:	b292      	uxth	r2, r2
 80031a2:	801a      	strh	r2, [r3, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	18d3      	adds	r3, r2, r3
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	4a14      	ldr	r2, [pc, #80]	; (8003204 <USB_DeactivateEndpoint+0x2dc>)
 80031b4:	4013      	ands	r3, r2
 80031b6:	b29c      	uxth	r4, r3
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	18d3      	adds	r3, r2, r3
 80031c2:	4a11      	ldr	r2, [pc, #68]	; (8003208 <USB_DeactivateEndpoint+0x2e0>)
 80031c4:	4322      	orrs	r2, r4
 80031c6:	b292      	uxth	r2, r2
 80031c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	18d3      	adds	r3, r2, r3
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4a0d      	ldr	r2, [pc, #52]	; (8003210 <USB_DeactivateEndpoint+0x2e8>)
 80031da:	4013      	ands	r3, r2
 80031dc:	b29c      	uxth	r4, r3
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	18d3      	adds	r3, r2, r3
 80031e8:	4a07      	ldr	r2, [pc, #28]	; (8003208 <USB_DeactivateEndpoint+0x2e0>)
 80031ea:	4322      	orrs	r2, r4
 80031ec:	b292      	uxth	r2, r2
 80031ee:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b003      	add	sp, #12
 80031f8:	bd90      	pop	{r4, r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	ffff8f8f 	.word	0xffff8f8f
 8003200:	ffff80c0 	.word	0xffff80c0
 8003204:	ffff8fbf 	.word	0xffff8fbf
 8003208:	ffff8080 	.word	0xffff8080
 800320c:	ffffc080 	.word	0xffffc080
 8003210:	ffffbf8f 	.word	0xffffbf8f

08003214 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b095      	sub	sp, #84	; 0x54
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d000      	beq.n	8003228 <USB_EPStartXfer+0x14>
 8003226:	e163      	b.n	80034f0 <USB_EPStartXfer+0x2dc>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	429a      	cmp	r2, r3
 8003232:	d909      	bls.n	8003248 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003240:	1ad2      	subs	r2, r2, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	619a      	str	r2, [r3, #24]
 8003246:	e005      	b.n	8003254 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2200      	movs	r2, #0
 8003252:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	7b1b      	ldrb	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d11b      	bne.n	8003294 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	6959      	ldr	r1, [r3, #20]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	88da      	ldrh	r2, [r3, #6]
 8003264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003266:	b29b      	uxth	r3, r3
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fbbb 	bl	80039e4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800326e:	687c      	ldr	r4, [r7, #4]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2250      	movs	r2, #80	; 0x50
 8003274:	5a9b      	ldrh	r3, [r3, r2]
 8003276:	b29b      	uxth	r3, r3
 8003278:	18e4      	adds	r4, r4, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	18e3      	adds	r3, r4, r3
 8003282:	4acc      	ldr	r2, [pc, #816]	; (80035b4 <USB_EPStartXfer+0x3a0>)
 8003284:	4694      	mov	ip, r2
 8003286:	4463      	add	r3, ip
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	801a      	strh	r2, [r3, #0]
 8003292:	e113      	b.n	80034bc <USB_EPStartXfer+0x2a8>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	18d3      	adds	r3, r2, r3
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	001a      	movs	r2, r3
 80032a4:	2340      	movs	r3, #64	; 0x40
 80032a6:	4013      	ands	r3, r2
 80032a8:	d067      	beq.n	800337a <USB_EPStartXfer+0x166>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80032aa:	687c      	ldr	r4, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	785b      	ldrb	r3, [r3, #1]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d147      	bne.n	8003344 <USB_EPStartXfer+0x130>
 80032b4:	687c      	ldr	r4, [r7, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2250      	movs	r2, #80	; 0x50
 80032ba:	5a9b      	ldrh	r3, [r3, r2]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	18e4      	adds	r4, r4, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	18e3      	adds	r3, r4, r3
 80032c8:	4abb      	ldr	r2, [pc, #748]	; (80035b8 <USB_EPStartXfer+0x3a4>)
 80032ca:	4694      	mov	ip, r2
 80032cc:	4463      	add	r3, ip
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10e      	bne.n	80032f4 <USB_EPStartXfer+0xe0>
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	4ab8      	ldr	r2, [pc, #736]	; (80035bc <USB_EPStartXfer+0x3a8>)
 80032dc:	4013      	ands	r3, r2
 80032de:	b29a      	uxth	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	801a      	strh	r2, [r3, #0]
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	4ab5      	ldr	r2, [pc, #724]	; (80035c0 <USB_EPStartXfer+0x3ac>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	801a      	strh	r2, [r3, #0]
 80032f2:	e03c      	b.n	800336e <USB_EPStartXfer+0x15a>
 80032f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f6:	2b3e      	cmp	r3, #62	; 0x3e
 80032f8:	d810      	bhi.n	800331c <USB_EPStartXfer+0x108>
 80032fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	647b      	str	r3, [r7, #68]	; 0x44
 8003300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003302:	2201      	movs	r2, #1
 8003304:	4013      	ands	r3, r2
 8003306:	d002      	beq.n	800330e <USB_EPStartXfer+0xfa>
 8003308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800330a:	3301      	adds	r3, #1
 800330c:	647b      	str	r3, [r7, #68]	; 0x44
 800330e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003310:	b29b      	uxth	r3, r3
 8003312:	029b      	lsls	r3, r3, #10
 8003314:	b29a      	uxth	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	801a      	strh	r2, [r3, #0]
 800331a:	e028      	b.n	800336e <USB_EPStartXfer+0x15a>
 800331c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	647b      	str	r3, [r7, #68]	; 0x44
 8003322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003324:	221f      	movs	r2, #31
 8003326:	4013      	ands	r3, r2
 8003328:	d102      	bne.n	8003330 <USB_EPStartXfer+0x11c>
 800332a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800332c:	3b01      	subs	r3, #1
 800332e:	647b      	str	r3, [r7, #68]	; 0x44
 8003330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003332:	b29b      	uxth	r3, r3
 8003334:	029b      	lsls	r3, r3, #10
 8003336:	b29b      	uxth	r3, r3
 8003338:	4aa1      	ldr	r2, [pc, #644]	; (80035c0 <USB_EPStartXfer+0x3ac>)
 800333a:	4313      	orrs	r3, r2
 800333c:	b29a      	uxth	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	e014      	b.n	800336e <USB_EPStartXfer+0x15a>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	785b      	ldrb	r3, [r3, #1]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d110      	bne.n	800336e <USB_EPStartXfer+0x15a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2250      	movs	r2, #80	; 0x50
 8003350:	5a9b      	ldrh	r3, [r3, r2]
 8003352:	b29b      	uxth	r3, r3
 8003354:	18e4      	adds	r4, r4, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	18e3      	adds	r3, r4, r3
 800335e:	4a96      	ldr	r2, [pc, #600]	; (80035b8 <USB_EPStartXfer+0x3a4>)
 8003360:	4694      	mov	ip, r2
 8003362:	4463      	add	r3, ip
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003368:	b29a      	uxth	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800336e:	234e      	movs	r3, #78	; 0x4e
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	8952      	ldrh	r2, [r2, #10]
 8003376:	801a      	strh	r2, [r3, #0]
 8003378:	e066      	b.n	8003448 <USB_EPStartXfer+0x234>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	785b      	ldrb	r3, [r3, #1]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d147      	bne.n	8003412 <USB_EPStartXfer+0x1fe>
 8003382:	687c      	ldr	r4, [r7, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2250      	movs	r2, #80	; 0x50
 8003388:	5a9b      	ldrh	r3, [r3, r2]
 800338a:	b29b      	uxth	r3, r3
 800338c:	18e4      	adds	r4, r4, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	18e3      	adds	r3, r4, r3
 8003396:	4a87      	ldr	r2, [pc, #540]	; (80035b4 <USB_EPStartXfer+0x3a0>)
 8003398:	4694      	mov	ip, r2
 800339a:	4463      	add	r3, ip
 800339c:	61bb      	str	r3, [r7, #24]
 800339e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10e      	bne.n	80033c2 <USB_EPStartXfer+0x1ae>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	4a84      	ldr	r2, [pc, #528]	; (80035bc <USB_EPStartXfer+0x3a8>)
 80033aa:	4013      	ands	r3, r2
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	801a      	strh	r2, [r3, #0]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	4a82      	ldr	r2, [pc, #520]	; (80035c0 <USB_EPStartXfer+0x3ac>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	801a      	strh	r2, [r3, #0]
 80033c0:	e03d      	b.n	800343e <USB_EPStartXfer+0x22a>
 80033c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c4:	2b3e      	cmp	r3, #62	; 0x3e
 80033c6:	d810      	bhi.n	80033ea <USB_EPStartXfer+0x1d6>
 80033c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	643b      	str	r3, [r7, #64]	; 0x40
 80033ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033d0:	2201      	movs	r2, #1
 80033d2:	4013      	ands	r3, r2
 80033d4:	d002      	beq.n	80033dc <USB_EPStartXfer+0x1c8>
 80033d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033d8:	3301      	adds	r3, #1
 80033da:	643b      	str	r3, [r7, #64]	; 0x40
 80033dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033de:	b29b      	uxth	r3, r3
 80033e0:	029b      	lsls	r3, r3, #10
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	801a      	strh	r2, [r3, #0]
 80033e8:	e029      	b.n	800343e <USB_EPStartXfer+0x22a>
 80033ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ec:	095b      	lsrs	r3, r3, #5
 80033ee:	643b      	str	r3, [r7, #64]	; 0x40
 80033f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f2:	221f      	movs	r2, #31
 80033f4:	4013      	ands	r3, r2
 80033f6:	d102      	bne.n	80033fe <USB_EPStartXfer+0x1ea>
 80033f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fa:	3b01      	subs	r3, #1
 80033fc:	643b      	str	r3, [r7, #64]	; 0x40
 80033fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003400:	b29b      	uxth	r3, r3
 8003402:	029b      	lsls	r3, r3, #10
 8003404:	b29b      	uxth	r3, r3
 8003406:	4a6e      	ldr	r2, [pc, #440]	; (80035c0 <USB_EPStartXfer+0x3ac>)
 8003408:	4313      	orrs	r3, r2
 800340a:	b29a      	uxth	r2, r3
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	801a      	strh	r2, [r3, #0]
 8003410:	e015      	b.n	800343e <USB_EPStartXfer+0x22a>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	785b      	ldrb	r3, [r3, #1]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d111      	bne.n	800343e <USB_EPStartXfer+0x22a>
 800341a:	687c      	ldr	r4, [r7, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2250      	movs	r2, #80	; 0x50
 8003420:	5a9b      	ldrh	r3, [r3, r2]
 8003422:	b29b      	uxth	r3, r3
 8003424:	18e4      	adds	r4, r4, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	18e3      	adds	r3, r4, r3
 800342e:	4a61      	ldr	r2, [pc, #388]	; (80035b4 <USB_EPStartXfer+0x3a0>)
 8003430:	4694      	mov	ip, r2
 8003432:	4463      	add	r3, ip
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003438:	b29a      	uxth	r2, r3
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 800343e:	234e      	movs	r3, #78	; 0x4e
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	8912      	ldrh	r2, [r2, #8]
 8003446:	801a      	strh	r2, [r3, #0]
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	6959      	ldr	r1, [r3, #20]
 800344c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800344e:	b29c      	uxth	r4, r3
 8003450:	234e      	movs	r3, #78	; 0x4e
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	881a      	ldrh	r2, [r3, #0]
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	0023      	movs	r3, r4
 800345a:	f000 fac3 	bl	80039e4 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	785b      	ldrb	r3, [r3, #1]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d113      	bne.n	800348e <USB_EPStartXfer+0x27a>
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	18d3      	adds	r3, r2, r3
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	4a53      	ldr	r2, [pc, #332]	; (80035c4 <USB_EPStartXfer+0x3b0>)
 8003476:	4013      	ands	r3, r2
 8003478:	b29c      	uxth	r4, r3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	18d3      	adds	r3, r2, r3
 8003484:	4a50      	ldr	r2, [pc, #320]	; (80035c8 <USB_EPStartXfer+0x3b4>)
 8003486:	4322      	orrs	r2, r4
 8003488:	b292      	uxth	r2, r2
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	e016      	b.n	80034bc <USB_EPStartXfer+0x2a8>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	785b      	ldrb	r3, [r3, #1]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d112      	bne.n	80034bc <USB_EPStartXfer+0x2a8>
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	18d3      	adds	r3, r2, r3
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	4a47      	ldr	r2, [pc, #284]	; (80035c4 <USB_EPStartXfer+0x3b0>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	b29c      	uxth	r4, r3
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	18d3      	adds	r3, r2, r3
 80034b4:	4a45      	ldr	r2, [pc, #276]	; (80035cc <USB_EPStartXfer+0x3b8>)
 80034b6:	4322      	orrs	r2, r4
 80034b8:	b292      	uxth	r2, r2
 80034ba:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	18d3      	adds	r3, r2, r3
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	4a41      	ldr	r2, [pc, #260]	; (80035d0 <USB_EPStartXfer+0x3bc>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	b29c      	uxth	r4, r3
 80034d0:	2310      	movs	r3, #16
 80034d2:	4063      	eors	r3, r4
 80034d4:	b29c      	uxth	r4, r3
 80034d6:	2320      	movs	r3, #32
 80034d8:	4063      	eors	r3, r4
 80034da:	b29c      	uxth	r4, r3
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	18d3      	adds	r3, r2, r3
 80034e6:	4a3b      	ldr	r2, [pc, #236]	; (80035d4 <USB_EPStartXfer+0x3c0>)
 80034e8:	4322      	orrs	r2, r4
 80034ea:	b292      	uxth	r2, r2
 80034ec:	801a      	strh	r2, [r3, #0]
 80034ee:	e152      	b.n	8003796 <USB_EPStartXfer+0x582>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	699a      	ldr	r2, [r3, #24]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d909      	bls.n	8003510 <USB_EPStartXfer+0x2fc>
    {
      len = ep->maxpacket;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003508:	1ad2      	subs	r2, r2, r3
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	619a      	str	r2, [r3, #24]
 800350e:	e005      	b.n	800351c <USB_EPStartXfer+0x308>
    }
    else
    {
      len = ep->xfer_len;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2200      	movs	r2, #0
 800351a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	7b1b      	ldrb	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d159      	bne.n	80035d8 <USB_EPStartXfer+0x3c4>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003524:	687c      	ldr	r4, [r7, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2250      	movs	r2, #80	; 0x50
 800352a:	5a9b      	ldrh	r3, [r3, r2]
 800352c:	b29b      	uxth	r3, r3
 800352e:	18e4      	adds	r4, r4, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	18e3      	adds	r3, r4, r3
 8003538:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <USB_EPStartXfer+0x3a4>)
 800353a:	4694      	mov	ip, r2
 800353c:	4463      	add	r3, ip
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10e      	bne.n	8003564 <USB_EPStartXfer+0x350>
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	4a1c      	ldr	r2, [pc, #112]	; (80035bc <USB_EPStartXfer+0x3a8>)
 800354c:	4013      	ands	r3, r2
 800354e:	b29a      	uxth	r2, r3
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	801a      	strh	r2, [r3, #0]
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <USB_EPStartXfer+0x3ac>)
 800355a:	4313      	orrs	r3, r2
 800355c:	b29a      	uxth	r2, r3
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	801a      	strh	r2, [r3, #0]
 8003562:	e0fd      	b.n	8003760 <USB_EPStartXfer+0x54c>
 8003564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003566:	2b3e      	cmp	r3, #62	; 0x3e
 8003568:	d810      	bhi.n	800358c <USB_EPStartXfer+0x378>
 800356a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003572:	2201      	movs	r2, #1
 8003574:	4013      	ands	r3, r2
 8003576:	d002      	beq.n	800357e <USB_EPStartXfer+0x36a>
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	3301      	adds	r3, #1
 800357c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003580:	b29b      	uxth	r3, r3
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	b29a      	uxth	r2, r3
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	801a      	strh	r2, [r3, #0]
 800358a:	e0e9      	b.n	8003760 <USB_EPStartXfer+0x54c>
 800358c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003594:	221f      	movs	r2, #31
 8003596:	4013      	ands	r3, r2
 8003598:	d102      	bne.n	80035a0 <USB_EPStartXfer+0x38c>
 800359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800359c:	3b01      	subs	r3, #1
 800359e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	029b      	lsls	r3, r3, #10
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	4a05      	ldr	r2, [pc, #20]	; (80035c0 <USB_EPStartXfer+0x3ac>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	801a      	strh	r2, [r3, #0]
 80035b2:	e0d5      	b.n	8003760 <USB_EPStartXfer+0x54c>
 80035b4:	00000402 	.word	0x00000402
 80035b8:	00000406 	.word	0x00000406
 80035bc:	ffff83ff 	.word	0xffff83ff
 80035c0:	ffff8000 	.word	0xffff8000
 80035c4:	ffff8f8f 	.word	0xffff8f8f
 80035c8:	ffff80c0 	.word	0xffff80c0
 80035cc:	ffffc080 	.word	0xffffc080
 80035d0:	ffff8fbf 	.word	0xffff8fbf
 80035d4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d147      	bne.n	8003670 <USB_EPStartXfer+0x45c>
 80035e0:	687c      	ldr	r4, [r7, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2250      	movs	r2, #80	; 0x50
 80035e6:	5a9b      	ldrh	r3, [r3, r2]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	18e4      	adds	r4, r4, r3
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	18e3      	adds	r3, r4, r3
 80035f4:	4a6a      	ldr	r2, [pc, #424]	; (80037a0 <USB_EPStartXfer+0x58c>)
 80035f6:	4694      	mov	ip, r2
 80035f8:	4463      	add	r3, ip
 80035fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10e      	bne.n	8003620 <USB_EPStartXfer+0x40c>
 8003602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	4a67      	ldr	r2, [pc, #412]	; (80037a4 <USB_EPStartXfer+0x590>)
 8003608:	4013      	ands	r3, r2
 800360a:	b29a      	uxth	r2, r3
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	801a      	strh	r2, [r3, #0]
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	4a64      	ldr	r2, [pc, #400]	; (80037a8 <USB_EPStartXfer+0x594>)
 8003616:	4313      	orrs	r3, r2
 8003618:	b29a      	uxth	r2, r3
 800361a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361c:	801a      	strh	r2, [r3, #0]
 800361e:	e03d      	b.n	800369c <USB_EPStartXfer+0x488>
 8003620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003622:	2b3e      	cmp	r3, #62	; 0x3e
 8003624:	d810      	bhi.n	8003648 <USB_EPStartXfer+0x434>
 8003626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003628:	085b      	lsrs	r3, r3, #1
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
 800362c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800362e:	2201      	movs	r2, #1
 8003630:	4013      	ands	r3, r2
 8003632:	d002      	beq.n	800363a <USB_EPStartXfer+0x426>
 8003634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003636:	3301      	adds	r3, #1
 8003638:	63bb      	str	r3, [r7, #56]	; 0x38
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	b29b      	uxth	r3, r3
 800363e:	029b      	lsls	r3, r3, #10
 8003640:	b29a      	uxth	r2, r3
 8003642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003644:	801a      	strh	r2, [r3, #0]
 8003646:	e029      	b.n	800369c <USB_EPStartXfer+0x488>
 8003648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	63bb      	str	r3, [r7, #56]	; 0x38
 800364e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003650:	221f      	movs	r2, #31
 8003652:	4013      	ands	r3, r2
 8003654:	d102      	bne.n	800365c <USB_EPStartXfer+0x448>
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	3b01      	subs	r3, #1
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	b29b      	uxth	r3, r3
 8003660:	029b      	lsls	r3, r3, #10
 8003662:	b29b      	uxth	r3, r3
 8003664:	4a50      	ldr	r2, [pc, #320]	; (80037a8 <USB_EPStartXfer+0x594>)
 8003666:	4313      	orrs	r3, r2
 8003668:	b29a      	uxth	r2, r3
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	e015      	b.n	800369c <USB_EPStartXfer+0x488>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d111      	bne.n	800369c <USB_EPStartXfer+0x488>
 8003678:	687c      	ldr	r4, [r7, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2250      	movs	r2, #80	; 0x50
 800367e:	5a9b      	ldrh	r3, [r3, r2]
 8003680:	b29b      	uxth	r3, r3
 8003682:	18e4      	adds	r4, r4, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	18e3      	adds	r3, r4, r3
 800368c:	4a44      	ldr	r2, [pc, #272]	; (80037a0 <USB_EPStartXfer+0x58c>)
 800368e:	4694      	mov	ip, r2
 8003690:	4463      	add	r3, ip
 8003692:	633b      	str	r3, [r7, #48]	; 0x30
 8003694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003696:	b29a      	uxth	r2, r3
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	801a      	strh	r2, [r3, #0]
 800369c:	687c      	ldr	r4, [r7, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	785b      	ldrb	r3, [r3, #1]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d147      	bne.n	8003736 <USB_EPStartXfer+0x522>
 80036a6:	687c      	ldr	r4, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2250      	movs	r2, #80	; 0x50
 80036ac:	5a9b      	ldrh	r3, [r3, r2]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	18e4      	adds	r4, r4, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	18e3      	adds	r3, r4, r3
 80036ba:	4a3c      	ldr	r2, [pc, #240]	; (80037ac <USB_EPStartXfer+0x598>)
 80036bc:	4694      	mov	ip, r2
 80036be:	4463      	add	r3, ip
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
 80036c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10e      	bne.n	80036e6 <USB_EPStartXfer+0x4d2>
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	4a35      	ldr	r2, [pc, #212]	; (80037a4 <USB_EPStartXfer+0x590>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	801a      	strh	r2, [r3, #0]
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	4a33      	ldr	r2, [pc, #204]	; (80037a8 <USB_EPStartXfer+0x594>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	b29a      	uxth	r2, r3
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	801a      	strh	r2, [r3, #0]
 80036e4:	e03c      	b.n	8003760 <USB_EPStartXfer+0x54c>
 80036e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036e8:	2b3e      	cmp	r3, #62	; 0x3e
 80036ea:	d810      	bhi.n	800370e <USB_EPStartXfer+0x4fa>
 80036ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ee:	085b      	lsrs	r3, r3, #1
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
 80036f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036f4:	2201      	movs	r2, #1
 80036f6:	4013      	ands	r3, r2
 80036f8:	d002      	beq.n	8003700 <USB_EPStartXfer+0x4ec>
 80036fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fc:	3301      	adds	r3, #1
 80036fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003702:	b29b      	uxth	r3, r3
 8003704:	029b      	lsls	r3, r3, #10
 8003706:	b29a      	uxth	r2, r3
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	801a      	strh	r2, [r3, #0]
 800370c:	e028      	b.n	8003760 <USB_EPStartXfer+0x54c>
 800370e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	637b      	str	r3, [r7, #52]	; 0x34
 8003714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003716:	221f      	movs	r2, #31
 8003718:	4013      	ands	r3, r2
 800371a:	d102      	bne.n	8003722 <USB_EPStartXfer+0x50e>
 800371c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371e:	3b01      	subs	r3, #1
 8003720:	637b      	str	r3, [r7, #52]	; 0x34
 8003722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003724:	b29b      	uxth	r3, r3
 8003726:	029b      	lsls	r3, r3, #10
 8003728:	b29b      	uxth	r3, r3
 800372a:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <USB_EPStartXfer+0x594>)
 800372c:	4313      	orrs	r3, r2
 800372e:	b29a      	uxth	r2, r3
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	801a      	strh	r2, [r3, #0]
 8003734:	e014      	b.n	8003760 <USB_EPStartXfer+0x54c>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d110      	bne.n	8003760 <USB_EPStartXfer+0x54c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2250      	movs	r2, #80	; 0x50
 8003742:	5a9b      	ldrh	r3, [r3, r2]
 8003744:	b29b      	uxth	r3, r3
 8003746:	18e4      	adds	r4, r4, r3
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	18e3      	adds	r3, r4, r3
 8003750:	4a16      	ldr	r2, [pc, #88]	; (80037ac <USB_EPStartXfer+0x598>)
 8003752:	4694      	mov	ip, r2
 8003754:	4463      	add	r3, ip
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28
 8003758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800375a:	b29a      	uxth	r2, r3
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	18d3      	adds	r3, r2, r3
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	4a10      	ldr	r2, [pc, #64]	; (80037b0 <USB_EPStartXfer+0x59c>)
 8003770:	4013      	ands	r3, r2
 8003772:	b29c      	uxth	r4, r3
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	015b      	lsls	r3, r3, #5
 8003778:	4063      	eors	r3, r4
 800377a:	b29c      	uxth	r4, r3
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	019b      	lsls	r3, r3, #6
 8003780:	4063      	eors	r3, r4
 8003782:	b29c      	uxth	r4, r3
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	18d3      	adds	r3, r2, r3
 800378e:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <USB_EPStartXfer+0x5a0>)
 8003790:	4322      	orrs	r2, r4
 8003792:	b292      	uxth	r2, r2
 8003794:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b015      	add	sp, #84	; 0x54
 800379e:	bd90      	pop	{r4, r7, pc}
 80037a0:	00000402 	.word	0x00000402
 80037a4:	ffff83ff 	.word	0xffff83ff
 80037a8:	ffff8000 	.word	0xffff8000
 80037ac:	00000406 	.word	0x00000406
 80037b0:	ffffbf8f 	.word	0xffffbf8f
 80037b4:	ffff8080 	.word	0xffff8080

080037b8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037b8:	b590      	push	{r4, r7, lr}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d016      	beq.n	80037f8 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	18d3      	adds	r3, r2, r3
 80037d4:	881b      	ldrh	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	4a15      	ldr	r2, [pc, #84]	; (8003830 <USB_EPSetStall+0x78>)
 80037da:	4013      	ands	r3, r2
 80037dc:	b29c      	uxth	r4, r3
 80037de:	2310      	movs	r3, #16
 80037e0:	4063      	eors	r3, r4
 80037e2:	b29c      	uxth	r4, r3
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	18d3      	adds	r3, r2, r3
 80037ee:	4a11      	ldr	r2, [pc, #68]	; (8003834 <USB_EPSetStall+0x7c>)
 80037f0:	4322      	orrs	r2, r4
 80037f2:	b292      	uxth	r2, r2
 80037f4:	801a      	strh	r2, [r3, #0]
 80037f6:	e016      	b.n	8003826 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	18d3      	adds	r3, r2, r3
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	4a0c      	ldr	r2, [pc, #48]	; (8003838 <USB_EPSetStall+0x80>)
 8003808:	4013      	ands	r3, r2
 800380a:	b29c      	uxth	r4, r3
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	015b      	lsls	r3, r3, #5
 8003810:	4063      	eors	r3, r4
 8003812:	b29c      	uxth	r4, r3
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	18d3      	adds	r3, r2, r3
 800381e:	4a05      	ldr	r2, [pc, #20]	; (8003834 <USB_EPSetStall+0x7c>)
 8003820:	4322      	orrs	r2, r4
 8003822:	b292      	uxth	r2, r2
 8003824:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	0018      	movs	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	b003      	add	sp, #12
 800382e:	bd90      	pop	{r4, r7, pc}
 8003830:	ffff8fbf 	.word	0xffff8fbf
 8003834:	ffff8080 	.word	0xffff8080
 8003838:	ffffbf8f 	.word	0xffffbf8f

0800383c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	7b1b      	ldrb	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d000      	beq.n	8003850 <USB_EPClearStall+0x14>
 800384e:	e076      	b.n	800393e <USB_EPClearStall+0x102>
  {
    if (ep->is_in != 0U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	785b      	ldrb	r3, [r3, #1]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d038      	beq.n	80038ca <USB_EPClearStall+0x8e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	18d3      	adds	r3, r2, r3
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29c      	uxth	r4, r3
 8003866:	0022      	movs	r2, r4
 8003868:	2340      	movs	r3, #64	; 0x40
 800386a:	4013      	ands	r3, r2
 800386c:	d012      	beq.n	8003894 <USB_EPClearStall+0x58>
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	18d3      	adds	r3, r2, r3
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	4a32      	ldr	r2, [pc, #200]	; (8003948 <USB_EPClearStall+0x10c>)
 800387e:	4013      	ands	r3, r2
 8003880:	b29c      	uxth	r4, r3
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	18d3      	adds	r3, r2, r3
 800388c:	4a2f      	ldr	r2, [pc, #188]	; (800394c <USB_EPClearStall+0x110>)
 800388e:	4322      	orrs	r2, r4
 8003890:	b292      	uxth	r2, r2
 8003892:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	78db      	ldrb	r3, [r3, #3]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d050      	beq.n	800393e <USB_EPClearStall+0x102>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	18d3      	adds	r3, r2, r3
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4a29      	ldr	r2, [pc, #164]	; (8003950 <USB_EPClearStall+0x114>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	b29c      	uxth	r4, r3
 80038b0:	2320      	movs	r3, #32
 80038b2:	4063      	eors	r3, r4
 80038b4:	b29c      	uxth	r4, r3
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	18d3      	adds	r3, r2, r3
 80038c0:	4a24      	ldr	r2, [pc, #144]	; (8003954 <USB_EPClearStall+0x118>)
 80038c2:	4322      	orrs	r2, r4
 80038c4:	b292      	uxth	r2, r2
 80038c6:	801a      	strh	r2, [r3, #0]
 80038c8:	e039      	b.n	800393e <USB_EPClearStall+0x102>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	18d3      	adds	r3, r2, r3
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	b29c      	uxth	r4, r3
 80038d8:	0022      	movs	r2, r4
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	01db      	lsls	r3, r3, #7
 80038de:	4013      	ands	r3, r2
 80038e0:	d012      	beq.n	8003908 <USB_EPClearStall+0xcc>
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	18d3      	adds	r3, r2, r3
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	4a15      	ldr	r2, [pc, #84]	; (8003948 <USB_EPClearStall+0x10c>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	b29c      	uxth	r4, r3
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	18d3      	adds	r3, r2, r3
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <USB_EPClearStall+0x11c>)
 8003902:	4322      	orrs	r2, r4
 8003904:	b292      	uxth	r2, r2
 8003906:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	18d3      	adds	r3, r2, r3
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	b29b      	uxth	r3, r3
 8003916:	4a11      	ldr	r2, [pc, #68]	; (800395c <USB_EPClearStall+0x120>)
 8003918:	4013      	ands	r3, r2
 800391a:	b29c      	uxth	r4, r3
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	015b      	lsls	r3, r3, #5
 8003920:	4063      	eors	r3, r4
 8003922:	b29c      	uxth	r4, r3
 8003924:	2380      	movs	r3, #128	; 0x80
 8003926:	019b      	lsls	r3, r3, #6
 8003928:	4063      	eors	r3, r4
 800392a:	b29c      	uxth	r4, r3
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	18d3      	adds	r3, r2, r3
 8003936:	4a07      	ldr	r2, [pc, #28]	; (8003954 <USB_EPClearStall+0x118>)
 8003938:	4322      	orrs	r2, r4
 800393a:	b292      	uxth	r2, r2
 800393c:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b003      	add	sp, #12
 8003946:	bd90      	pop	{r4, r7, pc}
 8003948:	ffff8f8f 	.word	0xffff8f8f
 800394c:	ffff80c0 	.word	0xffff80c0
 8003950:	ffff8fbf 	.word	0xffff8fbf
 8003954:	ffff8080 	.word	0xffff8080
 8003958:	ffffc080 	.word	0xffffc080
 800395c:	ffffbf8f 	.word	0xffffbf8f

08003960 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	000a      	movs	r2, r1
 800396a:	1cfb      	adds	r3, r7, #3
 800396c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800396e:	1cfb      	adds	r3, r7, #3
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	224c      	movs	r2, #76	; 0x4c
 800397a:	2180      	movs	r1, #128	; 0x80
 800397c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	b002      	add	sp, #8
 8003986:	bd80      	pop	{r7, pc}

08003988 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2258      	movs	r2, #88	; 0x58
 8003994:	5a9b      	ldrh	r3, [r3, r2]
 8003996:	b29b      	uxth	r3, r3
 8003998:	4a05      	ldr	r2, [pc, #20]	; (80039b0 <USB_DevConnect+0x28>)
 800399a:	4313      	orrs	r3, r2
 800399c:	b299      	uxth	r1, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2258      	movs	r2, #88	; 0x58
 80039a2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b002      	add	sp, #8
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	ffff8000 	.word	0xffff8000

080039b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2244      	movs	r2, #68	; 0x44
 80039c0:	5a9b      	ldrh	r3, [r3, r2]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80039c6:	68fb      	ldr	r3, [r7, #12]
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b004      	add	sp, #16
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	0018      	movs	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	b002      	add	sp, #8
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08c      	sub	sp, #48	; 0x30
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	0019      	movs	r1, r3
 80039f0:	1dbb      	adds	r3, r7, #6
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	1c0a      	adds	r2, r1, #0
 80039f8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	3301      	adds	r3, #1
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a0c:	1dbb      	adds	r3, r7, #6
 8003a0e:	881a      	ldrh	r2, [r3, #0]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	18d3      	adds	r3, r2, r3
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	00d2      	lsls	r2, r2, #3
 8003a18:	4694      	mov	ip, r2
 8003a1a:	4463      	add	r3, ip
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a22:	e01b      	b.n	8003a5c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	001a      	movs	r2, r3
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	3302      	adds	r3, #2
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	3301      	adds	r3, #1
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e0      	bne.n	8003a24 <USB_WritePMA+0x40>
  }
}
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b00c      	add	sp, #48	; 0x30
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b08a      	sub	sp, #40	; 0x28
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	0019      	movs	r1, r3
 8003a76:	1dbb      	adds	r3, r7, #6
 8003a78:	801a      	strh	r2, [r3, #0]
 8003a7a:	1d3b      	adds	r3, r7, #4
 8003a7c:	1c0a      	adds	r2, r1, #0
 8003a7e:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	881b      	ldrh	r3, [r3, #0]
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a92:	1dbb      	adds	r3, r7, #6
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	18d3      	adds	r3, r2, r3
 8003a9a:	2280      	movs	r2, #128	; 0x80
 8003a9c:	00d2      	lsls	r2, r2, #3
 8003a9e:	4694      	mov	ip, r2
 8003aa0:	4463      	add	r3, ip
 8003aa2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa8:	e018      	b.n	8003adc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	3302      	adds	r3, #2
 8003ab6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	0a1b      	lsrs	r3, r3, #8
 8003aca:	b2da      	uxtb	r2, r3
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e3      	bne.n	8003aaa <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	4013      	ands	r3, r2
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	701a      	strb	r2, [r3, #0]
  }
}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b00a      	add	sp, #40	; 0x28
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	1dfb      	adds	r3, r7, #7
 8003b14:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e020      	b.n	8003b62 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	23ad      	movs	r3, #173	; 0xad
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	58d3      	ldr	r3, [r2, r3]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	23ad      	movs	r3, #173	; 0xad
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	2100      	movs	r1, #0
 8003b34:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d004      	beq.n	8003b46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	23ac      	movs	r3, #172	; 0xac
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	68b9      	ldr	r1, [r7, #8]
 8003b44:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	23a7      	movs	r3, #167	; 0xa7
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1dfa      	adds	r2, r7, #7
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f001 fabe 	bl	80050dc <USBD_LL_Init>

  return USBD_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	0018      	movs	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b004      	add	sp, #16
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8003b74:	230f      	movs	r3, #15
 8003b76:	18fb      	adds	r3, r7, r3
 8003b78:	2200      	movs	r2, #0
 8003b7a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <USBD_RegisterClass+0x2c>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	23ad      	movs	r3, #173	; 0xad
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8003b8c:	230f      	movs	r3, #15
 8003b8e:	18fb      	adds	r3, r7, r3
 8003b90:	2200      	movs	r2, #0
 8003b92:	701a      	strb	r2, [r3, #0]
 8003b94:	e003      	b.n	8003b9e <USBD_RegisterClass+0x34>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003b96:	230f      	movs	r3, #15
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003b9e:	230f      	movs	r3, #15
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	781b      	ldrb	r3, [r3, #0]
}
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	b004      	add	sp, #16
 8003baa:	bd80      	pop	{r7, pc}

08003bac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f001 fae0 	bl	800517c <USBD_LL_Start>

  return USBD_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	000a      	movs	r2, r1
 8003be2:	1cfb      	adds	r3, r7, #3
 8003be4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003be6:	230f      	movs	r3, #15
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	2202      	movs	r2, #2
 8003bec:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	23ad      	movs	r3, #173	; 0xad
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	58d3      	ldr	r3, [r2, r3]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00f      	beq.n	8003c1a <USBD_SetClassConfig+0x42>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	23ad      	movs	r3, #173	; 0xad
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	58d3      	ldr	r3, [r2, r3]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	1cfa      	adds	r2, r7, #3
 8003c06:	7811      	ldrb	r1, [r2, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	0010      	movs	r0, r2
 8003c0c:	4798      	blx	r3
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d103      	bne.n	8003c1a <USBD_SetClassConfig+0x42>
    {
      ret = USBD_OK;
 8003c12:	230f      	movs	r3, #15
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8003c1a:	230f      	movs	r3, #15
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	781b      	ldrb	r3, [r3, #0]
}
 8003c20:	0018      	movs	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b004      	add	sp, #16
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	000a      	movs	r2, r1
 8003c32:	1cfb      	adds	r3, r7, #3
 8003c34:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	23ad      	movs	r3, #173	; 0xad
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	58d3      	ldr	r3, [r2, r3]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	1cfa      	adds	r2, r7, #3
 8003c42:	7811      	ldrb	r1, [r2, #0]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	0010      	movs	r0, r2
 8003c48:	4798      	blx	r3

  return USBD_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b002      	add	sp, #8
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	22aa      	movs	r2, #170	; 0xaa
 8003c62:	0092      	lsls	r2, r2, #2
 8003c64:	4694      	mov	ip, r2
 8003c66:	4463      	add	r3, ip
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	0011      	movs	r1, r2
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f001 f817 	bl	8004ca0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	23a5      	movs	r3, #165	; 0xa5
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	2101      	movs	r1, #1
 8003c7a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <USBD_LL_SetupStage+0xb4>)
 8003c80:	5a9b      	ldrh	r3, [r3, r2]
 8003c82:	0019      	movs	r1, r3
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	23a6      	movs	r3, #166	; 0xa6
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	23aa      	movs	r3, #170	; 0xaa
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	001a      	movs	r2, r3
 8003c96:	231f      	movs	r3, #31
 8003c98:	4013      	ands	r3, r2
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d00d      	beq.n	8003cba <USBD_LL_SetupStage+0x66>
 8003c9e:	d302      	bcc.n	8003ca6 <USBD_LL_SetupStage+0x52>
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d014      	beq.n	8003cce <USBD_LL_SetupStage+0x7a>
 8003ca4:	e01d      	b.n	8003ce2 <USBD_LL_SetupStage+0x8e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	22aa      	movs	r2, #170	; 0xaa
 8003caa:	0092      	lsls	r2, r2, #2
 8003cac:	189a      	adds	r2, r3, r2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	0011      	movs	r1, r2
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f000 fa10 	bl	80040d8 <USBD_StdDevReq>
      break;
 8003cb8:	e020      	b.n	8003cfc <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	22aa      	movs	r2, #170	; 0xaa
 8003cbe:	0092      	lsls	r2, r2, #2
 8003cc0:	189a      	adds	r2, r3, r2
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	0011      	movs	r1, r2
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 fa78 	bl	80041bc <USBD_StdItfReq>
      break;
 8003ccc:	e016      	b.n	8003cfc <USBD_LL_SetupStage+0xa8>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	22aa      	movs	r2, #170	; 0xaa
 8003cd2:	0092      	lsls	r2, r2, #2
 8003cd4:	189a      	adds	r2, r3, r2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0011      	movs	r1, r2
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 fac5 	bl	800426a <USBD_StdEPReq>
      break;
 8003ce0:	e00c      	b.n	8003cfc <USBD_LL_SetupStage+0xa8>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	23aa      	movs	r3, #170	; 0xaa
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	5cd3      	ldrb	r3, [r2, r3]
 8003cea:	227f      	movs	r2, #127	; 0x7f
 8003cec:	4393      	bics	r3, r2
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f001 faf6 	bl	80052e6 <USBD_LL_StallEP>
      break;
 8003cfa:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	0018      	movs	r0, r3
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b002      	add	sp, #8
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	000002ae 	.word	0x000002ae

08003d0c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	200b      	movs	r0, #11
 8003d18:	183b      	adds	r3, r7, r0
 8003d1a:	1c0a      	adds	r2, r1, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003d1e:	183b      	adds	r3, r7, r0
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d154      	bne.n	8003dd0 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3355      	adds	r3, #85	; 0x55
 8003d2a:	33ff      	adds	r3, #255	; 0xff
 8003d2c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	23a5      	movs	r3, #165	; 0xa5
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	58d3      	ldr	r3, [r2, r3]
 8003d36:	2b03      	cmp	r3, #3
 8003d38:	d139      	bne.n	8003dae <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d919      	bls.n	8003d7a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	1ad2      	subs	r2, r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d203      	bcs.n	8003d68 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	e002      	b.n	8003d6e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	001a      	movs	r2, r3
 8003d74:	f001 f881 	bl	8004e7a <USBD_CtlContinueRx>
 8003d78:	e045      	b.n	8003e06 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	23ad      	movs	r3, #173	; 0xad
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	58d3      	ldr	r3, [r2, r3]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	23a7      	movs	r3, #167	; 0xa7
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d107      	bne.n	8003da4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	23ad      	movs	r3, #173	; 0xad
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	58d3      	ldr	r3, [r2, r3]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	0010      	movs	r0, r2
 8003da2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	0018      	movs	r0, r3
 8003da8:	f001 f87a 	bl	8004ea0 <USBD_CtlSendStatus>
 8003dac:	e02b      	b.n	8003e06 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	23a5      	movs	r3, #165	; 0xa5
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	58d3      	ldr	r3, [r2, r3]
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d125      	bne.n	8003e06 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	23a5      	movs	r3, #165	; 0xa5
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f001 fa8c 	bl	80052e6 <USBD_LL_StallEP>
 8003dce:	e01a      	b.n	8003e06 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	23ad      	movs	r3, #173	; 0xad
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	58d3      	ldr	r3, [r2, r3]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d011      	beq.n	8003e02 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	23a7      	movs	r3, #167	; 0xa7
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d10b      	bne.n	8003e02 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	23ad      	movs	r3, #173	; 0xad
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	58d3      	ldr	r3, [r2, r3]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	220b      	movs	r2, #11
 8003df6:	18ba      	adds	r2, r7, r2
 8003df8:	7811      	ldrb	r1, [r2, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	0010      	movs	r0, r2
 8003dfe:	4798      	blx	r3
 8003e00:	e001      	b.n	8003e06 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003e02:	2302      	movs	r3, #2
 8003e04:	e000      	b.n	8003e08 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b006      	add	sp, #24
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	200b      	movs	r0, #11
 8003e1c:	183b      	adds	r3, r7, r0
 8003e1e:	1c0a      	adds	r2, r1, #0
 8003e20:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003e22:	183b      	adds	r3, r7, r0
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d000      	beq.n	8003e2c <USBD_LL_DataInStage+0x1c>
 8003e2a:	e08e      	b.n	8003f4a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3314      	adds	r3, #20
 8003e30:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	23a5      	movs	r3, #165	; 0xa5
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	58d3      	ldr	r3, [r2, r3]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d164      	bne.n	8003f08 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d915      	bls.n	8003e76 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	1ad2      	subs	r2, r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	0018      	movs	r0, r3
 8003e64:	f000 fff6 	bl	8004e54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f001 fb20 	bl	80054b4 <USBD_LL_PrepareReceive>
 8003e74:	e059      	b.n	8003f2a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	0019      	movs	r1, r3
 8003e80:	0010      	movs	r0, r2
 8003e82:	f7fc f9c7 	bl	8000214 <__aeabi_uidivmod>
 8003e86:	1e0b      	subs	r3, r1, #0
 8003e88:	d11f      	bne.n	8003eca <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d319      	bcc.n	8003eca <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	23a6      	movs	r3, #166	; 0xa6
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d211      	bcs.n	8003eca <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2100      	movs	r1, #0
 8003eac:	0018      	movs	r0, r3
 8003eae:	f000 ffd1 	bl	8004e54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	23a6      	movs	r3, #166	; 0xa6
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	2100      	movs	r1, #0
 8003eba:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	f001 faf6 	bl	80054b4 <USBD_LL_PrepareReceive>
 8003ec8:	e02f      	b.n	8003f2a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	23ad      	movs	r3, #173	; 0xad
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	58d3      	ldr	r3, [r2, r3]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00d      	beq.n	8003ef4 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	23a7      	movs	r3, #167	; 0xa7
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d107      	bne.n	8003ef4 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	23ad      	movs	r3, #173	; 0xad
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	58d3      	ldr	r3, [r2, r3]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	0010      	movs	r0, r2
 8003ef2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f001 f9f4 	bl	80052e6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	0018      	movs	r0, r3
 8003f02:	f000 ffe1 	bl	8004ec8 <USBD_CtlReceiveStatus>
 8003f06:	e010      	b.n	8003f2a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	23a5      	movs	r3, #165	; 0xa5
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	58d3      	ldr	r3, [r2, r3]
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d005      	beq.n	8003f20 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	23a5      	movs	r3, #165	; 0xa5
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d104      	bne.n	8003f2a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2180      	movs	r1, #128	; 0x80
 8003f24:	0018      	movs	r0, r3
 8003f26:	f001 f9de 	bl	80052e6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	23a8      	movs	r3, #168	; 0xa8
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	5cd3      	ldrb	r3, [r2, r3]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d124      	bne.n	8003f80 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff fe44 	bl	8003bc6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	23a8      	movs	r3, #168	; 0xa8
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	2100      	movs	r1, #0
 8003f46:	54d1      	strb	r1, [r2, r3]
 8003f48:	e01a      	b.n	8003f80 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	23ad      	movs	r3, #173	; 0xad
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	58d3      	ldr	r3, [r2, r3]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d011      	beq.n	8003f7c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	23a7      	movs	r3, #167	; 0xa7
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d10b      	bne.n	8003f7c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	23ad      	movs	r3, #173	; 0xad
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	58d3      	ldr	r3, [r2, r3]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	220b      	movs	r2, #11
 8003f70:	18ba      	adds	r2, r7, r2
 8003f72:	7811      	ldrb	r1, [r2, #0]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	0010      	movs	r0, r2
 8003f78:	4798      	blx	r3
 8003f7a:	e001      	b.n	8003f80 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	e000      	b.n	8003f82 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b006      	add	sp, #24
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b082      	sub	sp, #8
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	2340      	movs	r3, #64	; 0x40
 8003f96:	2200      	movs	r2, #0
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f001 f915 	bl	80051c8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	23ac      	movs	r3, #172	; 0xac
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	23b2      	movs	r3, #178	; 0xb2
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2140      	movs	r1, #64	; 0x40
 8003fb0:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	2340      	movs	r3, #64	; 0x40
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2180      	movs	r1, #128	; 0x80
 8003fba:	f001 f905 	bl	80051c8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2240      	movs	r2, #64	; 0x40
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	23a7      	movs	r3, #167	; 0xa7
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	23a5      	movs	r3, #165	; 0xa5
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	2100      	movs	r1, #0
 8003fdc:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	23a9      	movs	r3, #169	; 0xa9
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	2100      	movs	r1, #0
 8003fec:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	23ae      	movs	r3, #174	; 0xae
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	58d3      	ldr	r3, [r2, r3]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	23ad      	movs	r3, #173	; 0xad
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	58d3      	ldr	r3, [r2, r3]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	b2d9      	uxtb	r1, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0018      	movs	r0, r3
 800400e:	4790      	blx	r2
  }

  return USBD_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	0018      	movs	r0, r3
 8004014:	46bd      	mov	sp, r7
 8004016:	b002      	add	sp, #8
 8004018:	bd80      	pop	{r7, pc}

0800401a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	000a      	movs	r2, r1
 8004024:	1cfb      	adds	r3, r7, #3
 8004026:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	1cfa      	adds	r2, r7, #3
 800402c:	7812      	ldrb	r2, [r2, #0]
 800402e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b002      	add	sp, #8
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	23a7      	movs	r3, #167	; 0xa7
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	5cd1      	ldrb	r1, [r2, r3]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a06      	ldr	r2, [pc, #24]	; (8004068 <USBD_LL_Suspend+0x2c>)
 8004050:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	23a7      	movs	r3, #167	; 0xa7
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	2104      	movs	r1, #4
 800405a:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	0018      	movs	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	b002      	add	sp, #8
 8004064:	bd80      	pop	{r7, pc}
 8004066:	46c0      	nop			; (mov r8, r8)
 8004068:	0000029d 	.word	0x0000029d

0800406c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	23a7      	movs	r3, #167	; 0xa7
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	5cd3      	ldrb	r3, [r2, r3]
 800407c:	2b04      	cmp	r3, #4
 800407e:	d106      	bne.n	800408e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a05      	ldr	r2, [pc, #20]	; (8004098 <USBD_LL_Resume+0x2c>)
 8004084:	5c99      	ldrb	r1, [r3, r2]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	23a7      	movs	r3, #167	; 0xa7
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}
 8004098:	0000029d 	.word	0x0000029d

0800409c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	23a7      	movs	r3, #167	; 0xa7
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	5cd3      	ldrb	r3, [r2, r3]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d10e      	bne.n	80040ce <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	23ad      	movs	r3, #173	; 0xad
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	58d3      	ldr	r3, [r2, r3]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	23ad      	movs	r3, #173	; 0xad
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	58d3      	ldr	r3, [r2, r3]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	0010      	movs	r0, r2
 80040cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	0018      	movs	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b002      	add	sp, #8
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80040e2:	230f      	movs	r3, #15
 80040e4:	18fb      	adds	r3, r7, r3
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	001a      	movs	r2, r3
 80040f0:	2360      	movs	r3, #96	; 0x60
 80040f2:	4013      	ands	r3, r2
 80040f4:	2b20      	cmp	r3, #32
 80040f6:	d004      	beq.n	8004102 <USBD_StdDevReq+0x2a>
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d002      	beq.n	8004102 <USBD_StdDevReq+0x2a>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <USBD_StdDevReq+0x3e>
 8004100:	e04b      	b.n	800419a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	23ad      	movs	r3, #173	; 0xad
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	58d3      	ldr	r3, [r2, r3]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	6839      	ldr	r1, [r7, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	0010      	movs	r0, r2
 8004112:	4798      	blx	r3
      break;
 8004114:	e048      	b.n	80041a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	785b      	ldrb	r3, [r3, #1]
 800411a:	2b09      	cmp	r3, #9
 800411c:	d835      	bhi.n	800418a <USBD_StdDevReq+0xb2>
 800411e:	009a      	lsls	r2, r3, #2
 8004120:	4b25      	ldr	r3, [pc, #148]	; (80041b8 <USBD_StdDevReq+0xe0>)
 8004122:	18d3      	adds	r3, r2, r3
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	0011      	movs	r1, r2
 800412e:	0018      	movs	r0, r3
 8004130:	f000 fa5a 	bl	80045e8 <USBD_GetDescriptor>
          break;
 8004134:	e030      	b.n	8004198 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	0011      	movs	r1, r2
 800413c:	0018      	movs	r0, r3
 800413e:	f000 fc07 	bl	8004950 <USBD_SetAddress>
          break;
 8004142:	e029      	b.n	8004198 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	0011      	movs	r1, r2
 800414a:	0018      	movs	r0, r3
 800414c:	f000 fc54 	bl	80049f8 <USBD_SetConfig>
          break;
 8004150:	e022      	b.n	8004198 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	0011      	movs	r1, r2
 8004158:	0018      	movs	r0, r3
 800415a:	f000 fcf1 	bl	8004b40 <USBD_GetConfig>
          break;
 800415e:	e01b      	b.n	8004198 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	0011      	movs	r1, r2
 8004166:	0018      	movs	r0, r3
 8004168:	f000 fd24 	bl	8004bb4 <USBD_GetStatus>
          break;
 800416c:	e014      	b.n	8004198 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	0011      	movs	r1, r2
 8004174:	0018      	movs	r0, r3
 8004176:	f000 fd57 	bl	8004c28 <USBD_SetFeature>
          break;
 800417a:	e00d      	b.n	8004198 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	0011      	movs	r1, r2
 8004182:	0018      	movs	r0, r3
 8004184:	f000 fd66 	bl	8004c54 <USBD_ClrFeature>
          break;
 8004188:	e006      	b.n	8004198 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	0011      	movs	r1, r2
 8004190:	0018      	movs	r0, r3
 8004192:	f000 fdc0 	bl	8004d16 <USBD_CtlError>
          break;
 8004196:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004198:	e006      	b.n	80041a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0011      	movs	r1, r2
 80041a0:	0018      	movs	r0, r3
 80041a2:	f000 fdb8 	bl	8004d16 <USBD_CtlError>
      break;
 80041a6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80041a8:	230f      	movs	r3, #15
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	781b      	ldrb	r3, [r3, #0]
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b004      	add	sp, #16
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	08006320 	.word	0x08006320

080041bc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80041c6:	230f      	movs	r3, #15
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	2200      	movs	r2, #0
 80041cc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	001a      	movs	r2, r3
 80041d4:	2360      	movs	r3, #96	; 0x60
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d003      	beq.n	80041e4 <USBD_StdItfReq+0x28>
 80041dc:	2b40      	cmp	r3, #64	; 0x40
 80041de:	d001      	beq.n	80041e4 <USBD_StdItfReq+0x28>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d136      	bne.n	8004252 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	23a7      	movs	r3, #167	; 0xa7
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	5cd3      	ldrb	r3, [r2, r3]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d826      	bhi.n	8004240 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	889b      	ldrh	r3, [r3, #4]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d81a      	bhi.n	8004232 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	23ad      	movs	r3, #173	; 0xad
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	58d3      	ldr	r3, [r2, r3]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	220f      	movs	r2, #15
 8004208:	18bc      	adds	r4, r7, r2
 800420a:	6839      	ldr	r1, [r7, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	0010      	movs	r0, r2
 8004210:	4798      	blx	r3
 8004212:	0003      	movs	r3, r0
 8004214:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	88db      	ldrh	r3, [r3, #6]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d117      	bne.n	800424e <USBD_StdItfReq+0x92>
 800421e:	230f      	movs	r3, #15
 8004220:	18fb      	adds	r3, r7, r3
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d112      	bne.n	800424e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	0018      	movs	r0, r3
 800422c:	f000 fe38 	bl	8004ea0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004230:	e00d      	b.n	800424e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	0011      	movs	r1, r2
 8004238:	0018      	movs	r0, r3
 800423a:	f000 fd6c 	bl	8004d16 <USBD_CtlError>
          break;
 800423e:	e006      	b.n	800424e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	0011      	movs	r1, r2
 8004246:	0018      	movs	r0, r3
 8004248:	f000 fd65 	bl	8004d16 <USBD_CtlError>
          break;
 800424c:	e000      	b.n	8004250 <USBD_StdItfReq+0x94>
          break;
 800424e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8004250:	e006      	b.n	8004260 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	0011      	movs	r1, r2
 8004258:	0018      	movs	r0, r3
 800425a:	f000 fd5c 	bl	8004d16 <USBD_CtlError>
      break;
 800425e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b005      	add	sp, #20
 8004268:	bd90      	pop	{r4, r7, pc}

0800426a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800426a:	b5b0      	push	{r4, r5, r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004274:	230f      	movs	r3, #15
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	889a      	ldrh	r2, [r3, #4]
 8004280:	230e      	movs	r3, #14
 8004282:	18fb      	adds	r3, r7, r3
 8004284:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	001a      	movs	r2, r3
 800428c:	2360      	movs	r3, #96	; 0x60
 800428e:	4013      	ands	r3, r2
 8004290:	2b20      	cmp	r3, #32
 8004292:	d004      	beq.n	800429e <USBD_StdEPReq+0x34>
 8004294:	2b40      	cmp	r3, #64	; 0x40
 8004296:	d002      	beq.n	800429e <USBD_StdEPReq+0x34>
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <USBD_StdEPReq+0x48>
 800429c:	e195      	b.n	80045ca <USBD_StdEPReq+0x360>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	23ad      	movs	r3, #173	; 0xad
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	58d3      	ldr	r3, [r2, r3]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	0010      	movs	r0, r2
 80042ae:	4798      	blx	r3
      break;
 80042b0:	e192      	b.n	80045d8 <USBD_StdEPReq+0x36e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	001a      	movs	r2, r3
 80042b8:	2360      	movs	r3, #96	; 0x60
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d10f      	bne.n	80042e0 <USBD_StdEPReq+0x76>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	23ad      	movs	r3, #173	; 0xad
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	58d3      	ldr	r3, [r2, r3]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	250f      	movs	r5, #15
 80042cc:	197c      	adds	r4, r7, r5
 80042ce:	6839      	ldr	r1, [r7, #0]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	0010      	movs	r0, r2
 80042d4:	4798      	blx	r3
 80042d6:	0003      	movs	r3, r0
 80042d8:	7023      	strb	r3, [r4, #0]

        return ret;
 80042da:	197b      	adds	r3, r7, r5
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	e17e      	b.n	80045de <USBD_StdEPReq+0x374>
      }

      switch (req->bRequest)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d054      	beq.n	8004392 <USBD_StdEPReq+0x128>
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d003      	beq.n	80042f4 <USBD_StdEPReq+0x8a>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d100      	bne.n	80042f2 <USBD_StdEPReq+0x88>
 80042f0:	e097      	b.n	8004422 <USBD_StdEPReq+0x1b8>
 80042f2:	e162      	b.n	80045ba <USBD_StdEPReq+0x350>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	23a7      	movs	r3, #167	; 0xa7
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	5cd3      	ldrb	r3, [r2, r3]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d002      	beq.n	8004306 <USBD_StdEPReq+0x9c>
 8004300:	2b03      	cmp	r3, #3
 8004302:	d01f      	beq.n	8004344 <USBD_StdEPReq+0xda>
 8004304:	e03d      	b.n	8004382 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004306:	230e      	movs	r3, #14
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <USBD_StdEPReq+0xcc>
 8004310:	230e      	movs	r3, #14
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b80      	cmp	r3, #128	; 0x80
 8004318:	d00d      	beq.n	8004336 <USBD_StdEPReq+0xcc>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800431a:	230e      	movs	r3, #14
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	781a      	ldrb	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	0011      	movs	r1, r2
 8004324:	0018      	movs	r0, r3
 8004326:	f000 ffde 	bl	80052e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	0018      	movs	r0, r3
 8004330:	f000 ffd9 	bl	80052e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004334:	e02c      	b.n	8004390 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	0011      	movs	r1, r2
 800433c:	0018      	movs	r0, r3
 800433e:	f000 fcea 	bl	8004d16 <USBD_CtlError>
              break;
 8004342:	e025      	b.n	8004390 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	885b      	ldrh	r3, [r3, #2]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d115      	bne.n	8004378 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800434c:	230e      	movs	r3, #14
 800434e:	18fb      	adds	r3, r7, r3
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d010      	beq.n	8004378 <USBD_StdEPReq+0x10e>
 8004356:	230e      	movs	r3, #14
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b80      	cmp	r3, #128	; 0x80
 800435e:	d00b      	beq.n	8004378 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	88db      	ldrh	r3, [r3, #6]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d107      	bne.n	8004378 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004368:	230e      	movs	r3, #14
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	781a      	ldrb	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0011      	movs	r1, r2
 8004372:	0018      	movs	r0, r3
 8004374:	f000 ffb7 	bl	80052e6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	0018      	movs	r0, r3
 800437c:	f000 fd90 	bl	8004ea0 <USBD_CtlSendStatus>

              break;
 8004380:	e006      	b.n	8004390 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	0011      	movs	r1, r2
 8004388:	0018      	movs	r0, r3
 800438a:	f000 fcc4 	bl	8004d16 <USBD_CtlError>
              break;
 800438e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8004390:	e11a      	b.n	80045c8 <USBD_StdEPReq+0x35e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	23a7      	movs	r3, #167	; 0xa7
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	5cd3      	ldrb	r3, [r2, r3]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d002      	beq.n	80043a4 <USBD_StdEPReq+0x13a>
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d01f      	beq.n	80043e2 <USBD_StdEPReq+0x178>
 80043a2:	e035      	b.n	8004410 <USBD_StdEPReq+0x1a6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80043a4:	230e      	movs	r3, #14
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d012      	beq.n	80043d4 <USBD_StdEPReq+0x16a>
 80043ae:	230e      	movs	r3, #14
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d00d      	beq.n	80043d4 <USBD_StdEPReq+0x16a>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80043b8:	230e      	movs	r3, #14
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	0011      	movs	r1, r2
 80043c2:	0018      	movs	r0, r3
 80043c4:	f000 ff8f 	bl	80052e6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	0018      	movs	r0, r3
 80043ce:	f000 ff8a 	bl	80052e6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80043d2:	e025      	b.n	8004420 <USBD_StdEPReq+0x1b6>
                USBD_CtlError(pdev, req);
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0011      	movs	r1, r2
 80043da:	0018      	movs	r0, r3
 80043dc:	f000 fc9b 	bl	8004d16 <USBD_CtlError>
              break;
 80043e0:	e01e      	b.n	8004420 <USBD_StdEPReq+0x1b6>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	885b      	ldrh	r3, [r3, #2]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d119      	bne.n	800441e <USBD_StdEPReq+0x1b4>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80043ea:	230e      	movs	r3, #14
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	227f      	movs	r2, #127	; 0x7f
 80043f2:	4013      	ands	r3, r2
 80043f4:	d007      	beq.n	8004406 <USBD_StdEPReq+0x19c>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80043f6:	230e      	movs	r3, #14
 80043f8:	18fb      	adds	r3, r7, r3
 80043fa:	781a      	ldrb	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0011      	movs	r1, r2
 8004400:	0018      	movs	r0, r3
 8004402:	f000 ff9c 	bl	800533e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	0018      	movs	r0, r3
 800440a:	f000 fd49 	bl	8004ea0 <USBD_CtlSendStatus>
              }
              break;
 800440e:	e006      	b.n	800441e <USBD_StdEPReq+0x1b4>

            default:
              USBD_CtlError(pdev, req);
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0011      	movs	r1, r2
 8004416:	0018      	movs	r0, r3
 8004418:	f000 fc7d 	bl	8004d16 <USBD_CtlError>
              break;
 800441c:	e000      	b.n	8004420 <USBD_StdEPReq+0x1b6>
              break;
 800441e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8004420:	e0d2      	b.n	80045c8 <USBD_StdEPReq+0x35e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	23a7      	movs	r3, #167	; 0xa7
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	5cd3      	ldrb	r3, [r2, r3]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d002      	beq.n	8004434 <USBD_StdEPReq+0x1ca>
 800442e:	2b03      	cmp	r3, #3
 8004430:	d03e      	beq.n	80044b0 <USBD_StdEPReq+0x246>
 8004432:	e0ba      	b.n	80045aa <USBD_StdEPReq+0x340>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004434:	230e      	movs	r3, #14
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <USBD_StdEPReq+0x1ec>
 800443e:	230e      	movs	r3, #14
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b80      	cmp	r3, #128	; 0x80
 8004446:	d006      	beq.n	8004456 <USBD_StdEPReq+0x1ec>
              {
                USBD_CtlError(pdev, req);
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	0011      	movs	r1, r2
 800444e:	0018      	movs	r0, r3
 8004450:	f000 fc61 	bl	8004d16 <USBD_CtlError>
                break;
 8004454:	e0b0      	b.n	80045b8 <USBD_StdEPReq+0x34e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004456:	230e      	movs	r3, #14
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b25b      	sxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	da0d      	bge.n	800447e <USBD_StdEPReq+0x214>
 8004462:	230e      	movs	r3, #14
 8004464:	18fb      	adds	r3, r7, r3
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	227f      	movs	r2, #127	; 0x7f
 800446a:	401a      	ands	r2, r3
 800446c:	0013      	movs	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	189b      	adds	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	3310      	adds	r3, #16
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	18d3      	adds	r3, r2, r3
 800447a:	3304      	adds	r3, #4
 800447c:	e00d      	b.n	800449a <USBD_StdEPReq+0x230>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800447e:	230e      	movs	r3, #14
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	227f      	movs	r2, #127	; 0x7f
 8004486:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004488:	0013      	movs	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	189b      	adds	r3, r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	3351      	adds	r3, #81	; 0x51
 8004492:	33ff      	adds	r3, #255	; 0xff
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	18d3      	adds	r3, r2, r3
 8004498:	3304      	adds	r3, #4
 800449a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 fcb3 	bl	8004e14 <USBD_CtlSendData>
              break;
 80044ae:	e083      	b.n	80045b8 <USBD_StdEPReq+0x34e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80044b0:	230e      	movs	r3, #14
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	b25b      	sxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	da15      	bge.n	80044e8 <USBD_StdEPReq+0x27e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80044bc:	230e      	movs	r3, #14
 80044be:	18fb      	adds	r3, r7, r3
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	220f      	movs	r2, #15
 80044c4:	401a      	ands	r2, r3
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	0013      	movs	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	189b      	adds	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	18cb      	adds	r3, r1, r3
 80044d2:	3318      	adds	r3, #24
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d11e      	bne.n	8004518 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	0011      	movs	r1, r2
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 fc18 	bl	8004d16 <USBD_CtlError>
                  break;
 80044e6:	e067      	b.n	80045b8 <USBD_StdEPReq+0x34e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80044e8:	230e      	movs	r3, #14
 80044ea:	18fb      	adds	r3, r7, r3
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	220f      	movs	r2, #15
 80044f0:	401a      	ands	r2, r3
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	23ac      	movs	r3, #172	; 0xac
 80044f6:	0059      	lsls	r1, r3, #1
 80044f8:	0013      	movs	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	189b      	adds	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	18c3      	adds	r3, r0, r3
 8004502:	185b      	adds	r3, r3, r1
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <USBD_StdEPReq+0x2ae>
                {
                  USBD_CtlError(pdev, req);
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f000 fc00 	bl	8004d16 <USBD_CtlError>
                  break;
 8004516:	e04f      	b.n	80045b8 <USBD_StdEPReq+0x34e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004518:	230e      	movs	r3, #14
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b25b      	sxtb	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	da0d      	bge.n	8004540 <USBD_StdEPReq+0x2d6>
 8004524:	230e      	movs	r3, #14
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	227f      	movs	r2, #127	; 0x7f
 800452c:	401a      	ands	r2, r3
 800452e:	0013      	movs	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	189b      	adds	r3, r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	3310      	adds	r3, #16
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	18d3      	adds	r3, r2, r3
 800453c:	3304      	adds	r3, #4
 800453e:	e00d      	b.n	800455c <USBD_StdEPReq+0x2f2>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004540:	230e      	movs	r3, #14
 8004542:	18fb      	adds	r3, r7, r3
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	227f      	movs	r2, #127	; 0x7f
 8004548:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800454a:	0013      	movs	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	189b      	adds	r3, r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	3351      	adds	r3, #81	; 0x51
 8004554:	33ff      	adds	r3, #255	; 0xff
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	18d3      	adds	r3, r2, r3
 800455a:	3304      	adds	r3, #4
 800455c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800455e:	230e      	movs	r3, #14
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d004      	beq.n	8004572 <USBD_StdEPReq+0x308>
 8004568:	230e      	movs	r3, #14
 800456a:	18fb      	adds	r3, r7, r3
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d103      	bne.n	800457a <USBD_StdEPReq+0x310>
              {
                pep->status = 0x0000U;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e010      	b.n	800459c <USBD_StdEPReq+0x332>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800457a:	230e      	movs	r3, #14
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	781a      	ldrb	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0011      	movs	r1, r2
 8004584:	0018      	movs	r0, r3
 8004586:	f000 ff06 	bl	8005396 <USBD_LL_IsStallEP>
 800458a:	1e03      	subs	r3, r0, #0
 800458c:	d003      	beq.n	8004596 <USBD_StdEPReq+0x32c>
              {
                pep->status = 0x0001U;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	e002      	b.n	800459c <USBD_StdEPReq+0x332>
              }
              else
              {
                pep->status = 0x0000U;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 fc36 	bl	8004e14 <USBD_CtlSendData>
              break;
 80045a8:	e006      	b.n	80045b8 <USBD_StdEPReq+0x34e>

            default:
              USBD_CtlError(pdev, req);
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0011      	movs	r1, r2
 80045b0:	0018      	movs	r0, r3
 80045b2:	f000 fbb0 	bl	8004d16 <USBD_CtlError>
              break;
 80045b6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80045b8:	e006      	b.n	80045c8 <USBD_StdEPReq+0x35e>

        default:
          USBD_CtlError(pdev, req);
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	0011      	movs	r1, r2
 80045c0:	0018      	movs	r0, r3
 80045c2:	f000 fba8 	bl	8004d16 <USBD_CtlError>
          break;
 80045c6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80045c8:	e006      	b.n	80045d8 <USBD_StdEPReq+0x36e>

    default:
      USBD_CtlError(pdev, req);
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	0011      	movs	r1, r2
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 fba0 	bl	8004d16 <USBD_CtlError>
      break;
 80045d6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80045d8:	230f      	movs	r3, #15
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	781b      	ldrb	r3, [r3, #0]
}
 80045de:	0018      	movs	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b004      	add	sp, #16
 80045e4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080045e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80045f2:	2308      	movs	r3, #8
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	2200      	movs	r2, #0
 80045f8:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80045fe:	230b      	movs	r3, #11
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	885b      	ldrh	r3, [r3, #2]
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b07      	cmp	r3, #7
 8004610:	d900      	bls.n	8004614 <USBD_GetDescriptor+0x2c>
 8004612:	e159      	b.n	80048c8 <USBD_GetDescriptor+0x2e0>
 8004614:	009a      	lsls	r2, r3, #2
 8004616:	4bcc      	ldr	r3, [pc, #816]	; (8004948 <USBD_GetDescriptor+0x360>)
 8004618:	18d3      	adds	r3, r2, r3
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	23ac      	movs	r3, #172	; 0xac
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	58d3      	ldr	r3, [r2, r3]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	7c12      	ldrb	r2, [r2, #16]
 800462c:	2108      	movs	r1, #8
 800462e:	1879      	adds	r1, r7, r1
 8004630:	0010      	movs	r0, r2
 8004632:	4798      	blx	r3
 8004634:	0003      	movs	r3, r0
 8004636:	60fb      	str	r3, [r7, #12]
      break;
 8004638:	e153      	b.n	80048e2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	7c1b      	ldrb	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10f      	bne.n	8004662 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	23ad      	movs	r3, #173	; 0xad
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	58d3      	ldr	r3, [r2, r3]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	2208      	movs	r2, #8
 800464e:	18ba      	adds	r2, r7, r2
 8004650:	0010      	movs	r0, r2
 8004652:	4798      	blx	r3
 8004654:	0003      	movs	r3, r0
 8004656:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3301      	adds	r3, #1
 800465c:	2202      	movs	r2, #2
 800465e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004660:	e13f      	b.n	80048e2 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	23ad      	movs	r3, #173	; 0xad
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	58d3      	ldr	r3, [r2, r3]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	2208      	movs	r2, #8
 800466e:	18ba      	adds	r2, r7, r2
 8004670:	0010      	movs	r0, r2
 8004672:	4798      	blx	r3
 8004674:	0003      	movs	r3, r0
 8004676:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3301      	adds	r3, #1
 800467c:	2202      	movs	r2, #2
 800467e:	701a      	strb	r2, [r3, #0]
      break;
 8004680:	e12f      	b.n	80048e2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	885b      	ldrh	r3, [r3, #2]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b05      	cmp	r3, #5
 800468a:	d900      	bls.n	800468e <USBD_GetDescriptor+0xa6>
 800468c:	e0d0      	b.n	8004830 <USBD_GetDescriptor+0x248>
 800468e:	009a      	lsls	r2, r3, #2
 8004690:	4bae      	ldr	r3, [pc, #696]	; (800494c <USBD_GetDescriptor+0x364>)
 8004692:	18d3      	adds	r3, r2, r3
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	23ac      	movs	r3, #172	; 0xac
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	58d3      	ldr	r3, [r2, r3]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	23ac      	movs	r3, #172	; 0xac
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	58d3      	ldr	r3, [r2, r3]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	7c12      	ldrb	r2, [r2, #16]
 80046b4:	2108      	movs	r1, #8
 80046b6:	1879      	adds	r1, r7, r1
 80046b8:	0010      	movs	r0, r2
 80046ba:	4798      	blx	r3
 80046bc:	0003      	movs	r3, r0
 80046be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80046c0:	e0c3      	b.n	800484a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0011      	movs	r1, r2
 80046c8:	0018      	movs	r0, r3
 80046ca:	f000 fb24 	bl	8004d16 <USBD_CtlError>
            err++;
 80046ce:	210b      	movs	r1, #11
 80046d0:	187b      	adds	r3, r7, r1
 80046d2:	781a      	ldrb	r2, [r3, #0]
 80046d4:	187b      	adds	r3, r7, r1
 80046d6:	3201      	adds	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
          break;
 80046da:	e0b6      	b.n	800484a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	23ac      	movs	r3, #172	; 0xac
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	58d3      	ldr	r3, [r2, r3]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00d      	beq.n	8004706 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	23ac      	movs	r3, #172	; 0xac
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	58d3      	ldr	r3, [r2, r3]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	7c12      	ldrb	r2, [r2, #16]
 80046f8:	2108      	movs	r1, #8
 80046fa:	1879      	adds	r1, r7, r1
 80046fc:	0010      	movs	r0, r2
 80046fe:	4798      	blx	r3
 8004700:	0003      	movs	r3, r0
 8004702:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004704:	e0a1      	b.n	800484a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	0011      	movs	r1, r2
 800470c:	0018      	movs	r0, r3
 800470e:	f000 fb02 	bl	8004d16 <USBD_CtlError>
            err++;
 8004712:	210b      	movs	r1, #11
 8004714:	187b      	adds	r3, r7, r1
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	187b      	adds	r3, r7, r1
 800471a:	3201      	adds	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
          break;
 800471e:	e094      	b.n	800484a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	23ac      	movs	r3, #172	; 0xac
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	58d3      	ldr	r3, [r2, r3]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00d      	beq.n	800474a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	23ac      	movs	r3, #172	; 0xac
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	58d3      	ldr	r3, [r2, r3]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	7c12      	ldrb	r2, [r2, #16]
 800473c:	2108      	movs	r1, #8
 800473e:	1879      	adds	r1, r7, r1
 8004740:	0010      	movs	r0, r2
 8004742:	4798      	blx	r3
 8004744:	0003      	movs	r3, r0
 8004746:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004748:	e07f      	b.n	800484a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	0011      	movs	r1, r2
 8004750:	0018      	movs	r0, r3
 8004752:	f000 fae0 	bl	8004d16 <USBD_CtlError>
            err++;
 8004756:	210b      	movs	r1, #11
 8004758:	187b      	adds	r3, r7, r1
 800475a:	781a      	ldrb	r2, [r3, #0]
 800475c:	187b      	adds	r3, r7, r1
 800475e:	3201      	adds	r2, #1
 8004760:	701a      	strb	r2, [r3, #0]
          break;
 8004762:	e072      	b.n	800484a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	23ac      	movs	r3, #172	; 0xac
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	58d3      	ldr	r3, [r2, r3]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	23ac      	movs	r3, #172	; 0xac
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	58d3      	ldr	r3, [r2, r3]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	7c12      	ldrb	r2, [r2, #16]
 8004780:	2108      	movs	r1, #8
 8004782:	1879      	adds	r1, r7, r1
 8004784:	0010      	movs	r0, r2
 8004786:	4798      	blx	r3
 8004788:	0003      	movs	r3, r0
 800478a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800478c:	e05d      	b.n	800484a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	0011      	movs	r1, r2
 8004794:	0018      	movs	r0, r3
 8004796:	f000 fabe 	bl	8004d16 <USBD_CtlError>
            err++;
 800479a:	210b      	movs	r1, #11
 800479c:	187b      	adds	r3, r7, r1
 800479e:	781a      	ldrb	r2, [r3, #0]
 80047a0:	187b      	adds	r3, r7, r1
 80047a2:	3201      	adds	r2, #1
 80047a4:	701a      	strb	r2, [r3, #0]
          break;
 80047a6:	e050      	b.n	800484a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	23ac      	movs	r3, #172	; 0xac
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	58d3      	ldr	r3, [r2, r3]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	23ac      	movs	r3, #172	; 0xac
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	58d3      	ldr	r3, [r2, r3]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	7c12      	ldrb	r2, [r2, #16]
 80047c4:	2108      	movs	r1, #8
 80047c6:	1879      	adds	r1, r7, r1
 80047c8:	0010      	movs	r0, r2
 80047ca:	4798      	blx	r3
 80047cc:	0003      	movs	r3, r0
 80047ce:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80047d0:	e03b      	b.n	800484a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0011      	movs	r1, r2
 80047d8:	0018      	movs	r0, r3
 80047da:	f000 fa9c 	bl	8004d16 <USBD_CtlError>
            err++;
 80047de:	210b      	movs	r1, #11
 80047e0:	187b      	adds	r3, r7, r1
 80047e2:	781a      	ldrb	r2, [r3, #0]
 80047e4:	187b      	adds	r3, r7, r1
 80047e6:	3201      	adds	r2, #1
 80047e8:	701a      	strb	r2, [r3, #0]
          break;
 80047ea:	e02e      	b.n	800484a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	23ac      	movs	r3, #172	; 0xac
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	58d3      	ldr	r3, [r2, r3]
 80047f4:	699b      	ldr	r3, [r3, #24]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	23ac      	movs	r3, #172	; 0xac
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	58d3      	ldr	r3, [r2, r3]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	7c12      	ldrb	r2, [r2, #16]
 8004808:	2108      	movs	r1, #8
 800480a:	1879      	adds	r1, r7, r1
 800480c:	0010      	movs	r0, r2
 800480e:	4798      	blx	r3
 8004810:	0003      	movs	r3, r0
 8004812:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004814:	e019      	b.n	800484a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	0011      	movs	r1, r2
 800481c:	0018      	movs	r0, r3
 800481e:	f000 fa7a 	bl	8004d16 <USBD_CtlError>
            err++;
 8004822:	210b      	movs	r1, #11
 8004824:	187b      	adds	r3, r7, r1
 8004826:	781a      	ldrb	r2, [r3, #0]
 8004828:	187b      	adds	r3, r7, r1
 800482a:	3201      	adds	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
          break;
 800482e:	e00c      	b.n	800484a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	0011      	movs	r1, r2
 8004836:	0018      	movs	r0, r3
 8004838:	f000 fa6d 	bl	8004d16 <USBD_CtlError>
          err++;
 800483c:	210b      	movs	r1, #11
 800483e:	187b      	adds	r3, r7, r1
 8004840:	781a      	ldrb	r2, [r3, #0]
 8004842:	187b      	adds	r3, r7, r1
 8004844:	3201      	adds	r2, #1
 8004846:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8004848:	e04b      	b.n	80048e2 <USBD_GetDescriptor+0x2fa>
 800484a:	e04a      	b.n	80048e2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	7c1b      	ldrb	r3, [r3, #16]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10b      	bne.n	800486c <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	23ad      	movs	r3, #173	; 0xad
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	58d3      	ldr	r3, [r2, r3]
 800485c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800485e:	2208      	movs	r2, #8
 8004860:	18ba      	adds	r2, r7, r2
 8004862:	0010      	movs	r0, r2
 8004864:	4798      	blx	r3
 8004866:	0003      	movs	r3, r0
 8004868:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800486a:	e03a      	b.n	80048e2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	0011      	movs	r1, r2
 8004872:	0018      	movs	r0, r3
 8004874:	f000 fa4f 	bl	8004d16 <USBD_CtlError>
        err++;
 8004878:	210b      	movs	r1, #11
 800487a:	187b      	adds	r3, r7, r1
 800487c:	781a      	ldrb	r2, [r3, #0]
 800487e:	187b      	adds	r3, r7, r1
 8004880:	3201      	adds	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
      break;
 8004884:	e02d      	b.n	80048e2 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	7c1b      	ldrb	r3, [r3, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10f      	bne.n	80048ae <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	23ad      	movs	r3, #173	; 0xad
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	58d3      	ldr	r3, [r2, r3]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	2208      	movs	r2, #8
 800489a:	18ba      	adds	r2, r7, r2
 800489c:	0010      	movs	r0, r2
 800489e:	4798      	blx	r3
 80048a0:	0003      	movs	r3, r0
 80048a2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3301      	adds	r3, #1
 80048a8:	2207      	movs	r2, #7
 80048aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80048ac:	e019      	b.n	80048e2 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	0011      	movs	r1, r2
 80048b4:	0018      	movs	r0, r3
 80048b6:	f000 fa2e 	bl	8004d16 <USBD_CtlError>
        err++;
 80048ba:	210b      	movs	r1, #11
 80048bc:	187b      	adds	r3, r7, r1
 80048be:	781a      	ldrb	r2, [r3, #0]
 80048c0:	187b      	adds	r3, r7, r1
 80048c2:	3201      	adds	r2, #1
 80048c4:	701a      	strb	r2, [r3, #0]
      break;
 80048c6:	e00c      	b.n	80048e2 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0011      	movs	r1, r2
 80048ce:	0018      	movs	r0, r3
 80048d0:	f000 fa21 	bl	8004d16 <USBD_CtlError>
      err++;
 80048d4:	210b      	movs	r1, #11
 80048d6:	187b      	adds	r3, r7, r1
 80048d8:	781a      	ldrb	r2, [r3, #0]
 80048da:	187b      	adds	r3, r7, r1
 80048dc:	3201      	adds	r2, #1
 80048de:	701a      	strb	r2, [r3, #0]
      break;
 80048e0:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80048e2:	230b      	movs	r3, #11
 80048e4:	18fb      	adds	r3, r7, r3
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d128      	bne.n	800493e <USBD_GetDescriptor+0x356>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80048ec:	2308      	movs	r3, #8
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d01a      	beq.n	800492c <USBD_GetDescriptor+0x344>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	88db      	ldrh	r3, [r3, #6]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d016      	beq.n	800492c <USBD_GetDescriptor+0x344>
    {
      len = MIN(len, req->wLength);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	88da      	ldrh	r2, [r3, #6]
 8004902:	2308      	movs	r3, #8
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	1c18      	adds	r0, r3, #0
 800490a:	1c11      	adds	r1, r2, #0
 800490c:	b28a      	uxth	r2, r1
 800490e:	b283      	uxth	r3, r0
 8004910:	429a      	cmp	r2, r3
 8004912:	d900      	bls.n	8004916 <USBD_GetDescriptor+0x32e>
 8004914:	1c01      	adds	r1, r0, #0
 8004916:	b28a      	uxth	r2, r1
 8004918:	2108      	movs	r1, #8
 800491a:	187b      	adds	r3, r7, r1
 800491c:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800491e:	187b      	adds	r3, r7, r1
 8004920:	881a      	ldrh	r2, [r3, #0]
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0018      	movs	r0, r3
 8004928:	f000 fa74 	bl	8004e14 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	88db      	ldrh	r3, [r3, #6]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d105      	bne.n	8004940 <USBD_GetDescriptor+0x358>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	0018      	movs	r0, r3
 8004938:	f000 fab2 	bl	8004ea0 <USBD_CtlSendStatus>
 800493c:	e000      	b.n	8004940 <USBD_GetDescriptor+0x358>
    return;
 800493e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8004940:	46bd      	mov	sp, r7
 8004942:	b004      	add	sp, #16
 8004944:	bd80      	pop	{r7, pc}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	08006348 	.word	0x08006348
 800494c:	08006368 	.word	0x08006368

08004950 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004950:	b590      	push	{r4, r7, lr}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	889b      	ldrh	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d13d      	bne.n	80049de <USBD_SetAddress+0x8e>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	88db      	ldrh	r3, [r3, #6]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d139      	bne.n	80049de <USBD_SetAddress+0x8e>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	885b      	ldrh	r3, [r3, #2]
 800496e:	2b7f      	cmp	r3, #127	; 0x7f
 8004970:	d835      	bhi.n	80049de <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	885b      	ldrh	r3, [r3, #2]
 8004976:	b2da      	uxtb	r2, r3
 8004978:	230f      	movs	r3, #15
 800497a:	18fb      	adds	r3, r7, r3
 800497c:	217f      	movs	r1, #127	; 0x7f
 800497e:	400a      	ands	r2, r1
 8004980:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	23a7      	movs	r3, #167	; 0xa7
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	5cd3      	ldrb	r3, [r2, r3]
 800498a:	2b03      	cmp	r3, #3
 800498c:	d106      	bne.n	800499c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	0011      	movs	r1, r2
 8004994:	0018      	movs	r0, r3
 8004996:	f000 f9be 	bl	8004d16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800499a:	e026      	b.n	80049ea <USBD_SetAddress+0x9a>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	240f      	movs	r4, #15
 80049a0:	193a      	adds	r2, r7, r4
 80049a2:	4914      	ldr	r1, [pc, #80]	; (80049f4 <USBD_SetAddress+0xa4>)
 80049a4:	7812      	ldrb	r2, [r2, #0]
 80049a6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80049a8:	193b      	adds	r3, r7, r4
 80049aa:	781a      	ldrb	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	0011      	movs	r1, r2
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 fd1b 	bl	80053ec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	0018      	movs	r0, r3
 80049ba:	f000 fa71 	bl	8004ea0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80049be:	193b      	adds	r3, r7, r4
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	23a7      	movs	r3, #167	; 0xa7
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	2102      	movs	r1, #2
 80049ce:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049d0:	e00b      	b.n	80049ea <USBD_SetAddress+0x9a>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	23a7      	movs	r3, #167	; 0xa7
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	2101      	movs	r1, #1
 80049da:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049dc:	e005      	b.n	80049ea <USBD_SetAddress+0x9a>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	0011      	movs	r1, r2
 80049e4:	0018      	movs	r0, r3
 80049e6:	f000 f996 	bl	8004d16 <USBD_CtlError>
  }
}
 80049ea:	46c0      	nop			; (mov r8, r8)
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b005      	add	sp, #20
 80049f0:	bd90      	pop	{r4, r7, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	0000029e 	.word	0x0000029e

080049f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	885b      	ldrh	r3, [r3, #2]
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	4b4c      	ldr	r3, [pc, #304]	; (8004b3c <USBD_SetConfig+0x144>)
 8004a0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004a0c:	4b4b      	ldr	r3, [pc, #300]	; (8004b3c <USBD_SetConfig+0x144>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d906      	bls.n	8004a22 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	0011      	movs	r1, r2
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f000 f97b 	bl	8004d16 <USBD_CtlError>
 8004a20:	e088      	b.n	8004b34 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	23a7      	movs	r3, #167	; 0xa7
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	5cd3      	ldrb	r3, [r2, r3]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d002      	beq.n	8004a34 <USBD_SetConfig+0x3c>
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d029      	beq.n	8004a86 <USBD_SetConfig+0x8e>
 8004a32:	e071      	b.n	8004b18 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004a34:	4b41      	ldr	r3, [pc, #260]	; (8004b3c <USBD_SetConfig+0x144>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01f      	beq.n	8004a7c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8004a3c:	4b3f      	ldr	r3, [pc, #252]	; (8004b3c <USBD_SetConfig+0x144>)
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	001a      	movs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	23a7      	movs	r3, #167	; 0xa7
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	2103      	movs	r1, #3
 8004a4e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004a50:	4b3a      	ldr	r3, [pc, #232]	; (8004b3c <USBD_SetConfig+0x144>)
 8004a52:	781a      	ldrb	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0011      	movs	r1, r2
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7ff f8bd 	bl	8003bd8 <USBD_SetClassConfig>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d106      	bne.n	8004a72 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	0011      	movs	r1, r2
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f000 f953 	bl	8004d16 <USBD_CtlError>
            return;
 8004a70:	e060      	b.n	8004b34 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0018      	movs	r0, r3
 8004a76:	f000 fa13 	bl	8004ea0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004a7a:	e05b      	b.n	8004b34 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 fa0e 	bl	8004ea0 <USBD_CtlSendStatus>
        break;
 8004a84:	e056      	b.n	8004b34 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004a86:	4b2d      	ldr	r3, [pc, #180]	; (8004b3c <USBD_SetConfig+0x144>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d115      	bne.n	8004aba <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	23a7      	movs	r3, #167	; 0xa7
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	2102      	movs	r1, #2
 8004a96:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8004a98:	4b28      	ldr	r3, [pc, #160]	; (8004b3c <USBD_SetConfig+0x144>)
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	001a      	movs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004aa2:	4b26      	ldr	r3, [pc, #152]	; (8004b3c <USBD_SetConfig+0x144>)
 8004aa4:	781a      	ldrb	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	0011      	movs	r1, r2
 8004aaa:	0018      	movs	r0, r3
 8004aac:	f7ff f8bc 	bl	8003c28 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	f000 f9f4 	bl	8004ea0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004ab8:	e03c      	b.n	8004b34 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8004aba:	4b20      	ldr	r3, [pc, #128]	; (8004b3c <USBD_SetConfig+0x144>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	001a      	movs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d022      	beq.n	8004b0e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	0011      	movs	r1, r2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f7ff f8a8 	bl	8003c28 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004ad8:	4b18      	ldr	r3, [pc, #96]	; (8004b3c <USBD_SetConfig+0x144>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	001a      	movs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004ae2:	4b16      	ldr	r3, [pc, #88]	; (8004b3c <USBD_SetConfig+0x144>)
 8004ae4:	781a      	ldrb	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0011      	movs	r1, r2
 8004aea:	0018      	movs	r0, r3
 8004aec:	f7ff f874 	bl	8003bd8 <USBD_SetClassConfig>
 8004af0:	0003      	movs	r3, r0
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d106      	bne.n	8004b04 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	0011      	movs	r1, r2
 8004afc:	0018      	movs	r0, r3
 8004afe:	f000 f90a 	bl	8004d16 <USBD_CtlError>
            return;
 8004b02:	e017      	b.n	8004b34 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	0018      	movs	r0, r3
 8004b08:	f000 f9ca 	bl	8004ea0 <USBD_CtlSendStatus>
        break;
 8004b0c:	e012      	b.n	8004b34 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0018      	movs	r0, r3
 8004b12:	f000 f9c5 	bl	8004ea0 <USBD_CtlSendStatus>
        break;
 8004b16:	e00d      	b.n	8004b34 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0011      	movs	r1, r2
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f000 f8f9 	bl	8004d16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <USBD_SetConfig+0x144>)
 8004b26:	781a      	ldrb	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	0011      	movs	r1, r2
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7ff f87b 	bl	8003c28 <USBD_ClrClassConfig>
        break;
 8004b32:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8004b34:	46bd      	mov	sp, r7
 8004b36:	b002      	add	sp, #8
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	46c0      	nop			; (mov r8, r8)
 8004b3c:	200002d4 	.word	0x200002d4

08004b40 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	88db      	ldrh	r3, [r3, #6]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d006      	beq.n	8004b60 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	0011      	movs	r1, r2
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f000 f8dc 	bl	8004d16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004b5e:	e025      	b.n	8004bac <USBD_GetConfig+0x6c>
    switch (pdev->dev_state)
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	23a7      	movs	r3, #167	; 0xa7
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	5cd3      	ldrb	r3, [r2, r3]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	db18      	blt.n	8004b9e <USBD_GetConfig+0x5e>
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	dd02      	ble.n	8004b76 <USBD_GetConfig+0x36>
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d00c      	beq.n	8004b8e <USBD_GetConfig+0x4e>
 8004b74:	e013      	b.n	8004b9e <USBD_GetConfig+0x5e>
        pdev->dev_default_config = 0U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3308      	adds	r3, #8
 8004b80:	0019      	movs	r1, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	0018      	movs	r0, r3
 8004b88:	f000 f944 	bl	8004e14 <USBD_CtlSendData>
        break;
 8004b8c:	e00e      	b.n	8004bac <USBD_GetConfig+0x6c>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	1d19      	adds	r1, r3, #4
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	0018      	movs	r0, r3
 8004b98:	f000 f93c 	bl	8004e14 <USBD_CtlSendData>
        break;
 8004b9c:	e006      	b.n	8004bac <USBD_GetConfig+0x6c>
        USBD_CtlError(pdev, req);
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	0011      	movs	r1, r2
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f000 f8b6 	bl	8004d16 <USBD_CtlError>
        break;
 8004baa:	46c0      	nop			; (mov r8, r8)
}
 8004bac:	46c0      	nop			; (mov r8, r8)
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	b002      	add	sp, #8
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	23a7      	movs	r3, #167	; 0xa7
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	5cd3      	ldrb	r3, [r2, r3]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d822      	bhi.n	8004c12 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	88db      	ldrh	r3, [r3, #6]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d006      	beq.n	8004be2 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	0011      	movs	r1, r2
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f000 f89b 	bl	8004d16 <USBD_CtlError>
        break;
 8004be0:	e01e      	b.n	8004c20 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	23a9      	movs	r3, #169	; 0xa9
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	58d3      	ldr	r3, [r2, r3]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	330c      	adds	r3, #12
 8004c04:	0019      	movs	r1, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f000 f902 	bl	8004e14 <USBD_CtlSendData>
      break;
 8004c10:	e006      	b.n	8004c20 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	0011      	movs	r1, r2
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 f87c 	bl	8004d16 <USBD_CtlError>
      break;
 8004c1e:	46c0      	nop			; (mov r8, r8)
  }
}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b002      	add	sp, #8
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	885b      	ldrh	r3, [r3, #2]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d108      	bne.n	8004c4c <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	23a9      	movs	r3, #169	; 0xa9
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	2101      	movs	r1, #1
 8004c42:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	0018      	movs	r0, r3
 8004c48:	f000 f92a 	bl	8004ea0 <USBD_CtlSendStatus>
  }
}
 8004c4c:	46c0      	nop			; (mov r8, r8)
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b002      	add	sp, #8
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	23a7      	movs	r3, #167	; 0xa7
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	5cd3      	ldrb	r3, [r2, r3]
 8004c66:	3b01      	subs	r3, #1
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d80d      	bhi.n	8004c88 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	885b      	ldrh	r3, [r3, #2]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d110      	bne.n	8004c96 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	23a9      	movs	r3, #169	; 0xa9
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	0018      	movs	r0, r3
 8004c82:	f000 f90d 	bl	8004ea0 <USBD_CtlSendStatus>
      }
      break;
 8004c86:	e006      	b.n	8004c96 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	0011      	movs	r1, r2
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f000 f841 	bl	8004d16 <USBD_CtlError>
      break;
 8004c94:	e000      	b.n	8004c98 <USBD_ClrFeature+0x44>
      break;
 8004c96:	46c0      	nop			; (mov r8, r8)
  }
}
 8004c98:	46c0      	nop			; (mov r8, r8)
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b002      	add	sp, #8
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	785a      	ldrb	r2, [r3, #1]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	3302      	adds	r3, #2
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	3303      	adds	r3, #3
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	021b      	lsls	r3, r3, #8
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	18d3      	adds	r3, r2, r3
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	3305      	adds	r3, #5
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	18d3      	adds	r3, r2, r3
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	3306      	adds	r3, #6
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	3307      	adds	r3, #7
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	18d3      	adds	r3, r2, r3
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	80da      	strh	r2, [r3, #6]

}
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	46bd      	mov	sp, r7
 8004d12:	b002      	add	sp, #8
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	0018      	movs	r0, r3
 8004d26:	f000 fade 	bl	80052e6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	0018      	movs	r0, r3
 8004d30:	f000 fad9 	bl	80052e6 <USBD_LL_StallEP>
}
 8004d34:	46c0      	nop			; (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b002      	add	sp, #8
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004d3c:	b590      	push	{r4, r7, lr}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004d48:	2317      	movs	r3, #23
 8004d4a:	18fb      	adds	r3, r7, r3
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d03d      	beq.n	8004dd2 <USBD_GetString+0x96>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	0018      	movs	r0, r3
 8004d5a:	f000 f83e 	bl	8004dda <USBD_GetLen>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	3301      	adds	r3, #1
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	18db      	adds	r3, r3, r3
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004d6c:	2017      	movs	r0, #23
 8004d6e:	183b      	adds	r3, r7, r0
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	183a      	adds	r2, r7, r0
 8004d74:	1c59      	adds	r1, r3, #1
 8004d76:	7011      	strb	r1, [r2, #0]
 8004d78:	001a      	movs	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	189b      	adds	r3, r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004d84:	183b      	adds	r3, r7, r0
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	183a      	adds	r2, r7, r0
 8004d8a:	1c59      	adds	r1, r3, #1
 8004d8c:	7011      	strb	r1, [r2, #0]
 8004d8e:	001a      	movs	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	2203      	movs	r2, #3
 8004d96:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004d98:	e017      	b.n	8004dca <USBD_GetString+0x8e>
    {
      unicode[idx++] = *desc++;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	60fa      	str	r2, [r7, #12]
 8004da0:	2417      	movs	r4, #23
 8004da2:	193a      	adds	r2, r7, r4
 8004da4:	7812      	ldrb	r2, [r2, #0]
 8004da6:	1939      	adds	r1, r7, r4
 8004da8:	1c50      	adds	r0, r2, #1
 8004daa:	7008      	strb	r0, [r1, #0]
 8004dac:	0011      	movs	r1, r2
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	1852      	adds	r2, r2, r1
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8004db6:	193b      	adds	r3, r7, r4
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	193a      	adds	r2, r7, r4
 8004dbc:	1c59      	adds	r1, r3, #1
 8004dbe:	7011      	strb	r1, [r2, #0]
 8004dc0:	001a      	movs	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	189b      	adds	r3, r3, r2
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e3      	bne.n	8004d9a <USBD_GetString+0x5e>
    }
  }
}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	b007      	add	sp, #28
 8004dd8:	bd90      	pop	{r4, r7, pc}

08004dda <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8004de2:	230f      	movs	r3, #15
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8004dea:	e008      	b.n	8004dfe <USBD_GetLen+0x24>
  {
    len++;
 8004dec:	210f      	movs	r1, #15
 8004dee:	187b      	adds	r3, r7, r1
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	187b      	adds	r3, r7, r1
 8004df4:	3201      	adds	r2, #1
 8004df6:	701a      	strb	r2, [r3, #0]
    buf++;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1f2      	bne.n	8004dec <USBD_GetLen+0x12>
  }

  return len;
 8004e06:	230f      	movs	r3, #15
 8004e08:	18fb      	adds	r3, r7, r3
 8004e0a:	781b      	ldrb	r3, [r3, #0]
}
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	b004      	add	sp, #16
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	1dbb      	adds	r3, r7, #6
 8004e20:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	23a5      	movs	r3, #165	; 0xa5
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	2102      	movs	r1, #2
 8004e2a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8004e2c:	1dbb      	adds	r3, r7, #6
 8004e2e:	881a      	ldrh	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8004e34:	1dbb      	adds	r3, r7, #6
 8004e36:	881a      	ldrh	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004e3c:	1dbb      	adds	r3, r7, #6
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	2100      	movs	r1, #0
 8004e46:	f000 fafd 	bl	8005444 <USBD_LL_Transmit>

  return USBD_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b004      	add	sp, #16
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	1dbb      	adds	r3, r7, #6
 8004e60:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004e62:	1dbb      	adds	r3, r7, #6
 8004e64:	881b      	ldrh	r3, [r3, #0]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	f000 faea 	bl	8005444 <USBD_LL_Transmit>

  return USBD_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	0018      	movs	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b004      	add	sp, #16
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	1dbb      	adds	r3, r7, #6
 8004e86:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004e88:	1dbb      	adds	r3, r7, #6
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	2100      	movs	r1, #0
 8004e92:	f000 fb0f 	bl	80054b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	0018      	movs	r0, r3
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b004      	add	sp, #16
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	23a5      	movs	r3, #165	; 0xa5
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	2104      	movs	r1, #4
 8004eb0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2100      	movs	r1, #0
 8004eba:	f000 fac3 	bl	8005444 <USBD_LL_Transmit>

  return USBD_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b002      	add	sp, #8
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	23a5      	movs	r3, #165	; 0xa5
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	2105      	movs	r1, #5
 8004ed8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	2300      	movs	r3, #0
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	f000 fae7 	bl	80054b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	0018      	movs	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b002      	add	sp, #8
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <USBD_GetRxCount>:
* @param  pdev: device instance
* @param  ep_addr: endpoint address
* @retval Rx Data blength
*/
uint32_t USBD_GetRxCount(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	000a      	movs	r2, r1
 8004efa:	1cfb      	adds	r3, r7, #3
 8004efc:	701a      	strb	r2, [r3, #0]
  return USBD_LL_GetRxDataSize(pdev, ep_addr);
 8004efe:	1cfb      	adds	r3, r7, #3
 8004f00:	781a      	ldrb	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	0011      	movs	r1, r2
 8004f06:	0018      	movs	r0, r3
 8004f08:	f000 fb0c 	bl	8005524 <USBD_LL_GetRxDataSize>
 8004f0c:	0003      	movs	r3, r0
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b002      	add	sp, #8
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a0e      	ldr	r2, [pc, #56]	; (8004f60 <HAL_PCD_MspInit+0x48>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d115      	bne.n	8004f56 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004f2a:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <HAL_PCD_MspInit+0x4c>)
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	; (8004f64 <HAL_PCD_MspInit+0x4c>)
 8004f30:	2180      	movs	r1, #128	; 0x80
 8004f32:	0409      	lsls	r1, r1, #16
 8004f34:	430a      	orrs	r2, r1
 8004f36:	61da      	str	r2, [r3, #28]
 8004f38:	4b0a      	ldr	r3, [pc, #40]	; (8004f64 <HAL_PCD_MspInit+0x4c>)
 8004f3a:	69da      	ldr	r2, [r3, #28]
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	4013      	ands	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004f46:	2200      	movs	r2, #0
 8004f48:	2100      	movs	r1, #0
 8004f4a:	201f      	movs	r0, #31
 8004f4c:	f7fb fc9c 	bl	8000888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8004f50:	201f      	movs	r0, #31
 8004f52:	f7fb fcae 	bl	80008b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b004      	add	sp, #16
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	40005c00 	.word	0x40005c00
 8004f64:	40021000 	.word	0x40021000

08004f68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	239c      	movs	r3, #156	; 0x9c
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	58d2      	ldr	r2, [r2, r3]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	218c      	movs	r1, #140	; 0x8c
 8004f7c:	0089      	lsls	r1, r1, #2
 8004f7e:	468c      	mov	ip, r1
 8004f80:	4463      	add	r3, ip
 8004f82:	0019      	movs	r1, r3
 8004f84:	0010      	movs	r0, r2
 8004f86:	f7fe fe65 	bl	8003c54 <USBD_LL_SetupStage>
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b002      	add	sp, #8
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	000a      	movs	r2, r1
 8004f9c:	1cfb      	adds	r3, r7, #3
 8004f9e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	239c      	movs	r3, #156	; 0x9c
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	58d0      	ldr	r0, [r2, r3]
 8004fa8:	1cfb      	adds	r3, r7, #3
 8004faa:	781a      	ldrb	r2, [r3, #0]
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	239e      	movs	r3, #158	; 0x9e
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	0152      	lsls	r2, r2, #5
 8004fb4:	188a      	adds	r2, r1, r2
 8004fb6:	18d3      	adds	r3, r2, r3
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	1cfb      	adds	r3, r7, #3
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	f7fe fea4 	bl	8003d0c <USBD_LL_DataOutStage>
}
 8004fc4:	46c0      	nop			; (mov r8, r8)
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b002      	add	sp, #8
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	000a      	movs	r2, r1
 8004fd6:	1cfb      	adds	r3, r7, #3
 8004fd8:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	239c      	movs	r3, #156	; 0x9c
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	58d0      	ldr	r0, [r2, r3]
 8004fe2:	1cfb      	adds	r3, r7, #3
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	015b      	lsls	r3, r3, #5
 8004fea:	18d3      	adds	r3, r2, r3
 8004fec:	333c      	adds	r3, #60	; 0x3c
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	1cfb      	adds	r3, r7, #3
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	0019      	movs	r1, r3
 8004ff6:	f7fe ff0b 	bl	8003e10 <USBD_LL_DataInStage>
}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b002      	add	sp, #8
 8005000:	bd80      	pop	{r7, pc}

08005002 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	239c      	movs	r3, #156	; 0x9c
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	58d3      	ldr	r3, [r2, r3]
 8005012:	0018      	movs	r0, r3
 8005014:	f7ff f842 	bl	800409c <USBD_LL_SOF>
}
 8005018:	46c0      	nop			; (mov r8, r8)
 800501a:	46bd      	mov	sp, r7
 800501c:	b002      	add	sp, #8
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005028:	230f      	movs	r3, #15
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d001      	beq.n	800503c <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8005038:	f7fb fa74 	bl	8000524 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	239c      	movs	r3, #156	; 0x9c
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	58d2      	ldr	r2, [r2, r3]
 8005044:	230f      	movs	r3, #15
 8005046:	18fb      	adds	r3, r7, r3
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	0019      	movs	r1, r3
 800504c:	0010      	movs	r0, r2
 800504e:	f7fe ffe4 	bl	800401a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	239c      	movs	r3, #156	; 0x9c
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	58d3      	ldr	r3, [r2, r3]
 800505a:	0018      	movs	r0, r3
 800505c:	f7fe ff95 	bl	8003f8a <USBD_LL_Reset>
}
 8005060:	46c0      	nop			; (mov r8, r8)
 8005062:	46bd      	mov	sp, r7
 8005064:	b004      	add	sp, #16
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	239c      	movs	r3, #156	; 0x9c
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	58d3      	ldr	r3, [r2, r3]
 8005078:	0018      	movs	r0, r3
 800507a:	f7fe ffdf 	bl	800403c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005086:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_PCD_SuspendCallback+0x34>)
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	4b04      	ldr	r3, [pc, #16]	; (800509c <HAL_PCD_SuspendCallback+0x34>)
 800508c:	2106      	movs	r1, #6
 800508e:	430a      	orrs	r2, r1
 8005090:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	46bd      	mov	sp, r7
 8005096:	b002      	add	sp, #8
 8005098:	bd80      	pop	{r7, pc}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	e000ed00 	.word	0xe000ed00

080050a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <HAL_PCD_ResumeCallback+0x38>)
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	4b08      	ldr	r3, [pc, #32]	; (80050d8 <HAL_PCD_ResumeCallback+0x38>)
 80050b6:	2106      	movs	r1, #6
 80050b8:	438a      	bics	r2, r1
 80050ba:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 80050bc:	f000 fa5c 	bl	8005578 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	239c      	movs	r3, #156	; 0x9c
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	58d3      	ldr	r3, [r2, r3]
 80050c8:	0018      	movs	r0, r3
 80050ca:	f7fe ffcf 	bl	800406c <USBD_LL_Resume>
}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b002      	add	sp, #8
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	46c0      	nop			; (mov r8, r8)
 80050d8:	e000ed00 	.word	0xe000ed00

080050dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80050e4:	4a23      	ldr	r2, [pc, #140]	; (8005174 <USBD_LL_Init+0x98>)
 80050e6:	239c      	movs	r3, #156	; 0x9c
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	23b0      	movs	r3, #176	; 0xb0
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	491f      	ldr	r1, [pc, #124]	; (8005174 <USBD_LL_Init+0x98>)
 80050f6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80050f8:	4b1e      	ldr	r3, [pc, #120]	; (8005174 <USBD_LL_Init+0x98>)
 80050fa:	4a1f      	ldr	r2, [pc, #124]	; (8005178 <USBD_LL_Init+0x9c>)
 80050fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80050fe:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <USBD_LL_Init+0x98>)
 8005100:	2208      	movs	r2, #8
 8005102:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <USBD_LL_Init+0x98>)
 8005106:	2202      	movs	r2, #2
 8005108:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800510a:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <USBD_LL_Init+0x98>)
 800510c:	2202      	movs	r2, #2
 800510e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005110:	4b18      	ldr	r3, [pc, #96]	; (8005174 <USBD_LL_Init+0x98>)
 8005112:	2200      	movs	r2, #0
 8005114:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <USBD_LL_Init+0x98>)
 8005118:	2200      	movs	r2, #0
 800511a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800511c:	4b15      	ldr	r3, [pc, #84]	; (8005174 <USBD_LL_Init+0x98>)
 800511e:	2200      	movs	r2, #0
 8005120:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <USBD_LL_Init+0x98>)
 8005124:	0018      	movs	r0, r3
 8005126:	f7fb fd93 	bl	8000c50 <HAL_PCD_Init>
 800512a:	1e03      	subs	r3, r0, #0
 800512c:	d001      	beq.n	8005132 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800512e:	f7fb f9f9 	bl	8000524 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	23b0      	movs	r3, #176	; 0xb0
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	58d0      	ldr	r0, [r2, r3]
 800513a:	2318      	movs	r3, #24
 800513c:	2200      	movs	r2, #0
 800513e:	2100      	movs	r1, #0
 8005140:	f7fc fd34 	bl	8001bac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	23b0      	movs	r3, #176	; 0xb0
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	58d0      	ldr	r0, [r2, r3]
 800514c:	2358      	movs	r3, #88	; 0x58
 800514e:	2200      	movs	r2, #0
 8005150:	2180      	movs	r1, #128	; 0x80
 8005152:	f7fc fd2b 	bl	8001bac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	23b0      	movs	r3, #176	; 0xb0
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	58d0      	ldr	r0, [r2, r3]
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	2200      	movs	r2, #0
 8005164:	2181      	movs	r1, #129	; 0x81
 8005166:	f7fc fd21 	bl	8001bac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	0018      	movs	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	b002      	add	sp, #8
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20000334 	.word	0x20000334
 8005178:	40005c00 	.word	0x40005c00

0800517c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800517c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005184:	210f      	movs	r1, #15
 8005186:	187b      	adds	r3, r7, r1
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800518c:	260e      	movs	r6, #14
 800518e:	19bb      	adds	r3, r7, r6
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	23b0      	movs	r3, #176	; 0xb0
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	58d3      	ldr	r3, [r2, r3]
 800519c:	000d      	movs	r5, r1
 800519e:	187c      	adds	r4, r7, r1
 80051a0:	0018      	movs	r0, r3
 80051a2:	f7fb fe39 	bl	8000e18 <HAL_PCD_Start>
 80051a6:	0003      	movs	r3, r0
 80051a8:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80051aa:	19bc      	adds	r4, r7, r6
 80051ac:	0029      	movs	r1, r5
 80051ae:	187b      	adds	r3, r7, r1
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	0018      	movs	r0, r3
 80051b4:	f000 f9e7 	bl	8005586 <USBD_Get_USB_Status>
 80051b8:	0003      	movs	r3, r0
 80051ba:	7023      	strb	r3, [r4, #0]
  
  return usb_status;
 80051bc:	19bb      	adds	r3, r7, r6
 80051be:	781b      	ldrb	r3, [r3, #0]
}
 80051c0:	0018      	movs	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b005      	add	sp, #20
 80051c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051c8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80051c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	000c      	movs	r4, r1
 80051d2:	0010      	movs	r0, r2
 80051d4:	0019      	movs	r1, r3
 80051d6:	1cfb      	adds	r3, r7, #3
 80051d8:	1c22      	adds	r2, r4, #0
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	1cbb      	adds	r3, r7, #2
 80051de:	1c02      	adds	r2, r0, #0
 80051e0:	701a      	strb	r2, [r3, #0]
 80051e2:	003b      	movs	r3, r7
 80051e4:	1c0a      	adds	r2, r1, #0
 80051e6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80051e8:	260f      	movs	r6, #15
 80051ea:	19bb      	adds	r3, r7, r6
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80051f0:	250e      	movs	r5, #14
 80051f2:	197b      	adds	r3, r7, r5
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	23b0      	movs	r3, #176	; 0xb0
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	58d0      	ldr	r0, [r2, r3]
 8005200:	19bc      	adds	r4, r7, r6
 8005202:	1cbb      	adds	r3, r7, #2
 8005204:	781d      	ldrb	r5, [r3, #0]
 8005206:	003b      	movs	r3, r7
 8005208:	881a      	ldrh	r2, [r3, #0]
 800520a:	1cfb      	adds	r3, r7, #3
 800520c:	7819      	ldrb	r1, [r3, #0]
 800520e:	002b      	movs	r3, r5
 8005210:	f7fb ffdb 	bl	80011ca <HAL_PCD_EP_Open>
 8005214:	0003      	movs	r3, r0
 8005216:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005218:	250e      	movs	r5, #14
 800521a:	197c      	adds	r4, r7, r5
 800521c:	19bb      	adds	r3, r7, r6
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	0018      	movs	r0, r3
 8005222:	f000 f9b0 	bl	8005586 <USBD_Get_USB_Status>
 8005226:	0003      	movs	r3, r0
 8005228:	7023      	strb	r3, [r4, #0]
 
  return usb_status;
 800522a:	197b      	adds	r3, r7, r5
 800522c:	781b      	ldrb	r3, [r3, #0]
}
 800522e:	0018      	movs	r0, r3
 8005230:	46bd      	mov	sp, r7
 8005232:	b005      	add	sp, #20
 8005234:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005236 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	000a      	movs	r2, r1
 8005240:	1cfb      	adds	r3, r7, #3
 8005242:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005244:	210f      	movs	r1, #15
 8005246:	187b      	adds	r3, r7, r1
 8005248:	2200      	movs	r2, #0
 800524a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800524c:	260e      	movs	r6, #14
 800524e:	19bb      	adds	r3, r7, r6
 8005250:	2200      	movs	r2, #0
 8005252:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	23b0      	movs	r3, #176	; 0xb0
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	58d2      	ldr	r2, [r2, r3]
 800525c:	000d      	movs	r5, r1
 800525e:	187c      	adds	r4, r7, r1
 8005260:	1cfb      	adds	r3, r7, #3
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	0019      	movs	r1, r3
 8005266:	0010      	movs	r0, r2
 8005268:	f7fc f821 	bl	80012ae <HAL_PCD_EP_Close>
 800526c:	0003      	movs	r3, r0
 800526e:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005270:	19bc      	adds	r4, r7, r6
 8005272:	0029      	movs	r1, r5
 8005274:	187b      	adds	r3, r7, r1
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	0018      	movs	r0, r3
 800527a:	f000 f984 	bl	8005586 <USBD_Get_USB_Status>
 800527e:	0003      	movs	r3, r0
 8005280:	7023      	strb	r3, [r4, #0]

  return usb_status;  
 8005282:	19bb      	adds	r3, r7, r6
 8005284:	781b      	ldrb	r3, [r3, #0]
}
 8005286:	0018      	movs	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	b005      	add	sp, #20
 800528c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800528e <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800528e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	000a      	movs	r2, r1
 8005298:	1cfb      	adds	r3, r7, #3
 800529a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800529c:	210f      	movs	r1, #15
 800529e:	187b      	adds	r3, r7, r1
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80052a4:	260e      	movs	r6, #14
 80052a6:	19bb      	adds	r3, r7, r6
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	23b0      	movs	r3, #176	; 0xb0
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	58d2      	ldr	r2, [r2, r3]
 80052b4:	000d      	movs	r5, r1
 80052b6:	187c      	adds	r4, r7, r1
 80052b8:	1cfb      	adds	r3, r7, #3
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	0019      	movs	r1, r3
 80052be:	0010      	movs	r0, r2
 80052c0:	f7fc f994 	bl	80015ec <HAL_PCD_EP_Flush>
 80052c4:	0003      	movs	r3, r0
 80052c6:	7023      	strb	r3, [r4, #0]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80052c8:	19bc      	adds	r4, r7, r6
 80052ca:	0029      	movs	r1, r5
 80052cc:	187b      	adds	r3, r7, r1
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f000 f958 	bl	8005586 <USBD_Get_USB_Status>
 80052d6:	0003      	movs	r3, r0
 80052d8:	7023      	strb	r3, [r4, #0]
  
  return usb_status;  
 80052da:	19bb      	adds	r3, r7, r6
 80052dc:	781b      	ldrb	r3, [r3, #0]
}
 80052de:	0018      	movs	r0, r3
 80052e0:	46bd      	mov	sp, r7
 80052e2:	b005      	add	sp, #20
 80052e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052e6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80052e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e8:	b085      	sub	sp, #20
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	000a      	movs	r2, r1
 80052f0:	1cfb      	adds	r3, r7, #3
 80052f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80052f4:	210f      	movs	r1, #15
 80052f6:	187b      	adds	r3, r7, r1
 80052f8:	2200      	movs	r2, #0
 80052fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80052fc:	260e      	movs	r6, #14
 80052fe:	19bb      	adds	r3, r7, r6
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	23b0      	movs	r3, #176	; 0xb0
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	58d2      	ldr	r2, [r2, r3]
 800530c:	000d      	movs	r5, r1
 800530e:	187c      	adds	r4, r7, r1
 8005310:	1cfb      	adds	r3, r7, #3
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	0019      	movs	r1, r3
 8005316:	0010      	movs	r0, r2
 8005318:	f7fc f8aa 	bl	8001470 <HAL_PCD_EP_SetStall>
 800531c:	0003      	movs	r3, r0
 800531e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005320:	19bc      	adds	r4, r7, r6
 8005322:	0029      	movs	r1, r5
 8005324:	187b      	adds	r3, r7, r1
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	0018      	movs	r0, r3
 800532a:	f000 f92c 	bl	8005586 <USBD_Get_USB_Status>
 800532e:	0003      	movs	r3, r0
 8005330:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8005332:	19bb      	adds	r3, r7, r6
 8005334:	781b      	ldrb	r3, [r3, #0]
}
 8005336:	0018      	movs	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	b005      	add	sp, #20
 800533c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800533e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800533e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	000a      	movs	r2, r1
 8005348:	1cfb      	adds	r3, r7, #3
 800534a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800534c:	210f      	movs	r1, #15
 800534e:	187b      	adds	r3, r7, r1
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005354:	260e      	movs	r6, #14
 8005356:	19bb      	adds	r3, r7, r6
 8005358:	2200      	movs	r2, #0
 800535a:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	23b0      	movs	r3, #176	; 0xb0
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	58d2      	ldr	r2, [r2, r3]
 8005364:	000d      	movs	r5, r1
 8005366:	187c      	adds	r4, r7, r1
 8005368:	1cfb      	adds	r3, r7, #3
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	0019      	movs	r1, r3
 800536e:	0010      	movs	r0, r2
 8005370:	f7fc f8e4 	bl	800153c <HAL_PCD_EP_ClrStall>
 8005374:	0003      	movs	r3, r0
 8005376:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005378:	19bc      	adds	r4, r7, r6
 800537a:	0029      	movs	r1, r5
 800537c:	187b      	adds	r3, r7, r1
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	0018      	movs	r0, r3
 8005382:	f000 f900 	bl	8005586 <USBD_Get_USB_Status>
 8005386:	0003      	movs	r3, r0
 8005388:	7023      	strb	r3, [r4, #0]

  return usb_status; 
 800538a:	19bb      	adds	r3, r7, r6
 800538c:	781b      	ldrb	r3, [r3, #0]
}
 800538e:	0018      	movs	r0, r3
 8005390:	46bd      	mov	sp, r7
 8005392:	b005      	add	sp, #20
 8005394:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005396 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	000a      	movs	r2, r1
 80053a0:	1cfb      	adds	r3, r7, #3
 80053a2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	23b0      	movs	r3, #176	; 0xb0
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	58d3      	ldr	r3, [r2, r3]
 80053ac:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80053ae:	1cfb      	adds	r3, r7, #3
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	b25b      	sxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	da0a      	bge.n	80053ce <USBD_LL_IsStallEP+0x38>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80053b8:	1cfb      	adds	r3, r7, #3
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	227f      	movs	r2, #127	; 0x7f
 80053be:	4013      	ands	r3, r2
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	212a      	movs	r1, #42	; 0x2a
 80053c4:	015b      	lsls	r3, r3, #5
 80053c6:	18d3      	adds	r3, r2, r3
 80053c8:	185b      	adds	r3, r3, r1
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	e00a      	b.n	80053e4 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80053ce:	1cfb      	adds	r3, r7, #3
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	227f      	movs	r2, #127	; 0x7f
 80053d4:	401a      	ands	r2, r3
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	2395      	movs	r3, #149	; 0x95
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	0152      	lsls	r2, r2, #5
 80053de:	188a      	adds	r2, r1, r2
 80053e0:	18d3      	adds	r3, r2, r3
 80053e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80053e4:	0018      	movs	r0, r3
 80053e6:	46bd      	mov	sp, r7
 80053e8:	b004      	add	sp, #16
 80053ea:	bd80      	pop	{r7, pc}

080053ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80053ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	000a      	movs	r2, r1
 80053f6:	1cfb      	adds	r3, r7, #3
 80053f8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80053fa:	210f      	movs	r1, #15
 80053fc:	187b      	adds	r3, r7, r1
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005402:	260e      	movs	r6, #14
 8005404:	19bb      	adds	r3, r7, r6
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	23b0      	movs	r3, #176	; 0xb0
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	58d2      	ldr	r2, [r2, r3]
 8005412:	000d      	movs	r5, r1
 8005414:	187c      	adds	r4, r7, r1
 8005416:	1cfb      	adds	r3, r7, #3
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	0019      	movs	r1, r3
 800541c:	0010      	movs	r0, r2
 800541e:	f7fb fea9 	bl	8001174 <HAL_PCD_SetAddress>
 8005422:	0003      	movs	r3, r0
 8005424:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005426:	19bc      	adds	r4, r7, r6
 8005428:	0029      	movs	r1, r5
 800542a:	187b      	adds	r3, r7, r1
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	0018      	movs	r0, r3
 8005430:	f000 f8a9 	bl	8005586 <USBD_Get_USB_Status>
 8005434:	0003      	movs	r3, r0
 8005436:	7023      	strb	r3, [r4, #0]
 
  return usb_status;  
 8005438:	19bb      	adds	r3, r7, r6
 800543a:	781b      	ldrb	r3, [r3, #0]
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	b005      	add	sp, #20
 8005442:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005444 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	0008      	movs	r0, r1
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	0019      	movs	r1, r3
 8005452:	230b      	movs	r3, #11
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	1c02      	adds	r2, r0, #0
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	2408      	movs	r4, #8
 800545c:	193b      	adds	r3, r7, r4
 800545e:	1c0a      	adds	r2, r1, #0
 8005460:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005462:	2117      	movs	r1, #23
 8005464:	187b      	adds	r3, r7, r1
 8005466:	2200      	movs	r2, #0
 8005468:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800546a:	2516      	movs	r5, #22
 800546c:	197b      	adds	r3, r7, r5
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	23b0      	movs	r3, #176	; 0xb0
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	58d0      	ldr	r0, [r2, r3]
 800547a:	193b      	adds	r3, r7, r4
 800547c:	881d      	ldrh	r5, [r3, #0]
 800547e:	000e      	movs	r6, r1
 8005480:	187c      	adds	r4, r7, r1
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	230b      	movs	r3, #11
 8005486:	18fb      	adds	r3, r7, r3
 8005488:	7819      	ldrb	r1, [r3, #0]
 800548a:	002b      	movs	r3, r5
 800548c:	f7fb ffb0 	bl	80013f0 <HAL_PCD_EP_Transmit>
 8005490:	0003      	movs	r3, r0
 8005492:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005494:	2516      	movs	r5, #22
 8005496:	197c      	adds	r4, r7, r5
 8005498:	0031      	movs	r1, r6
 800549a:	187b      	adds	r3, r7, r1
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	0018      	movs	r0, r3
 80054a0:	f000 f871 	bl	8005586 <USBD_Get_USB_Status>
 80054a4:	0003      	movs	r3, r0
 80054a6:	7023      	strb	r3, [r4, #0]
  
  return usb_status;    
 80054a8:	197b      	adds	r3, r7, r5
 80054aa:	781b      	ldrb	r3, [r3, #0]
}
 80054ac:	0018      	movs	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b007      	add	sp, #28
 80054b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80054b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	0008      	movs	r0, r1
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	0019      	movs	r1, r3
 80054c2:	230b      	movs	r3, #11
 80054c4:	18fb      	adds	r3, r7, r3
 80054c6:	1c02      	adds	r2, r0, #0
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	2408      	movs	r4, #8
 80054cc:	193b      	adds	r3, r7, r4
 80054ce:	1c0a      	adds	r2, r1, #0
 80054d0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80054d2:	2117      	movs	r1, #23
 80054d4:	187b      	adds	r3, r7, r1
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80054da:	2516      	movs	r5, #22
 80054dc:	197b      	adds	r3, r7, r5
 80054de:	2200      	movs	r2, #0
 80054e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	23b0      	movs	r3, #176	; 0xb0
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	58d0      	ldr	r0, [r2, r3]
 80054ea:	193b      	adds	r3, r7, r4
 80054ec:	881d      	ldrh	r5, [r3, #0]
 80054ee:	000e      	movs	r6, r1
 80054f0:	187c      	adds	r4, r7, r1
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	230b      	movs	r3, #11
 80054f6:	18fb      	adds	r3, r7, r3
 80054f8:	7819      	ldrb	r1, [r3, #0]
 80054fa:	002b      	movs	r3, r5
 80054fc:	f7fb ff22 	bl	8001344 <HAL_PCD_EP_Receive>
 8005500:	0003      	movs	r3, r0
 8005502:	7023      	strb	r3, [r4, #0]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005504:	2516      	movs	r5, #22
 8005506:	197c      	adds	r4, r7, r5
 8005508:	0031      	movs	r1, r6
 800550a:	187b      	adds	r3, r7, r1
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	0018      	movs	r0, r3
 8005510:	f000 f839 	bl	8005586 <USBD_Get_USB_Status>
 8005514:	0003      	movs	r3, r0
 8005516:	7023      	strb	r3, [r4, #0]
  	
  return usb_status; 
 8005518:	197b      	adds	r3, r7, r5
 800551a:	781b      	ldrb	r3, [r3, #0]
}
 800551c:	0018      	movs	r0, r3
 800551e:	46bd      	mov	sp, r7
 8005520:	b007      	add	sp, #28
 8005522:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005524 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	000a      	movs	r2, r1
 800552e:	1cfb      	adds	r3, r7, #3
 8005530:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	23b0      	movs	r3, #176	; 0xb0
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	58d2      	ldr	r2, [r2, r3]
 800553a:	1cfb      	adds	r3, r7, #3
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	0019      	movs	r1, r3
 8005540:	0010      	movs	r0, r2
 8005542:	f7fb ff40 	bl	80013c6 <HAL_PCD_EP_GetRxCount>
 8005546:	0003      	movs	r3, r0
}
 8005548:	0018      	movs	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	b002      	add	sp, #8
 800554e:	bd80      	pop	{r7, pc}

08005550 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005558:	4b02      	ldr	r3, [pc, #8]	; (8005564 <USBD_static_malloc+0x14>)
}
 800555a:	0018      	movs	r0, r3
 800555c:	46bd      	mov	sp, r7
 800555e:	b002      	add	sp, #8
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	200002d8 	.word	0x200002d8

08005568 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]

}
 8005570:	46c0      	nop			; (mov r8, r8)
 8005572:	46bd      	mov	sp, r7
 8005574:	b002      	add	sp, #8
 8005576:	bd80      	pop	{r7, pc}

08005578 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800557c:	f7fa fea8 	bl	80002d0 <SystemClock_Config>
}
 8005580:	46c0      	nop			; (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b084      	sub	sp, #16
 800558a:	af00      	add	r7, sp, #0
 800558c:	0002      	movs	r2, r0
 800558e:	1dfb      	adds	r3, r7, #7
 8005590:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005592:	230f      	movs	r3, #15
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	2200      	movs	r2, #0
 8005598:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800559a:	1dfb      	adds	r3, r7, #7
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d00d      	beq.n	80055be <USBD_Get_USB_Status+0x38>
 80055a2:	dc02      	bgt.n	80055aa <USBD_Get_USB_Status+0x24>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d005      	beq.n	80055b4 <USBD_Get_USB_Status+0x2e>
 80055a8:	e018      	b.n	80055dc <USBD_Get_USB_Status+0x56>
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d00c      	beq.n	80055c8 <USBD_Get_USB_Status+0x42>
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d00f      	beq.n	80055d2 <USBD_Get_USB_Status+0x4c>
 80055b2:	e013      	b.n	80055dc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80055b4:	230f      	movs	r3, #15
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
    break;
 80055bc:	e013      	b.n	80055e6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80055be:	230f      	movs	r3, #15
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	2202      	movs	r2, #2
 80055c4:	701a      	strb	r2, [r3, #0]
    break;
 80055c6:	e00e      	b.n	80055e6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80055c8:	230f      	movs	r3, #15
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	2201      	movs	r2, #1
 80055ce:	701a      	strb	r2, [r3, #0]
    break;
 80055d0:	e009      	b.n	80055e6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80055d2:	230f      	movs	r3, #15
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	2202      	movs	r2, #2
 80055d8:	701a      	strb	r2, [r3, #0]
    break;
 80055da:	e004      	b.n	80055e6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80055dc:	230f      	movs	r3, #15
 80055de:	18fb      	adds	r3, r7, r3
 80055e0:	2202      	movs	r2, #2
 80055e2:	701a      	strb	r2, [r3, #0]
    break;
 80055e4:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80055e6:	230f      	movs	r3, #15
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	781b      	ldrb	r3, [r3, #0]
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b004      	add	sp, #16
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80055f8:	490f      	ldr	r1, [pc, #60]	; (8005638 <MX_USB_DEVICE_Init+0x44>)
 80055fa:	4b10      	ldr	r3, [pc, #64]	; (800563c <MX_USB_DEVICE_Init+0x48>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	0018      	movs	r0, r3
 8005600:	f7fe fa82 	bl	8003b08 <USBD_Init>
 8005604:	1e03      	subs	r3, r0, #0
 8005606:	d001      	beq.n	800560c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005608:	f7fa ff8c 	bl	8000524 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800560c:	4a0c      	ldr	r2, [pc, #48]	; (8005640 <MX_USB_DEVICE_Init+0x4c>)
 800560e:	4b0b      	ldr	r3, [pc, #44]	; (800563c <MX_USB_DEVICE_Init+0x48>)
 8005610:	0011      	movs	r1, r2
 8005612:	0018      	movs	r0, r3
 8005614:	f7fe faa9 	bl	8003b6a <USBD_RegisterClass>
 8005618:	1e03      	subs	r3, r0, #0
 800561a:	d001      	beq.n	8005620 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800561c:	f7fa ff82 	bl	8000524 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005620:	4b06      	ldr	r3, [pc, #24]	; (800563c <MX_USB_DEVICE_Init+0x48>)
 8005622:	0018      	movs	r0, r3
 8005624:	f7fe fac2 	bl	8003bac <USBD_Start>
 8005628:	1e03      	subs	r3, r0, #0
 800562a:	d001      	beq.n	8005630 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800562c:	f7fa ff7a 	bl	8000524 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	2000000c 	.word	0x2000000c
 800563c:	200005a8 	.word	0x200005a8
 8005640:	2000005c 	.word	0x2000005c

08005644 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	0002      	movs	r2, r0
 800564c:	6039      	str	r1, [r7, #0]
 800564e:	1dfb      	adds	r3, r7, #7
 8005650:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2212      	movs	r2, #18
 8005656:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005658:	4b02      	ldr	r3, [pc, #8]	; (8005664 <USBD_FS_DeviceDescriptor+0x20>)
}
 800565a:	0018      	movs	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	b002      	add	sp, #8
 8005660:	bd80      	pop	{r7, pc}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	20000028 	.word	0x20000028

08005668 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	0002      	movs	r2, r0
 8005670:	6039      	str	r1, [r7, #0]
 8005672:	1dfb      	adds	r3, r7, #7
 8005674:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2204      	movs	r2, #4
 800567a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800567c:	4b02      	ldr	r3, [pc, #8]	; (8005688 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800567e:	0018      	movs	r0, r3
 8005680:	46bd      	mov	sp, r7
 8005682:	b002      	add	sp, #8
 8005684:	bd80      	pop	{r7, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	2000003c 	.word	0x2000003c

0800568c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	0002      	movs	r2, r0
 8005694:	6039      	str	r1, [r7, #0]
 8005696:	1dfb      	adds	r3, r7, #7
 8005698:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800569a:	1dfb      	adds	r3, r7, #7
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	4908      	ldr	r1, [pc, #32]	; (80056c8 <USBD_FS_ProductStrDescriptor+0x3c>)
 80056a6:	4b09      	ldr	r3, [pc, #36]	; (80056cc <USBD_FS_ProductStrDescriptor+0x40>)
 80056a8:	0018      	movs	r0, r3
 80056aa:	f7ff fb47 	bl	8004d3c <USBD_GetString>
 80056ae:	e005      	b.n	80056bc <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	4905      	ldr	r1, [pc, #20]	; (80056c8 <USBD_FS_ProductStrDescriptor+0x3c>)
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <USBD_FS_ProductStrDescriptor+0x40>)
 80056b6:	0018      	movs	r0, r3
 80056b8:	f7ff fb40 	bl	8004d3c <USBD_GetString>
  }
  return USBD_StrDesc;
 80056bc:	4b02      	ldr	r3, [pc, #8]	; (80056c8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80056be:	0018      	movs	r0, r3
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b002      	add	sp, #8
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	2000086c 	.word	0x2000086c
 80056cc:	080062cc 	.word	0x080062cc

080056d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	0002      	movs	r2, r0
 80056d8:	6039      	str	r1, [r7, #0]
 80056da:	1dfb      	adds	r3, r7, #7
 80056dc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	4904      	ldr	r1, [pc, #16]	; (80056f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80056e4:	0018      	movs	r0, r3
 80056e6:	f7ff fb29 	bl	8004d3c <USBD_GetString>
  return USBD_StrDesc;
 80056ea:	4b02      	ldr	r3, [pc, #8]	; (80056f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80056ec:	0018      	movs	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b002      	add	sp, #8
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	2000086c 	.word	0x2000086c
 80056f8:	080062e4 	.word	0x080062e4

080056fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	0002      	movs	r2, r0
 8005704:	6039      	str	r1, [r7, #0]
 8005706:	1dfb      	adds	r3, r7, #7
 8005708:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	221a      	movs	r2, #26
 800570e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005710:	f000 f84c 	bl	80057ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005714:	4b02      	ldr	r3, [pc, #8]	; (8005720 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8005716:	0018      	movs	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	b002      	add	sp, #8
 800571c:	bd80      	pop	{r7, pc}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	20000040 	.word	0x20000040

08005724 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	0002      	movs	r2, r0
 800572c:	6039      	str	r1, [r7, #0]
 800572e:	1dfb      	adds	r3, r7, #7
 8005730:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8005732:	1dfb      	adds	r3, r7, #7
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d106      	bne.n	8005748 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	4908      	ldr	r1, [pc, #32]	; (8005760 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <USBD_FS_ConfigStrDescriptor+0x40>)
 8005740:	0018      	movs	r0, r3
 8005742:	f7ff fafb 	bl	8004d3c <USBD_GetString>
 8005746:	e005      	b.n	8005754 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	4905      	ldr	r1, [pc, #20]	; (8005760 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800574c:	4b05      	ldr	r3, [pc, #20]	; (8005764 <USBD_FS_ConfigStrDescriptor+0x40>)
 800574e:	0018      	movs	r0, r3
 8005750:	f7ff faf4 	bl	8004d3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8005754:	4b02      	ldr	r3, [pc, #8]	; (8005760 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8005756:	0018      	movs	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	b002      	add	sp, #8
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	2000086c 	.word	0x2000086c
 8005764:	080062f4 	.word	0x080062f4

08005768 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	0002      	movs	r2, r0
 8005770:	6039      	str	r1, [r7, #0]
 8005772:	1dfb      	adds	r3, r7, #7
 8005774:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8005776:	1dfb      	adds	r3, r7, #7
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	4908      	ldr	r1, [pc, #32]	; (80057a4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8005784:	0018      	movs	r0, r3
 8005786:	f7ff fad9 	bl	8004d3c <USBD_GetString>
 800578a:	e005      	b.n	8005798 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	4905      	ldr	r1, [pc, #20]	; (80057a4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8005790:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8005792:	0018      	movs	r0, r3
 8005794:	f7ff fad2 	bl	8004d3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8005798:	4b02      	ldr	r3, [pc, #8]	; (80057a4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800579a:	0018      	movs	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	b002      	add	sp, #8
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	46c0      	nop			; (mov r8, r8)
 80057a4:	2000086c 	.word	0x2000086c
 80057a8:	08006300 	.word	0x08006300

080057ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <Get_SerialNum+0x48>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <Get_SerialNum+0x4c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80057be:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <Get_SerialNum+0x50>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	18d3      	adds	r3, r2, r3
 80057ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00b      	beq.n	80057ea <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80057d2:	490b      	ldr	r1, [pc, #44]	; (8005800 <Get_SerialNum+0x54>)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2208      	movs	r2, #8
 80057d8:	0018      	movs	r0, r3
 80057da:	f000 f815 	bl	8005808 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80057de:	4909      	ldr	r1, [pc, #36]	; (8005804 <Get_SerialNum+0x58>)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2204      	movs	r2, #4
 80057e4:	0018      	movs	r0, r3
 80057e6:	f000 f80f 	bl	8005808 <IntToUnicode>
  }
}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b004      	add	sp, #16
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	1ffff7ac 	.word	0x1ffff7ac
 80057f8:	1ffff7b0 	.word	0x1ffff7b0
 80057fc:	1ffff7b4 	.word	0x1ffff7b4
 8005800:	20000042 	.word	0x20000042
 8005804:	20000052 	.word	0x20000052

08005808 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	1dfb      	adds	r3, r7, #7
 8005814:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8005816:	2117      	movs	r1, #23
 8005818:	187b      	adds	r3, r7, r1
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800581e:	187b      	adds	r3, r7, r1
 8005820:	2200      	movs	r2, #0
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	e02f      	b.n	8005886 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	0f1b      	lsrs	r3, r3, #28
 800582a:	2b09      	cmp	r3, #9
 800582c:	d80d      	bhi.n	800584a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	0f1b      	lsrs	r3, r3, #28
 8005832:	b2da      	uxtb	r2, r3
 8005834:	2317      	movs	r3, #23
 8005836:	18fb      	adds	r3, r7, r3
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	0019      	movs	r1, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	185b      	adds	r3, r3, r1
 8005842:	3230      	adds	r2, #48	; 0x30
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	701a      	strb	r2, [r3, #0]
 8005848:	e00c      	b.n	8005864 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	0f1b      	lsrs	r3, r3, #28
 800584e:	b2da      	uxtb	r2, r3
 8005850:	2317      	movs	r3, #23
 8005852:	18fb      	adds	r3, r7, r3
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	0019      	movs	r1, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	185b      	adds	r3, r3, r1
 800585e:	3237      	adds	r2, #55	; 0x37
 8005860:	b2d2      	uxtb	r2, r2
 8005862:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800586a:	2117      	movs	r1, #23
 800586c:	187b      	adds	r3, r7, r1
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	005b      	lsls	r3, r3, #1
 8005872:	3301      	adds	r3, #1
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	18d3      	adds	r3, r2, r3
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800587c:	187b      	adds	r3, r7, r1
 800587e:	781a      	ldrb	r2, [r3, #0]
 8005880:	187b      	adds	r3, r7, r1
 8005882:	3201      	adds	r2, #1
 8005884:	701a      	strb	r2, [r3, #0]
 8005886:	2317      	movs	r3, #23
 8005888:	18fa      	adds	r2, r7, r3
 800588a:	1dfb      	adds	r3, r7, #7
 800588c:	7812      	ldrb	r2, [r2, #0]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d3c8      	bcc.n	8005826 <IntToUnicode+0x1e>
  }
}
 8005894:	46c0      	nop			; (mov r8, r8)
 8005896:	46bd      	mov	sp, r7
 8005898:	b006      	add	sp, #24
 800589a:	bd80      	pop	{r7, pc}

0800589c <set_rx_buff>:
  * @{
  */
static uint8_t hid1_rx_buff[HID_EPOUT1_SIZE]={};
static uint8_t hid2_rx_buff[HID_EPOUT2_SIZE]={};
static void set_rx_buff(USBD_HandleTypeDef * pdev)
{//设置接收缓冲区(防止接收时崩溃)
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]


	  USBD_LL_PrepareReceive(pdev, HID_EPOUT1_ADDR,hid1_rx_buff,HID_EPOUT1_SIZE);
 80058a4:	4a07      	ldr	r2, [pc, #28]	; (80058c4 <set_rx_buff+0x28>)
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	2301      	movs	r3, #1
 80058aa:	2103      	movs	r1, #3
 80058ac:	f7ff fe02 	bl	80054b4 <USBD_LL_PrepareReceive>


	  USBD_LL_PrepareReceive(pdev, HID_EPOUT2_ADDR,hid2_rx_buff,HID_EPOUT2_SIZE);
 80058b0:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <set_rx_buff+0x2c>)
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	2340      	movs	r3, #64	; 0x40
 80058b6:	2105      	movs	r1, #5
 80058b8:	f7ff fdfc 	bl	80054b4 <USBD_LL_PrepareReceive>
}
 80058bc:	46c0      	nop			; (mov r8, r8)
 80058be:	46bd      	mov	sp, r7
 80058c0:	b002      	add	sp, #8
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	200002ec 	.word	0x200002ec
 80058c8:	200002f0 	.word	0x200002f0

080058cc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	000a      	movs	r2, r1
 80058d6:	1cfb      	adds	r3, r7, #3
 80058d8:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	2304      	movs	r3, #4
 80058de:	2203      	movs	r2, #3
 80058e0:	2181      	movs	r1, #129	; 0x81
 80058e2:	f7ff fc71 	bl	80051c8 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	62da      	str	r2, [r3, #44]	; 0x2c

  USBD_LL_OpenEP(pdev, HID_EPIN1_ADDR, USBD_EP_TYPE_INTR, HID_EPIN1_SIZE);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	2308      	movs	r3, #8
 80058f0:	2203      	movs	r2, #3
 80058f2:	2182      	movs	r1, #130	; 0x82
 80058f4:	f7ff fc68 	bl	80051c8 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN1_ADDR & 0xFU].is_used = 1U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40

  USBD_LL_OpenEP(pdev, HID_EPOUT1_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT1_SIZE);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	2301      	movs	r3, #1
 8005902:	2203      	movs	r2, #3
 8005904:	2103      	movs	r1, #3
 8005906:	f7ff fc5f 	bl	80051c8 <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT1_ADDR & 0xFU].is_used = 1U;
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	23ca      	movs	r3, #202	; 0xca
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	2101      	movs	r1, #1
 8005912:	50d1      	str	r1, [r2, r3]

  USBD_LL_OpenEP(pdev, HID_EPIN2_ADDR, USBD_EP_TYPE_INTR, HID_EPIN2_SIZE);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	2340      	movs	r3, #64	; 0x40
 8005918:	2203      	movs	r2, #3
 800591a:	2184      	movs	r1, #132	; 0x84
 800591c:	f7ff fc54 	bl	80051c8 <USBD_LL_OpenEP>
    pdev->ep_in[HID_EPIN2_ADDR & 0xFU].is_used = 1U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	669a      	str	r2, [r3, #104]	; 0x68

  USBD_LL_OpenEP(pdev, HID_EPOUT2_ADDR, USBD_EP_TYPE_INTR, HID_EPOUT2_SIZE);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	2340      	movs	r3, #64	; 0x40
 800592a:	2203      	movs	r2, #3
 800592c:	2105      	movs	r1, #5
 800592e:	f7ff fc4b 	bl	80051c8 <USBD_LL_OpenEP>
  pdev->ep_out[HID_EPOUT2_ADDR & 0xFU].is_used = 1U;
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	23de      	movs	r3, #222	; 0xde
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	2101      	movs	r1, #1
 800593a:	50d1      	str	r1, [r2, r3]


  //初始化端点
  USBD_LL_FlushEP(pdev,HID_EPIN_ADDR);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2181      	movs	r1, #129	; 0x81
 8005940:	0018      	movs	r0, r3
 8005942:	f7ff fca4 	bl	800528e <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev,HID_EPIN1_ADDR);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2182      	movs	r1, #130	; 0x82
 800594a:	0018      	movs	r0, r3
 800594c:	f7ff fc9f 	bl	800528e <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev,HID_EPIN2_ADDR);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2184      	movs	r1, #132	; 0x84
 8005954:	0018      	movs	r0, r3
 8005956:	f7ff fc9a 	bl	800528e <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev,HID_EPOUT1_ADDR);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2103      	movs	r1, #3
 800595e:	0018      	movs	r0, r3
 8005960:	f7ff fc95 	bl	800528e <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev,HID_EPOUT2_ADDR);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2105      	movs	r1, #5
 8005968:	0018      	movs	r0, r3
 800596a:	f7ff fc90 	bl	800528e <USBD_LL_FlushEP>

  //准备接收缓冲
  set_rx_buff(pdev);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	0018      	movs	r0, r3
 8005972:	f7ff ff93 	bl	800589c <set_rx_buff>

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005976:	2010      	movs	r0, #16
 8005978:	f7ff fdea 	bl	8005550 <USBD_static_malloc>
 800597c:	0001      	movs	r1, r0
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	23ae      	movs	r3, #174	; 0xae
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	23ae      	movs	r3, #174	; 0xae
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	58d3      	ldr	r3, [r2, r3]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d101      	bne.n	8005996 <USBD_HID_Init+0xca>
  {
    return USBD_FAIL;
 8005992:	2302      	movs	r3, #2
 8005994:	e006      	b.n	80059a4 <USBD_HID_Init+0xd8>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	23ae      	movs	r3, #174	; 0xae
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	58d3      	ldr	r3, [r2, r3]
 800599e:	2200      	movs	r2, #0
 80059a0:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	0018      	movs	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b002      	add	sp, #8
 80059aa:	bd80      	pop	{r7, pc}

080059ac <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	000a      	movs	r2, r1
 80059b6:	1cfb      	adds	r3, r7, #3
 80059b8:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2181      	movs	r1, #129	; 0x81
 80059be:	0018      	movs	r0, r3
 80059c0:	f7ff fc39 	bl	8005236 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	62da      	str	r2, [r3, #44]	; 0x2c

  USBD_LL_CloseEP(pdev, HID_EPIN1_ADDR);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2182      	movs	r1, #130	; 0x82
 80059ce:	0018      	movs	r0, r3
 80059d0:	f7ff fc31 	bl	8005236 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN1_ADDR & 0xFU].is_used = 0U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	641a      	str	r2, [r3, #64]	; 0x40

  USBD_LL_CloseEP(pdev, HID_EPOUT1_ADDR);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2103      	movs	r1, #3
 80059de:	0018      	movs	r0, r3
 80059e0:	f7ff fc29 	bl	8005236 <USBD_LL_CloseEP>
  pdev->ep_out[HID_EPOUT1_ADDR & 0xFU].is_used = 0U;
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	23ca      	movs	r3, #202	; 0xca
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	2100      	movs	r1, #0
 80059ec:	50d1      	str	r1, [r2, r3]

  USBD_LL_CloseEP(pdev, HID_EPIN2_ADDR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2184      	movs	r1, #132	; 0x84
 80059f2:	0018      	movs	r0, r3
 80059f4:	f7ff fc1f 	bl	8005236 <USBD_LL_CloseEP>
   pdev->ep_in[HID_EPIN2_ADDR & 0xFU].is_used = 0U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	669a      	str	r2, [r3, #104]	; 0x68

   USBD_LL_CloseEP(pdev, HID_EPOUT2_ADDR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2105      	movs	r1, #5
 8005a02:	0018      	movs	r0, r3
 8005a04:	f7ff fc17 	bl	8005236 <USBD_LL_CloseEP>
   pdev->ep_out[HID_EPOUT2_ADDR & 0xFU].is_used = 0U;
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	23de      	movs	r3, #222	; 0xde
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	2100      	movs	r1, #0
 8005a10:	50d1      	str	r1, [r2, r3]
  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	23ae      	movs	r3, #174	; 0xae
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	58d3      	ldr	r3, [r2, r3]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00b      	beq.n	8005a36 <USBD_HID_DeInit+0x8a>
  {
    USBD_free(pdev->pClassData);
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	23ae      	movs	r3, #174	; 0xae
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	58d3      	ldr	r3, [r2, r3]
 8005a26:	0018      	movs	r0, r3
 8005a28:	f7ff fd9e 	bl	8005568 <USBD_static_free>
    pdev->pClassData = NULL;
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	23ae      	movs	r3, #174	; 0xae
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	2100      	movs	r1, #0
 8005a34:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	0018      	movs	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b002      	add	sp, #8
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <USBD_HID_Setup>:
  * @retval status
  */

static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	23ae      	movs	r3, #174	; 0xae
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	58d3      	ldr	r3, [r2, r3]
 8005a52:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005a54:	231e      	movs	r3, #30
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	2200      	movs	r2, #0
 8005a5a:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005a60:	230e      	movs	r3, #14
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	2200      	movs	r2, #0
 8005a66:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a68:	2317      	movs	r3, #23
 8005a6a:	18fb      	adds	r3, r7, r3
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	001a      	movs	r2, r3
 8005a76:	2360      	movs	r3, #96	; 0x60
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d039      	beq.n	8005af0 <USBD_HID_Setup+0xb0>
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d000      	beq.n	8005a82 <USBD_HID_Setup+0x42>
 8005a80:	e118      	b.n	8005cb4 <USBD_HID_Setup+0x274>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d00e      	beq.n	8005aa8 <USBD_HID_Setup+0x68>
 8005a8a:	dc02      	bgt.n	8005a92 <USBD_HID_Setup+0x52>
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d01b      	beq.n	8005ac8 <USBD_HID_Setup+0x88>
 8005a90:	e022      	b.n	8005ad8 <USBD_HID_Setup+0x98>
 8005a92:	2b0a      	cmp	r3, #10
 8005a94:	d00f      	beq.n	8005ab6 <USBD_HID_Setup+0x76>
 8005a96:	2b0b      	cmp	r3, #11
 8005a98:	d11e      	bne.n	8005ad8 <USBD_HID_Setup+0x98>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	885b      	ldrh	r3, [r3, #2]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	001a      	movs	r2, r3
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	601a      	str	r2, [r3, #0]
          break;
 8005aa6:	e022      	b.n	8005aee <USBD_HID_Setup+0xae>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8005aa8:	6939      	ldr	r1, [r7, #16]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	0018      	movs	r0, r3
 8005ab0:	f7ff f9b0 	bl	8004e14 <USBD_CtlSendData>
          break;
 8005ab4:	e01b      	b.n	8005aee <USBD_HID_Setup+0xae>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	885b      	ldrh	r3, [r3, #2]
 8005aba:	0a1b      	lsrs	r3, r3, #8
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	001a      	movs	r2, r3
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	605a      	str	r2, [r3, #4]
          break;
 8005ac6:	e012      	b.n	8005aee <USBD_HID_Setup+0xae>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1d19      	adds	r1, r3, #4
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7ff f99f 	bl	8004e14 <USBD_CtlSendData>
          break;
 8005ad6:	e00a      	b.n	8005aee <USBD_HID_Setup+0xae>
       // case HID_REQ_SET_REPORT:
       //   USBD_CtlPrepareRx(pdev,Report_buff, req->wLength);
       //   break;

        default:
          USBD_CtlError(pdev, req);
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	0011      	movs	r1, r2
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f7ff f919 	bl	8004d16 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ae4:	2317      	movs	r3, #23
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	2202      	movs	r2, #2
 8005aea:	701a      	strb	r2, [r3, #0]
          break;
 8005aec:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005aee:	e0ec      	b.n	8005cca <USBD_HID_Setup+0x28a>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d023      	beq.n	8005b40 <USBD_HID_Setup+0x100>
 8005af8:	dc02      	bgt.n	8005b00 <USBD_HID_Setup+0xc0>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <USBD_HID_Setup+0xce>
 8005afe:	e0cd      	b.n	8005c9c <USBD_HID_Setup+0x25c>
 8005b00:	2b0a      	cmp	r3, #10
 8005b02:	d100      	bne.n	8005b06 <USBD_HID_Setup+0xc6>
 8005b04:	e098      	b.n	8005c38 <USBD_HID_Setup+0x1f8>
 8005b06:	2b0b      	cmp	r3, #11
 8005b08:	d100      	bne.n	8005b0c <USBD_HID_Setup+0xcc>
 8005b0a:	e0af      	b.n	8005c6c <USBD_HID_Setup+0x22c>
 8005b0c:	e0c6      	b.n	8005c9c <USBD_HID_Setup+0x25c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	23a7      	movs	r3, #167	; 0xa7
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	5cd3      	ldrb	r3, [r2, r3]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d107      	bne.n	8005b2a <USBD_HID_Setup+0xea>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005b1a:	230e      	movs	r3, #14
 8005b1c:	18f9      	adds	r1, r7, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2202      	movs	r2, #2
 8005b22:	0018      	movs	r0, r3
 8005b24:	f7ff f976 	bl	8004e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b28:	e0c3      	b.n	8005cb2 <USBD_HID_Setup+0x272>
            USBD_CtlError(pdev, req);
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	0011      	movs	r1, r2
 8005b30:	0018      	movs	r0, r3
 8005b32:	f7ff f8f0 	bl	8004d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b36:	2317      	movs	r3, #23
 8005b38:	18fb      	adds	r3, r7, r3
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	701a      	strb	r2, [r3, #0]
          break;
 8005b3e:	e0b8      	b.n	8005cb2 <USBD_HID_Setup+0x272>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	885b      	ldrh	r3, [r3, #2]
 8005b44:	0a1b      	lsrs	r3, r3, #8
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b22      	cmp	r3, #34	; 0x22
 8005b4a:	d12d      	bne.n	8005ba8 <USBD_HID_Setup+0x168>
          {
        	  if(req->wIndex==0)//interface 0
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	889b      	ldrh	r3, [r3, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <USBD_HID_Setup+0x12a>
        		  {
        		  	  len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	88db      	ldrh	r3, [r3, #6]
 8005b58:	221e      	movs	r2, #30
 8005b5a:	18ba      	adds	r2, r7, r2
 8005b5c:	b299      	uxth	r1, r3
 8005b5e:	294a      	cmp	r1, #74	; 0x4a
 8005b60:	d900      	bls.n	8005b64 <USBD_HID_Setup+0x124>
 8005b62:	234a      	movs	r3, #74	; 0x4a
 8005b64:	8013      	strh	r3, [r2, #0]
        		  	  pbuf = HID_MOUSE_ReportDesc;
 8005b66:	4b5c      	ldr	r3, [pc, #368]	; (8005cd8 <USBD_HID_Setup+0x298>)
 8005b68:	61bb      	str	r3, [r7, #24]
        		  }
        	  if(req->wIndex==1)//interface 1
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	889b      	ldrh	r3, [r3, #4]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d10a      	bne.n	8005b88 <USBD_HID_Setup+0x148>
        	  	  {
        		  	  	len = MIN(HID_KeyBoard_REPORT_DESC_SIZE, req->wLength);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	88db      	ldrh	r3, [r3, #6]
 8005b76:	221e      	movs	r2, #30
 8005b78:	18ba      	adds	r2, r7, r2
 8005b7a:	b299      	uxth	r1, r3
 8005b7c:	293f      	cmp	r1, #63	; 0x3f
 8005b7e:	d900      	bls.n	8005b82 <USBD_HID_Setup+0x142>
 8005b80:	233f      	movs	r3, #63	; 0x3f
 8005b82:	8013      	strh	r3, [r2, #0]
        		        pbuf = HID_KeyBoard_ReportDesc;
 8005b84:	4b55      	ldr	r3, [pc, #340]	; (8005cdc <USBD_HID_Setup+0x29c>)
 8005b86:	61bb      	str	r3, [r7, #24]
        	  	  }
        	  if(req->wIndex==2)//interface 2
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	889b      	ldrh	r3, [r3, #4]
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d14a      	bne.n	8005c26 <USBD_HID_Setup+0x1e6>
        	      {
        	          	len = MIN(HID_Config_REPORT_DESC_SIZE, req->wLength);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	88db      	ldrh	r3, [r3, #6]
 8005b94:	221e      	movs	r2, #30
 8005b96:	18ba      	adds	r2, r7, r2
 8005b98:	b299      	uxth	r1, r3
 8005b9a:	292c      	cmp	r1, #44	; 0x2c
 8005b9c:	d900      	bls.n	8005ba0 <USBD_HID_Setup+0x160>
 8005b9e:	232c      	movs	r3, #44	; 0x2c
 8005ba0:	8013      	strh	r3, [r2, #0]
        	            pbuf = HID_Config_ReportDesc;
 8005ba2:	4b4f      	ldr	r3, [pc, #316]	; (8005ce0 <USBD_HID_Setup+0x2a0>)
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	e03e      	b.n	8005c26 <USBD_HID_Setup+0x1e6>
        	      }
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	885b      	ldrh	r3, [r3, #2]
 8005bac:	0a1b      	lsrs	r3, r3, #8
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b21      	cmp	r3, #33	; 0x21
 8005bb2:	d12d      	bne.n	8005c10 <USBD_HID_Setup+0x1d0>
          {
        	 if(req->wIndex==0)//interface 0
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	889b      	ldrh	r3, [r3, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <USBD_HID_Setup+0x192>
        	 {
        		 pbuf = USBD_HID_Desc;
 8005bbc:	4b49      	ldr	r3, [pc, #292]	; (8005ce4 <USBD_HID_Setup+0x2a4>)
 8005bbe:	61bb      	str	r3, [r7, #24]
             	 len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	88db      	ldrh	r3, [r3, #6]
 8005bc4:	221e      	movs	r2, #30
 8005bc6:	18ba      	adds	r2, r7, r2
 8005bc8:	b299      	uxth	r1, r3
 8005bca:	2909      	cmp	r1, #9
 8005bcc:	d900      	bls.n	8005bd0 <USBD_HID_Setup+0x190>
 8005bce:	2309      	movs	r3, #9
 8005bd0:	8013      	strh	r3, [r2, #0]
        	 }

        	 if(req->wIndex==1)//interface 1
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	889b      	ldrh	r3, [r3, #4]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d10a      	bne.n	8005bf0 <USBD_HID_Setup+0x1b0>
        	 {
        		 pbuf = USBD_HID1_Desc;
 8005bda:	4b43      	ldr	r3, [pc, #268]	; (8005ce8 <USBD_HID_Setup+0x2a8>)
 8005bdc:	61bb      	str	r3, [r7, #24]
        		 len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	88db      	ldrh	r3, [r3, #6]
 8005be2:	221e      	movs	r2, #30
 8005be4:	18ba      	adds	r2, r7, r2
 8005be6:	b299      	uxth	r1, r3
 8005be8:	2909      	cmp	r1, #9
 8005bea:	d900      	bls.n	8005bee <USBD_HID_Setup+0x1ae>
 8005bec:	2309      	movs	r3, #9
 8005bee:	8013      	strh	r3, [r2, #0]
        	 }

        	 if(req->wIndex==2)//interface 2
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	889b      	ldrh	r3, [r3, #4]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d116      	bne.n	8005c26 <USBD_HID_Setup+0x1e6>
        	  {
        	      pbuf = USBD_HID2_Desc;
 8005bf8:	4b3c      	ldr	r3, [pc, #240]	; (8005cec <USBD_HID_Setup+0x2ac>)
 8005bfa:	61bb      	str	r3, [r7, #24]
        	      len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	88db      	ldrh	r3, [r3, #6]
 8005c00:	221e      	movs	r2, #30
 8005c02:	18ba      	adds	r2, r7, r2
 8005c04:	b299      	uxth	r1, r3
 8005c06:	2909      	cmp	r1, #9
 8005c08:	d900      	bls.n	8005c0c <USBD_HID_Setup+0x1cc>
 8005c0a:	2309      	movs	r3, #9
 8005c0c:	8013      	strh	r3, [r2, #0]
 8005c0e:	e00a      	b.n	8005c26 <USBD_HID_Setup+0x1e6>
        	  }
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0011      	movs	r1, r2
 8005c16:	0018      	movs	r0, r3
 8005c18:	f7ff f87d 	bl	8004d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c1c:	2317      	movs	r3, #23
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	2202      	movs	r2, #2
 8005c22:	701a      	strb	r2, [r3, #0]
            break;
 8005c24:	e045      	b.n	8005cb2 <USBD_HID_Setup+0x272>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8005c26:	231e      	movs	r3, #30
 8005c28:	18fb      	adds	r3, r7, r3
 8005c2a:	881a      	ldrh	r2, [r3, #0]
 8005c2c:	69b9      	ldr	r1, [r7, #24]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7ff f8ef 	bl	8004e14 <USBD_CtlSendData>
          break;
 8005c36:	e03c      	b.n	8005cb2 <USBD_HID_Setup+0x272>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	23a7      	movs	r3, #167	; 0xa7
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	5cd3      	ldrb	r3, [r2, r3]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d108      	bne.n	8005c56 <USBD_HID_Setup+0x216>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	3308      	adds	r3, #8
 8005c48:	0019      	movs	r1, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f7ff f8e0 	bl	8004e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c54:	e02d      	b.n	8005cb2 <USBD_HID_Setup+0x272>
            USBD_CtlError(pdev, req);
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	0011      	movs	r1, r2
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f7ff f85a 	bl	8004d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c62:	2317      	movs	r3, #23
 8005c64:	18fb      	adds	r3, r7, r3
 8005c66:	2202      	movs	r2, #2
 8005c68:	701a      	strb	r2, [r3, #0]
          break;
 8005c6a:	e022      	b.n	8005cb2 <USBD_HID_Setup+0x272>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	23a7      	movs	r3, #167	; 0xa7
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	5cd3      	ldrb	r3, [r2, r3]
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d106      	bne.n	8005c86 <USBD_HID_Setup+0x246>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	885b      	ldrh	r3, [r3, #2]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	001a      	movs	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005c84:	e015      	b.n	8005cb2 <USBD_HID_Setup+0x272>
            USBD_CtlError(pdev, req);
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	0011      	movs	r1, r2
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	f7ff f842 	bl	8004d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8005c92:	2317      	movs	r3, #23
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	2202      	movs	r2, #2
 8005c98:	701a      	strb	r2, [r3, #0]
          break;
 8005c9a:	e00a      	b.n	8005cb2 <USBD_HID_Setup+0x272>

        default:
          USBD_CtlError(pdev, req);
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0011      	movs	r1, r2
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f7ff f837 	bl	8004d16 <USBD_CtlError>
          ret = USBD_FAIL;
 8005ca8:	2317      	movs	r3, #23
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	2202      	movs	r2, #2
 8005cae:	701a      	strb	r2, [r3, #0]
          break;
 8005cb0:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8005cb2:	e00a      	b.n	8005cca <USBD_HID_Setup+0x28a>

    default:
      USBD_CtlError(pdev, req);
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	0011      	movs	r1, r2
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f7ff f82b 	bl	8004d16 <USBD_CtlError>
      ret = USBD_FAIL;
 8005cc0:	2317      	movs	r3, #23
 8005cc2:	18fb      	adds	r3, r7, r3
 8005cc4:	2202      	movs	r2, #2
 8005cc6:	701a      	strb	r2, [r3, #0]
      break;
 8005cc8:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8005cca:	2317      	movs	r3, #23
 8005ccc:	18fb      	adds	r3, r7, r3
 8005cce:	781b      	ldrb	r3, [r3, #0]
}
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	b008      	add	sp, #32
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	200001f0 	.word	0x200001f0
 8005cdc:	2000023c 	.word	0x2000023c
 8005ce0:	2000027c 	.word	0x2000027c
 8005ce4:	200001c0 	.word	0x200001c0
 8005ce8:	200001cc 	.word	0x200001cc
 8005cec:	200001d8 	.word	0x200001d8

08005cf0 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	1dbb      	adds	r3, r7, #6
 8005cfc:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	23ae      	movs	r3, #174	; 0xae
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	58d3      	ldr	r3, [r2, r3]
 8005d06:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	23a7      	movs	r3, #167	; 0xa7
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	5cd3      	ldrb	r3, [r2, r3]
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d10d      	bne.n	8005d30 <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	7b1b      	ldrb	r3, [r3, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d109      	bne.n	8005d30 <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8005d22:	1dbb      	adds	r3, r7, #6
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	2181      	movs	r1, #129	; 0x81
 8005d2c:	f7ff fb8a 	bl	8005444 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	0018      	movs	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	b006      	add	sp, #24
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <USBD_HID2_SendReport>:
}

uint8_t USBD_HID2_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b084      	sub	sp, #16
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	1dbb      	adds	r3, r7, #6
 8005d46:	801a      	strh	r2, [r3, #0]
 // USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	23a7      	movs	r3, #167	; 0xa7
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	5cd3      	ldrb	r3, [r2, r3]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d106      	bne.n	8005d62 <USBD_HID2_SendReport+0x28>
  {
    //if (hhid->state == HID_IDLE)
    //{
    //  hhid->state = HID_BUSY;
      USBD_LL_Transmit(pdev,
 8005d54:	1dbb      	adds	r3, r7, #6
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	2184      	movs	r1, #132	; 0x84
 8005d5e:	f7ff fb71 	bl	8005444 <USBD_LL_Transmit>
                       HID_EPIN2_ADDR,
                       report,
                       len);
    //}
  }
  return USBD_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	0018      	movs	r0, r3
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b004      	add	sp, #16
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2262      	movs	r2, #98	; 0x62
 8005d78:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8005d7a:	4b02      	ldr	r3, [pc, #8]	; (8005d84 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b002      	add	sp, #8
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20000094 	.word	0x20000094

08005d88 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2262      	movs	r2, #98	; 0x62
 8005d94:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8005d96:	4b02      	ldr	r3, [pc, #8]	; (8005da0 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8005d98:	0018      	movs	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b002      	add	sp, #8
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	200000f8 	.word	0x200000f8

08005da4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2262      	movs	r2, #98	; 0x62
 8005db0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8005db2:	4b02      	ldr	r3, [pc, #8]	; (8005dbc <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8005db4:	0018      	movs	r0, r3
 8005db6:	46bd      	mov	sp, r7
 8005db8:	b002      	add	sp, #8
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	2000015c 	.word	0x2000015c

08005dc0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	000a      	movs	r2, r1
 8005dca:	1cfb      	adds	r3, r7, #3
 8005dcc:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	23ae      	movs	r3, #174	; 0xae
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	58d3      	ldr	r3, [r2, r3]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	0018      	movs	r0, r3
 8005dde:	46bd      	mov	sp, r7
 8005de0:	b002      	add	sp, #8
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_HID_DataOut>:

static uint8_t  USBD_HID_DataOut(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	000a      	movs	r2, r1
 8005dee:	1cfb      	adds	r3, r7, #3
 8005df0:	701a      	strb	r2, [r3, #0]
 //获取接收的大小
 size_t data_size=USBD_GetRxCount(pdev,epnum);
 8005df2:	1cfb      	adds	r3, r7, #3
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	0011      	movs	r1, r2
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7ff f878 	bl	8004ef0 <USBD_GetRxCount>
 8005e00:	0003      	movs	r3, r0
 8005e02:	60fb      	str	r3, [r7, #12]
 if(epnum==HID_EPOUT1_ADDR)
 8005e04:	1cfb      	adds	r3, r7, #3
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d105      	bne.n	8005e18 <USBD_HID_DataOut+0x34>
{


	//再次接收
	USBD_LL_PrepareReceive(pdev, HID_EPOUT1_ADDR,hid1_rx_buff,HID_EPOUT1_SIZE);
 8005e0c:	4a0d      	ldr	r2, [pc, #52]	; (8005e44 <USBD_HID_DataOut+0x60>)
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	2301      	movs	r3, #1
 8005e12:	2103      	movs	r1, #3
 8005e14:	f7ff fb4e 	bl	80054b4 <USBD_LL_PrepareReceive>
 }
 if(epnum==HID_EPOUT2_ADDR)
 8005e18:	1cfb      	adds	r3, r7, #3
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b05      	cmp	r3, #5
 8005e1e:	d10c      	bne.n	8005e3a <USBD_HID_DataOut+0x56>
 {

	 //测试发送
	 USBD_HID2_SendReport(pdev,hid2_rx_buff,data_size);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	4908      	ldr	r1, [pc, #32]	; (8005e48 <USBD_HID_DataOut+0x64>)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	0018      	movs	r0, r3
 8005e2a:	f7ff ff86 	bl	8005d3a <USBD_HID2_SendReport>

	 //再次接收
	 USBD_LL_PrepareReceive(pdev, HID_EPOUT2_ADDR,hid2_rx_buff,HID_EPOUT2_SIZE);
 8005e2e:	4a06      	ldr	r2, [pc, #24]	; (8005e48 <USBD_HID_DataOut+0x64>)
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	2340      	movs	r3, #64	; 0x40
 8005e34:	2105      	movs	r1, #5
 8005e36:	f7ff fb3d 	bl	80054b4 <USBD_LL_PrepareReceive>
 }
  return USBD_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	b004      	add	sp, #16
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	200002ec 	.word	0x200002ec
 8005e48:	200002f0 	.word	0x200002f0

08005e4c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	220a      	movs	r2, #10
 8005e58:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8005e5a:	4b02      	ldr	r3, [pc, #8]	; (8005e64 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b002      	add	sp, #8
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	200001e4 	.word	0x200001e4

08005e68 <keyscan>:
#include "KeyBoard.h"
#include "Mouse.h"
#include "stdbool.h"

void keyscan()//扫描按键并且执行动作
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
	{//扫描鼠标按键
		Mouse_Data data;
		Mouse_Set_Default(&data);
 8005e6e:	1d3b      	adds	r3, r7, #4
 8005e70:	0018      	movs	r0, r3
 8005e72:	f000 f9af 	bl	80061d4 <Mouse_Set_Default>
		bool R_click,M_click,L_cilck,R,L,U,D;//按键受否按下的标志
		static uint32_t R_Step=1,L_Step=1,U_Step=1,D_Step=1;//每次按键前进的步长
		R_click=M_click=L_cilck=R=L=U=D=false;
 8005e76:	2109      	movs	r1, #9
 8005e78:	187b      	adds	r3, r7, r1
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	200a      	movs	r0, #10
 8005e80:	183b      	adds	r3, r7, r0
 8005e82:	187a      	adds	r2, r7, r1
 8005e84:	7812      	ldrb	r2, [r2, #0]
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	210b      	movs	r1, #11
 8005e8a:	187b      	adds	r3, r7, r1
 8005e8c:	183a      	adds	r2, r7, r0
 8005e8e:	7812      	ldrb	r2, [r2, #0]
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	200c      	movs	r0, #12
 8005e94:	183b      	adds	r3, r7, r0
 8005e96:	187a      	adds	r2, r7, r1
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	210d      	movs	r1, #13
 8005e9e:	187b      	adds	r3, r7, r1
 8005ea0:	183a      	adds	r2, r7, r0
 8005ea2:	7812      	ldrb	r2, [r2, #0]
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	200e      	movs	r0, #14
 8005ea8:	183b      	adds	r3, r7, r0
 8005eaa:	187a      	adds	r2, r7, r1
 8005eac:	7812      	ldrb	r2, [r2, #0]
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	230f      	movs	r3, #15
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	183a      	adds	r2, r7, r0
 8005eb6:	7812      	ldrb	r2, [r2, #0]
 8005eb8:	701a      	strb	r2, [r3, #0]

		{//第一次扫描
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)!=GPIO_PIN_RESET)
 8005eba:	4b90      	ldr	r3, [pc, #576]	; (80060fc <keyscan+0x294>)
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f7fa fe8c 	bl	8000bdc <HAL_GPIO_ReadPin>
 8005ec4:	1e03      	subs	r3, r0, #0
 8005ec6:	d003      	beq.n	8005ed0 <keyscan+0x68>
			{
				U=true;
 8005ec8:	230a      	movs	r3, #10
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	2201      	movs	r2, #1
 8005ece:	701a      	strb	r2, [r3, #0]
			}

			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)!=GPIO_PIN_RESET)
 8005ed0:	4b8a      	ldr	r3, [pc, #552]	; (80060fc <keyscan+0x294>)
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f7fa fe81 	bl	8000bdc <HAL_GPIO_ReadPin>
 8005eda:	1e03      	subs	r3, r0, #0
 8005edc:	d003      	beq.n	8005ee6 <keyscan+0x7e>
			{
				D=true;
 8005ede:	2309      	movs	r3, #9
 8005ee0:	18fb      	adds	r3, r7, r3
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	701a      	strb	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)!=GPIO_PIN_RESET)
 8005ee6:	2380      	movs	r3, #128	; 0x80
 8005ee8:	01db      	lsls	r3, r3, #7
 8005eea:	4a84      	ldr	r2, [pc, #528]	; (80060fc <keyscan+0x294>)
 8005eec:	0019      	movs	r1, r3
 8005eee:	0010      	movs	r0, r2
 8005ef0:	f7fa fe74 	bl	8000bdc <HAL_GPIO_ReadPin>
 8005ef4:	1e03      	subs	r3, r0, #0
 8005ef6:	d003      	beq.n	8005f00 <keyscan+0x98>
			{
				R=true;
 8005ef8:	230c      	movs	r3, #12
 8005efa:	18fb      	adds	r3, r7, r3
 8005efc:	2201      	movs	r2, #1
 8005efe:	701a      	strb	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)!=GPIO_PIN_RESET)
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	4a7d      	ldr	r2, [pc, #500]	; (80060fc <keyscan+0x294>)
 8005f06:	0019      	movs	r1, r3
 8005f08:	0010      	movs	r0, r2
 8005f0a:	f7fa fe67 	bl	8000bdc <HAL_GPIO_ReadPin>
 8005f0e:	1e03      	subs	r3, r0, #0
 8005f10:	d003      	beq.n	8005f1a <keyscan+0xb2>
			{
				L=true;
 8005f12:	230b      	movs	r3, #11
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	2201      	movs	r2, #1
 8005f18:	701a      	strb	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10)!=GPIO_PIN_RESET)
 8005f1a:	2380      	movs	r3, #128	; 0x80
 8005f1c:	00da      	lsls	r2, r3, #3
 8005f1e:	2390      	movs	r3, #144	; 0x90
 8005f20:	05db      	lsls	r3, r3, #23
 8005f22:	0011      	movs	r1, r2
 8005f24:	0018      	movs	r0, r3
 8005f26:	f7fa fe59 	bl	8000bdc <HAL_GPIO_ReadPin>
 8005f2a:	1e03      	subs	r3, r0, #0
 8005f2c:	d003      	beq.n	8005f36 <keyscan+0xce>
			{
				L_cilck=true;
 8005f2e:	230d      	movs	r3, #13
 8005f30:	18fb      	adds	r3, r7, r3
 8005f32:	2201      	movs	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)!=GPIO_PIN_RESET)
 8005f36:	4b71      	ldr	r3, [pc, #452]	; (80060fc <keyscan+0x294>)
 8005f38:	2104      	movs	r1, #4
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f7fa fe4e 	bl	8000bdc <HAL_GPIO_ReadPin>
 8005f40:	1e03      	subs	r3, r0, #0
 8005f42:	d003      	beq.n	8005f4c <keyscan+0xe4>
			{
				M_click=true;
 8005f44:	230e      	movs	r3, #14
 8005f46:	18fb      	adds	r3, r7, r3
 8005f48:	2201      	movs	r2, #1
 8005f4a:	701a      	strb	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15)!=GPIO_PIN_RESET)
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	021a      	lsls	r2, r3, #8
 8005f50:	2390      	movs	r3, #144	; 0x90
 8005f52:	05db      	lsls	r3, r3, #23
 8005f54:	0011      	movs	r1, r2
 8005f56:	0018      	movs	r0, r3
 8005f58:	f7fa fe40 	bl	8000bdc <HAL_GPIO_ReadPin>
 8005f5c:	1e03      	subs	r3, r0, #0
 8005f5e:	d003      	beq.n	8005f68 <keyscan+0x100>
			{
				R_click=true;
 8005f60:	230f      	movs	r3, #15
 8005f62:	18fb      	adds	r3, r7, r3
 8005f64:	2201      	movs	r2, #1
 8005f66:	701a      	strb	r2, [r3, #0]
			}
		}

		HAL_Delay(1);//延时
 8005f68:	2001      	movs	r0, #1
 8005f6a:	f7fa fbbf 	bl	80006ec <HAL_Delay>

		{//第二次扫描
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)!=GPIO_PIN_RESET)
 8005f6e:	4b63      	ldr	r3, [pc, #396]	; (80060fc <keyscan+0x294>)
 8005f70:	2101      	movs	r1, #1
 8005f72:	0018      	movs	r0, r3
 8005f74:	f7fa fe32 	bl	8000bdc <HAL_GPIO_ReadPin>
 8005f78:	1e03      	subs	r3, r0, #0
 8005f7a:	d017      	beq.n	8005fac <keyscan+0x144>
			{
					if(U)
 8005f7c:	230a      	movs	r3, #10
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00e      	beq.n	8005fa4 <keyscan+0x13c>
					{
						Mouse_Set_Y(&data,-(U_Step++));
 8005f86:	4b5e      	ldr	r3, [pc, #376]	; (8006100 <keyscan+0x298>)
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	1c51      	adds	r1, r2, #1
 8005f8c:	4b5c      	ldr	r3, [pc, #368]	; (8006100 <keyscan+0x298>)
 8005f8e:	6019      	str	r1, [r3, #0]
 8005f90:	b293      	uxth	r3, r2
 8005f92:	425b      	negs	r3, r3
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	b21a      	sxth	r2, r3
 8005f98:	1d3b      	adds	r3, r7, #4
 8005f9a:	0011      	movs	r1, r2
 8005f9c:	0018      	movs	r0, r3
 8005f9e:	f000 f8e8 	bl	8006172 <Mouse_Set_Y>
 8005fa2:	e006      	b.n	8005fb2 <keyscan+0x14a>
					}
					else
					{
						U_Step=1;
 8005fa4:	4b56      	ldr	r3, [pc, #344]	; (8006100 <keyscan+0x298>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	e002      	b.n	8005fb2 <keyscan+0x14a>
					}
			}
			else
			{
				U_Step=1;
 8005fac:	4b54      	ldr	r3, [pc, #336]	; (8006100 <keyscan+0x298>)
 8005fae:	2201      	movs	r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
			}

			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)!=GPIO_PIN_RESET)
 8005fb2:	4b52      	ldr	r3, [pc, #328]	; (80060fc <keyscan+0x294>)
 8005fb4:	2102      	movs	r1, #2
 8005fb6:	0018      	movs	r0, r3
 8005fb8:	f7fa fe10 	bl	8000bdc <HAL_GPIO_ReadPin>
 8005fbc:	1e03      	subs	r3, r0, #0
 8005fbe:	d014      	beq.n	8005fea <keyscan+0x182>
			{
					if(D)
 8005fc0:	2309      	movs	r3, #9
 8005fc2:	18fb      	adds	r3, r7, r3
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00b      	beq.n	8005fe2 <keyscan+0x17a>
					{
						Mouse_Set_Y(&data,D_Step++);
 8005fca:	4b4e      	ldr	r3, [pc, #312]	; (8006104 <keyscan+0x29c>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	1c51      	adds	r1, r2, #1
 8005fd0:	4b4c      	ldr	r3, [pc, #304]	; (8006104 <keyscan+0x29c>)
 8005fd2:	6019      	str	r1, [r3, #0]
 8005fd4:	b212      	sxth	r2, r2
 8005fd6:	1d3b      	adds	r3, r7, #4
 8005fd8:	0011      	movs	r1, r2
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f000 f8c9 	bl	8006172 <Mouse_Set_Y>
 8005fe0:	e006      	b.n	8005ff0 <keyscan+0x188>
					}
					else
					{
						D_Step=1;
 8005fe2:	4b48      	ldr	r3, [pc, #288]	; (8006104 <keyscan+0x29c>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	e002      	b.n	8005ff0 <keyscan+0x188>
					}
			}
			else
			{
				D_Step=1;
 8005fea:	4b46      	ldr	r3, [pc, #280]	; (8006104 <keyscan+0x29c>)
 8005fec:	2201      	movs	r2, #1
 8005fee:	601a      	str	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14)!=GPIO_PIN_RESET)
 8005ff0:	2380      	movs	r3, #128	; 0x80
 8005ff2:	01db      	lsls	r3, r3, #7
 8005ff4:	4a41      	ldr	r2, [pc, #260]	; (80060fc <keyscan+0x294>)
 8005ff6:	0019      	movs	r1, r3
 8005ff8:	0010      	movs	r0, r2
 8005ffa:	f7fa fdef 	bl	8000bdc <HAL_GPIO_ReadPin>
 8005ffe:	1e03      	subs	r3, r0, #0
 8006000:	d014      	beq.n	800602c <keyscan+0x1c4>
			{
					if(R)
 8006002:	230c      	movs	r3, #12
 8006004:	18fb      	adds	r3, r7, r3
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00b      	beq.n	8006024 <keyscan+0x1bc>
					{
						Mouse_Set_X(&data,R_Step++);
 800600c:	4b3e      	ldr	r3, [pc, #248]	; (8006108 <keyscan+0x2a0>)
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	1c51      	adds	r1, r2, #1
 8006012:	4b3d      	ldr	r3, [pc, #244]	; (8006108 <keyscan+0x2a0>)
 8006014:	6019      	str	r1, [r3, #0]
 8006016:	b212      	sxth	r2, r2
 8006018:	1d3b      	adds	r3, r7, #4
 800601a:	0011      	movs	r1, r2
 800601c:	0018      	movs	r0, r3
 800601e:	f000 f877 	bl	8006110 <Mouse_Set_X>
 8006022:	e006      	b.n	8006032 <keyscan+0x1ca>
					}
					else
					{
						R_Step=1;
 8006024:	4b38      	ldr	r3, [pc, #224]	; (8006108 <keyscan+0x2a0>)
 8006026:	2201      	movs	r2, #1
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	e002      	b.n	8006032 <keyscan+0x1ca>
					}
			}
			else
			{
				R_Step=1;
 800602c:	4b36      	ldr	r3, [pc, #216]	; (8006108 <keyscan+0x2a0>)
 800602e:	2201      	movs	r2, #1
 8006030:	601a      	str	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_15)!=GPIO_PIN_RESET)
 8006032:	2380      	movs	r3, #128	; 0x80
 8006034:	021b      	lsls	r3, r3, #8
 8006036:	4a31      	ldr	r2, [pc, #196]	; (80060fc <keyscan+0x294>)
 8006038:	0019      	movs	r1, r3
 800603a:	0010      	movs	r0, r2
 800603c:	f7fa fdce 	bl	8000bdc <HAL_GPIO_ReadPin>
 8006040:	1e03      	subs	r3, r0, #0
 8006042:	d017      	beq.n	8006074 <keyscan+0x20c>
			{
					if(L)
 8006044:	230b      	movs	r3, #11
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00e      	beq.n	800606c <keyscan+0x204>
					{
						Mouse_Set_X(&data,-(L_Step++));
 800604e:	4b2f      	ldr	r3, [pc, #188]	; (800610c <keyscan+0x2a4>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	1c51      	adds	r1, r2, #1
 8006054:	4b2d      	ldr	r3, [pc, #180]	; (800610c <keyscan+0x2a4>)
 8006056:	6019      	str	r1, [r3, #0]
 8006058:	b293      	uxth	r3, r2
 800605a:	425b      	negs	r3, r3
 800605c:	b29b      	uxth	r3, r3
 800605e:	b21a      	sxth	r2, r3
 8006060:	1d3b      	adds	r3, r7, #4
 8006062:	0011      	movs	r1, r2
 8006064:	0018      	movs	r0, r3
 8006066:	f000 f853 	bl	8006110 <Mouse_Set_X>
 800606a:	e006      	b.n	800607a <keyscan+0x212>
					}
					else
					{
						L_Step=1;
 800606c:	4b27      	ldr	r3, [pc, #156]	; (800610c <keyscan+0x2a4>)
 800606e:	2201      	movs	r2, #1
 8006070:	601a      	str	r2, [r3, #0]
 8006072:	e002      	b.n	800607a <keyscan+0x212>
					}
			}
			else
			{
				L_Step=1;
 8006074:	4b25      	ldr	r3, [pc, #148]	; (800610c <keyscan+0x2a4>)
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10)!=GPIO_PIN_RESET)
 800607a:	2380      	movs	r3, #128	; 0x80
 800607c:	00da      	lsls	r2, r3, #3
 800607e:	2390      	movs	r3, #144	; 0x90
 8006080:	05db      	lsls	r3, r3, #23
 8006082:	0011      	movs	r1, r2
 8006084:	0018      	movs	r0, r3
 8006086:	f7fa fda9 	bl	8000bdc <HAL_GPIO_ReadPin>
 800608a:	1e03      	subs	r3, r0, #0
 800608c:	d009      	beq.n	80060a2 <keyscan+0x23a>
			{
				if(L_cilck)
 800608e:	230d      	movs	r3, #13
 8006090:	18fb      	adds	r3, r7, r3
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d004      	beq.n	80060a2 <keyscan+0x23a>
					data.flags.flags.Left_Key=1;
 8006098:	1d3b      	adds	r3, r7, #4
 800609a:	781a      	ldrb	r2, [r3, #0]
 800609c:	2101      	movs	r1, #1
 800609e:	430a      	orrs	r2, r1
 80060a0:	701a      	strb	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)!=GPIO_PIN_RESET)
 80060a2:	4b16      	ldr	r3, [pc, #88]	; (80060fc <keyscan+0x294>)
 80060a4:	2104      	movs	r1, #4
 80060a6:	0018      	movs	r0, r3
 80060a8:	f7fa fd98 	bl	8000bdc <HAL_GPIO_ReadPin>
 80060ac:	1e03      	subs	r3, r0, #0
 80060ae:	d009      	beq.n	80060c4 <keyscan+0x25c>
			{
				if(M_click)
 80060b0:	230e      	movs	r3, #14
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <keyscan+0x25c>
					data.flags.flags.Middle_Key=1;
 80060ba:	1d3b      	adds	r3, r7, #4
 80060bc:	781a      	ldrb	r2, [r3, #0]
 80060be:	2104      	movs	r1, #4
 80060c0:	430a      	orrs	r2, r1
 80060c2:	701a      	strb	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15)!=GPIO_PIN_RESET)
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	021a      	lsls	r2, r3, #8
 80060c8:	2390      	movs	r3, #144	; 0x90
 80060ca:	05db      	lsls	r3, r3, #23
 80060cc:	0011      	movs	r1, r2
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7fa fd84 	bl	8000bdc <HAL_GPIO_ReadPin>
 80060d4:	1e03      	subs	r3, r0, #0
 80060d6:	d009      	beq.n	80060ec <keyscan+0x284>
			{
				if(R_click)
 80060d8:	230f      	movs	r3, #15
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d004      	beq.n	80060ec <keyscan+0x284>
					data.flags.flags.Right_Key=1;
 80060e2:	1d3b      	adds	r3, r7, #4
 80060e4:	781a      	ldrb	r2, [r3, #0]
 80060e6:	2102      	movs	r1, #2
 80060e8:	430a      	orrs	r2, r1
 80060ea:	701a      	strb	r2, [r3, #0]
			}
		}

		Mouse_Send_Data(&data);
 80060ec:	1d3b      	adds	r3, r7, #4
 80060ee:	0018      	movs	r0, r3
 80060f0:	f000 f894 	bl	800621c <Mouse_Send_Data>

	}
}
 80060f4:	46c0      	nop			; (mov r8, r8)
 80060f6:	46bd      	mov	sp, r7
 80060f8:	b004      	add	sp, #16
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	48000400 	.word	0x48000400
 8006100:	200002a8 	.word	0x200002a8
 8006104:	200002ac 	.word	0x200002ac
 8006108:	200002b0 	.word	0x200002b0
 800610c:	200002b4 	.word	0x200002b4

08006110 <Mouse_Set_X>:
#include "Mouse.h"
#include "usbd_hid.h"

//设置X的值
void Mouse_Set_X(Mouse_Data *p,int16_t X)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	000a      	movs	r2, r1
 800611a:	1cbb      	adds	r3, r7, #2
 800611c:	801a      	strh	r2, [r3, #0]
	//设置一些应该不变的值
	p->flags.flags.X_overflow=0;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	781a      	ldrb	r2, [r3, #0]
 8006122:	2140      	movs	r1, #64	; 0x40
 8006124:	438a      	bics	r2, r1
 8006126:	701a      	strb	r2, [r3, #0]
	p->flags.flags.Resv=1;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	781a      	ldrb	r2, [r3, #0]
 800612c:	2108      	movs	r1, #8
 800612e:	430a      	orrs	r2, r1
 8006130:	701a      	strb	r2, [r3, #0]

	if(X<0)
 8006132:	1cbb      	adds	r3, r7, #2
 8006134:	2200      	movs	r2, #0
 8006136:	5e9b      	ldrsh	r3, [r3, r2]
 8006138:	2b00      	cmp	r3, #0
 800613a:	da05      	bge.n	8006148 <Mouse_Set_X+0x38>
	{
		p->flags.flags.X_Sign=1;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	781a      	ldrb	r2, [r3, #0]
 8006140:	2110      	movs	r1, #16
 8006142:	430a      	orrs	r2, r1
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	e004      	b.n	8006152 <Mouse_Set_X+0x42>
	}
	else
	{
		p->flags.flags.X_Sign=0;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	781a      	ldrb	r2, [r3, #0]
 800614c:	2110      	movs	r1, #16
 800614e:	438a      	bics	r2, r1
 8006150:	701a      	strb	r2, [r3, #0]
	}

	int16_t X_data=X;
 8006152:	210a      	movs	r1, #10
 8006154:	187b      	adds	r3, r7, r1
 8006156:	1cba      	adds	r2, r7, #2
 8006158:	8812      	ldrh	r2, [r2, #0]
 800615a:	801a      	strh	r2, [r3, #0]
	uint16_t *X_p=&X_data;
 800615c:	187b      	adds	r3, r7, r1
 800615e:	60fb      	str	r3, [r7, #12]

	p->X_Val=((*X_p)&0xff);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	881b      	ldrh	r3, [r3, #0]
 8006164:	b2da      	uxtb	r2, r3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	705a      	strb	r2, [r3, #1]
}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	46bd      	mov	sp, r7
 800616e:	b004      	add	sp, #16
 8006170:	bd80      	pop	{r7, pc}

08006172 <Mouse_Set_Y>:
//设置Y的值
void Mouse_Set_Y(Mouse_Data *p,int16_t Y)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	000a      	movs	r2, r1
 800617c:	1cbb      	adds	r3, r7, #2
 800617e:	801a      	strh	r2, [r3, #0]
	//设置一些应该不变的值
	p->flags.flags.Y_overflow=0;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	781a      	ldrb	r2, [r3, #0]
 8006184:	217f      	movs	r1, #127	; 0x7f
 8006186:	400a      	ands	r2, r1
 8006188:	701a      	strb	r2, [r3, #0]
	p->flags.flags.Resv=1;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	781a      	ldrb	r2, [r3, #0]
 800618e:	2108      	movs	r1, #8
 8006190:	430a      	orrs	r2, r1
 8006192:	701a      	strb	r2, [r3, #0]

	if(Y<0)
 8006194:	1cbb      	adds	r3, r7, #2
 8006196:	2200      	movs	r2, #0
 8006198:	5e9b      	ldrsh	r3, [r3, r2]
 800619a:	2b00      	cmp	r3, #0
 800619c:	da05      	bge.n	80061aa <Mouse_Set_Y+0x38>
	{
		p->flags.flags.Y_Sign=1;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	781a      	ldrb	r2, [r3, #0]
 80061a2:	2120      	movs	r1, #32
 80061a4:	430a      	orrs	r2, r1
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	e004      	b.n	80061b4 <Mouse_Set_Y+0x42>
	}
	else
	{
		p->flags.flags.Y_Sign=0;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	781a      	ldrb	r2, [r3, #0]
 80061ae:	2120      	movs	r1, #32
 80061b0:	438a      	bics	r2, r1
 80061b2:	701a      	strb	r2, [r3, #0]
	}
	int16_t Y_data=Y;
 80061b4:	210a      	movs	r1, #10
 80061b6:	187b      	adds	r3, r7, r1
 80061b8:	1cba      	adds	r2, r7, #2
 80061ba:	8812      	ldrh	r2, [r2, #0]
 80061bc:	801a      	strh	r2, [r3, #0]
	uint16_t *Y_p=&Y_data;
 80061be:	187b      	adds	r3, r7, r1
 80061c0:	60fb      	str	r3, [r7, #12]

	p->Y_Val=((*Y_p)&0xff);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	709a      	strb	r2, [r3, #2]
}
 80061cc:	46c0      	nop			; (mov r8, r8)
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b004      	add	sp, #16
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <Mouse_Set_Default>:

//恢复默认设置
void Mouse_Set_Default(Mouse_Data *p)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
	p->wheel=0;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	70da      	strb	r2, [r3, #3]
	p->flags.flags.Left_Key=0;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	781a      	ldrb	r2, [r3, #0]
 80061e6:	2101      	movs	r1, #1
 80061e8:	438a      	bics	r2, r1
 80061ea:	701a      	strb	r2, [r3, #0]
	p->flags.flags.Middle_Key=0;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	781a      	ldrb	r2, [r3, #0]
 80061f0:	2104      	movs	r1, #4
 80061f2:	438a      	bics	r2, r1
 80061f4:	701a      	strb	r2, [r3, #0]
	p->flags.flags.Right_Key=0;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	781a      	ldrb	r2, [r3, #0]
 80061fa:	2102      	movs	r1, #2
 80061fc:	438a      	bics	r2, r1
 80061fe:	701a      	strb	r2, [r3, #0]

	Mouse_Set_X(p,0);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2100      	movs	r1, #0
 8006204:	0018      	movs	r0, r3
 8006206:	f7ff ff83 	bl	8006110 <Mouse_Set_X>
	Mouse_Set_Y(p,0);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2100      	movs	r1, #0
 800620e:	0018      	movs	r0, r3
 8006210:	f7ff ffaf 	bl	8006172 <Mouse_Set_Y>
}
 8006214:	46c0      	nop			; (mov r8, r8)
 8006216:	46bd      	mov	sp, r7
 8006218:	b002      	add	sp, #8
 800621a:	bd80      	pop	{r7, pc}

0800621c <Mouse_Send_Data>:

extern USBD_HandleTypeDef hUsbDeviceFS;
//发送鼠标数据
void Mouse_Send_Data(Mouse_Data *p)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
	USBD_HID_SendReport(&hUsbDeviceFS,(uint8_t *)p,sizeof(Mouse_Data));
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4b04      	ldr	r3, [pc, #16]	; (8006238 <Mouse_Send_Data+0x1c>)
 8006228:	2204      	movs	r2, #4
 800622a:	0018      	movs	r0, r3
 800622c:	f7ff fd60 	bl	8005cf0 <USBD_HID_SendReport>
}
 8006230:	46c0      	nop			; (mov r8, r8)
 8006232:	46bd      	mov	sp, r7
 8006234:	b002      	add	sp, #8
 8006236:	bd80      	pop	{r7, pc}
 8006238:	200005a8 	.word	0x200005a8

0800623c <__libc_init_array>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	2600      	movs	r6, #0
 8006240:	4d0c      	ldr	r5, [pc, #48]	; (8006274 <__libc_init_array+0x38>)
 8006242:	4c0d      	ldr	r4, [pc, #52]	; (8006278 <__libc_init_array+0x3c>)
 8006244:	1b64      	subs	r4, r4, r5
 8006246:	10a4      	asrs	r4, r4, #2
 8006248:	42a6      	cmp	r6, r4
 800624a:	d109      	bne.n	8006260 <__libc_init_array+0x24>
 800624c:	2600      	movs	r6, #0
 800624e:	f000 f821 	bl	8006294 <_init>
 8006252:	4d0a      	ldr	r5, [pc, #40]	; (800627c <__libc_init_array+0x40>)
 8006254:	4c0a      	ldr	r4, [pc, #40]	; (8006280 <__libc_init_array+0x44>)
 8006256:	1b64      	subs	r4, r4, r5
 8006258:	10a4      	asrs	r4, r4, #2
 800625a:	42a6      	cmp	r6, r4
 800625c:	d105      	bne.n	800626a <__libc_init_array+0x2e>
 800625e:	bd70      	pop	{r4, r5, r6, pc}
 8006260:	00b3      	lsls	r3, r6, #2
 8006262:	58eb      	ldr	r3, [r5, r3]
 8006264:	4798      	blx	r3
 8006266:	3601      	adds	r6, #1
 8006268:	e7ee      	b.n	8006248 <__libc_init_array+0xc>
 800626a:	00b3      	lsls	r3, r6, #2
 800626c:	58eb      	ldr	r3, [r5, r3]
 800626e:	4798      	blx	r3
 8006270:	3601      	adds	r6, #1
 8006272:	e7f2      	b.n	800625a <__libc_init_array+0x1e>
 8006274:	08006380 	.word	0x08006380
 8006278:	08006380 	.word	0x08006380
 800627c:	08006380 	.word	0x08006380
 8006280:	08006384 	.word	0x08006384

08006284 <memset>:
 8006284:	0003      	movs	r3, r0
 8006286:	1812      	adds	r2, r2, r0
 8006288:	4293      	cmp	r3, r2
 800628a:	d100      	bne.n	800628e <memset+0xa>
 800628c:	4770      	bx	lr
 800628e:	7019      	strb	r1, [r3, #0]
 8006290:	3301      	adds	r3, #1
 8006292:	e7f9      	b.n	8006288 <memset+0x4>

08006294 <_init>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629a:	bc08      	pop	{r3}
 800629c:	469e      	mov	lr, r3
 800629e:	4770      	bx	lr

080062a0 <_fini>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a6:	bc08      	pop	{r3}
 80062a8:	469e      	mov	lr, r3
 80062aa:	4770      	bx	lr
